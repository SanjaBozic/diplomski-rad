//ATTRIBMAP-50-51-90-00-53-54-xx
#version 330 core
// LunarGOO output
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
layout(std140, binding = 13 ) uniform PerViewConstantBuffer_t {
	layout(row_major) mat4 g_matWorldToProjection;
	layout(row_major) mat4 g_matProjectionToWorld;
	layout(row_major) mat4 g_matWorldToView;
	layout(row_major) mat4 g_matViewToProjection;
	vec4 g_vInvProjRow3;
	vec4 g_vClipPlane0;
	float g_flToneMapScalarLinear;
	float g_flLightMapScalar;
	float g_flEnvMapScalar;
	float g_flToneMapScalarGamma;
	vec3 g_vCameraPositionWs;
	float g_flViewportMinZ;
	vec3 g_vCameraDirWs;
	float g_flViewportMaxZ;
	vec3 g_vCameraUpDirWs;
	float g_flTime;
	vec3 g_vDepthPsToVsConversion;
	float g_flNearPlane;
	float g_flFarPlane;
	float g_flLightBinnerFarPlane;
	vec2 g_vInvViewportSize;
	vec2 g_vViewportToGBufferRatio;
	vec2 g_vMorphTextureAtlasSize;
	vec4 g_vInvGBufferSize;
	vec2 g_vViewportOffset;
	vec2 g_vViewportSize;
	vec2 g_vRenderTargetSize;
	float g_flFogBlendToBackground;
	float g_flHenyeyGreensteinCoeff;
	vec3 g_vFogColor;
	float g_flNegFogStartOverFogRange;
	float g_flInvFogRange;
	float g_flFogMaxDensity;
	float g_flFogExponent;
	float g_flMod2xIdentity;
	vec2 g_bRoughnessParams;
	float g_bStereoEnabled;
	float g_flStereoCameraIndex;
	vec3 g_vMiddleEyePositionWs;
	float g_flPad2;
	layout(row_major) mat4 g_matWorldToProjectionMultiview[2];
	vec4 g_vCameraPositionWsMultiview[2];
	vec4 g_vFrameBufferCopyInvSizeAndUvScale;
	vec4 g_vCameraAngles;
	vec4 g_vWorldToCameraOffset;
	vec4 g_vWorldToCameraOffsetMultiview[2];
	vec4 g_vPerViewConstantExtraData0;
	vec4 g_vPerViewConstantExtraData1;
	vec4 g_vPerViewConstantExtraData2;
	vec4 g_vPerViewConstantExtraData3;
} ;
layout(std140, binding = 12 ) uniform SpritecardVertexControls_t {
	vec4 g_vecRadiusControls;
	vec4 g_vecExtraData;
	vec4 g_vecSequenceAddressingControls;
	vec4 g_vecDepthControlAndRotationCenterData;
	vec4 g_vecOrientationFadeControlData;
	vec4 g_vecTexelSizeControls;
	vec4 g_vecFinalUVOffsetAndScale;
	vec4 g_vecExtraData2;
} ;
layout(std140, binding = 14 ) uniform SpriteCardPixelControls_t {
	vec4 g_vecPixelControls;
	vec4 g_vecBlendControl;
	vec4 g_vRefractControl;
	vec4 g_vecSeq0Scale;
	vec4 g_vecSeq0Bias;
	vec4 g_vecSeq0AlphaBlendControl;
	vec4 g_vecSeq1Scale;
	vec4 g_vecSeq1Bias;
	vec4 g_vecSeq1AlphaBlendControl;
	vec4 g_vecMotionVectorsControl;
	vec4 g_vColorTransformScale;
	float g_flColorTransformAlphaBias;
	float g_flDesatAmount;
	vec2 _g_vPadding_;
	vec4 g_vecOutlineColor;
	vec4 g_vecOutlineRanges;
	vec4 g_vecHSVShiftShadowDensity;
} ;
layout(std140) uniform DotaGlobalParams_t {
	vec3 g_vGlobalLightDir;
	vec3 g_vGlobalLightColor;
	float g_flGlobalLightSpecularScale;
	vec3 g_vGlobalLightSpecularDir;
	float g_flGlobalLightSpecularExp;
	vec3 g_vGlobalLightSpecularColor;
	float g_flGlobalLightSpecularIndependence;
	vec3 g_vGlobalLightAmbientDir;
	float g_flGlobalLightAmbientScale1;
	vec3 g_vGlobalLightAmbientColor1;
	float g_flGlobalLightAmbientScale2;
	vec3 g_vGlobalLightAmbientColor2;
	float g_flGlobalLightAmbientScale2Hero;
	vec2 g_vGlobalCloud1Offset;
	vec2 g_vGlobalCloud2Offset;
	vec3 g_vFowColor;
	float g_flGlobalCloudScale;
	float g_flFowDarkness;
	float g_flFowGrayFactor;
	float g_flFowColorFactor;
	float g_flFowGrayHilights;
	vec4 g_vFowWorldSize;
	vec4 g_vFowTexOffsets;
	layout(row_major) mat4 g_matShadowWorldToTexture;
	vec4 g_vInvShadowDepthTextureSize;
	vec3 g_vGlobalLightAmbientColor3;
	float g_flGlobalLightAmbientShadowAmount;
} ;
uniform sampler2D g_tFow;
uniform sampler2D g_tFrameBufferCopyTexture;
uniform sampler2D g_tDepthTexture;
uniform sampler2D g_tGBufferAlbedo;
uniform sampler2D g_tGBufferLightingTerms;
uniform sampler2D g_tGBufferDepth;
uniform sampler2D g_tGBufferNormalWs;
layout(std140) uniform PerViewLightingConstantBuffer_t {
	vec4 g_vInvLightTextureDims;
	vec4 g_vLightBinCounts;
	vec2 g_vLowResDeferredLightingTextureDim;
	vec2 g_vLowResDeferredLightingTextureInvDim;
	vec3 g_vToolsAmbientLighting;
	float g_flSSAOEnabled;
	vec3 g_vIrradAtlasInvSize;
	float g_flIrradGlobalLightingFactor;
	vec4 g_vGlobalLightingSHRed;
	vec4 g_vGlobalLightingSHGreen;
	vec4 g_vGlobalLightingSHBlue;
	vec3 g_vRayleighScatteringCoeff;
	float g_flMieScatteringEccentricity;
	vec3 g_vMieScatteringCoeff;
	float g_flMieForwardScatteringRatio;
	vec3 g_vSpecularCubeMapScale;
	float g_flDefaultEnvMapIndex;
	vec4 g_vLightCookieSheetSequenceAndSizes;
	vec3 g_vLpvBoxMinCascade0;
	float g_flLpvBrightnessScale;
	vec3 g_vLpvInvBoxDimCascade0;
	vec2 g_vLpvInvCoeffTextureDim;
} ;
layout(std140) uniform PerLayerConstantBuffer_t {
	vec4 g_vWireframeColor;
} ;
uniform sampler2D g_tParticleSheetTexture;
layout(std140) uniform SpritecardSheetData_t {
	vec4 g_vSheetDataIndex;
} ;
layout(std140) uniform SpritecardNormalSheetData_t {
	vec4 g_vNormalSheetDataIndex;
} ;
layout(std140) uniform SpritecardMotionVectorsSheetData_t {
	vec4 g_vMotionVectorsSheetDataIndex;
} ;
uniform sampler2D g_tBaseTexture;
uniform sampler2D g_tBaseTextureNoSRGB;
uniform sampler2D g_tClouds;
uniform sampler2DShadow g_tShadowDepthTexture;
layout(location=0) in vec2 VS_INPUT_gl_m_vCornerID;
layout(location=1) in vec4 VS_INPUT_gl_m_vSequenceAndTimeData;
layout(location=2) in vec4 VS_INPUT_gl_m_vTint;
layout(location=3) in vec3 VS_INPUT_gl_m_vPos;
layout(location=4) in vec4 VS_INPUT_gl_m_vRotationAndRadiusData;
layout(location=5) in vec3 VS_INPUT_gl_m_vParticleNormal;
out gl_PerVertex {
	vec4 gl_Position;
	float gl_ClipDistance[1];
} ;
layout(location=0) out vec4 PS_INPUT_gl_m_vTexCoords;
layout(location=1) out vec4 PS_INPUT_gl_m_vTintColor;
layout(location=2) out vec4 PS_INPUT_gl_vPositionWs_flLinearDepth;
layout(location=3) out vec3 PS_INPUT_gl_vNormalWs;
layout(location=4) out vec4 PS_INPUT_gl_m_vAnimationBlendValues;
const float C_0d0 = 0.0;
const float C_0d5 = 0.5;
const float C_a0d5 = -0.5;
const vec3 C_vec3p12d92p = vec3(12.92);
const vec3 C_vec3p1d055p = vec3(1.055);
const vec3 C_bw96as = vec3(0.0521327);
const vec3 C_vec3p2d4p = vec3(2.4);
const float C_0d04045 = 0.04045;
const float C_0d9 = 0.9;
const vec3 C_ypnorl1 = vec3(1.0, 0.0, 0.0);
const vec3 C_imhxe9 = vec3(0.0, 0.0, 1.0);
const float C_1d0 = 1.0;
const vec4 C_vec4p0d0p = vec4(0.0);
const float C_0d00392157 = 0.00392157;
const float C_0d001 = 0.001;
const vec4 C_8k04jx = vec4(1.0, 0.0, 1.0, 0.0);
const float C_2d0 = 2.0;
void main()
{
	vec4 param;
	float param1;
	gl_ClipDistance[0] = C_0d0;
	float H_1kbkgh1 = VS_INPUT_gl_m_vCornerID.x * C_0d5;
	float H_jex36n1 = C_0d5 + H_1kbkgh1;
	float H_9bzbx5 = VS_INPUT_gl_m_vCornerID.y * C_a0d5;
	float H_whevlw = C_0d5 + H_9bzbx5;
	vec4 H_4p7ye11 = vec4(H_jex36n1, H_whevlw, H_jex36n1, H_whevlw);
	float H_m7577j1 = C_0d5 * VS_INPUT_gl_m_vCornerID.y;
	float H_w5pvb6 = C_0d5 + H_m7577j1;
	float flDistance = mix(VS_INPUT_gl_m_vSequenceAndTimeData.x, VS_INPUT_gl_m_vSequenceAndTimeData.y, H_w5pvb6);
	vec4 H_uu6dtn = H_4p7ye11 * g_vecFinalUVOffsetAndScale.zwzw;
	vec4 H_eqzjsp = H_uu6dtn + g_vecFinalUVOffsetAndScale.xyxy;
	float H_48kbar1 = flDistance + g_vecTexelSizeControls.z;
	float H_5beijh1 = H_48kbar1 * g_vecTexelSizeControls.w;
	float H_qmduo9 = H_5beijh1 * g_vecFinalUVOffsetAndScale.w;
	float H_k1gvhu = H_qmduo9 + g_vecFinalUVOffsetAndScale.y;
	vec2 H_fid00w = vec2(H_k1gvhu);
	vec2 H_ixjc2c = mix(H_eqzjsp.yw, H_fid00w, g_vecTexelSizeControls.x);
	vec4 H_5qazuw = H_eqzjsp;
	H_5qazuw.yw = H_ixjc2c.xy;
	vec3 vLinearSegment = VS_INPUT_gl_m_vTint.xyz / C_vec3p12d92p;
	vec3 H_t1ew65 = VS_INPUT_gl_m_vTint.xyz / C_vec3p1d055p;
	vec3 H_fsgtks = H_t1ew65 + C_bw96as;
	vec3 vExpSegment = pow(H_fsgtks, C_vec3p2d4p);
	bool H_woa5qi1 = VS_INPUT_gl_m_vTint.x > C_0d04045;
	float select = H_woa5qi1 ? vExpSegment.x : vLinearSegment.x;
	bool H_zk280s = VS_INPUT_gl_m_vTint.y > C_0d04045;
	float select1 = H_zk280s ? vExpSegment.y : vLinearSegment.y;
	bool H_2iabxr = VS_INPUT_gl_m_vTint.z > C_0d04045;
	float select2 = H_2iabxr ? vExpSegment.z : vLinearSegment.z;
	vec4 H_6033rx = vec4(select, select1, select2, VS_INPUT_gl_m_vTint.w);
	vec4 vecTint = mix(VS_INPUT_gl_m_vTint, H_6033rx, g_vecExtraData2.x);
	float H_kxkxob = abs(VS_INPUT_gl_m_vParticleNormal.z);
	bool H_qek8ns = H_kxkxob > C_0d9;
	vec3 vTrialVector = H_qek8ns ? C_ypnorl1 : C_imhxe9;
	vec3 vUp = cross(VS_INPUT_gl_m_vParticleNormal, vTrialVector);
	vec3 vUp1 = normalize(vUp);
	vec3 vRight = cross(VS_INPUT_gl_m_vParticleNormal, vUp1);
	vec3 flDot = normalize(VS_INPUT_gl_m_vParticleNormal);
	float flDot1 = dot(flDot, g_vCameraDirWs);
	float flDot2 = abs(flDot1);
	float misc3a = smoothstep(g_vecOrientationFadeControlData.x, g_vecOrientationFadeControlData.y, flDot2);
	float H_fhpmz7 = C_1d0 - misc3a;
	float H_gkjjmx = H_fhpmz7 * vecTint.w;
	vec4 H_46vjh3 = vecTint;
	H_46vjh3.w = H_gkjjmx;
	float flCosRot = cos(VS_INPUT_gl_m_vRotationAndRadiusData.x);
	vec3 H_zxczdp = vec3(flCosRot);
	float flSinRot = sin(VS_INPUT_gl_m_vRotationAndRadiusData.x);
	vec3 H_yaca1b = vec3(flSinRot);
	vec3 H_3j552u = H_zxczdp * vRight;
	vec3 H_fjdrpn = H_yaca1b * vUp1;
	vec3 H_sj7307 = H_3j552u + H_fjdrpn;
	vec3 H_x7ac701 = H_zxczdp * vUp1;
	vec3 H_l64tfc = H_yaca1b * vRight;
	vec3 H_6ijkhi = H_x7ac701 - H_l64tfc;
	float flSin = sin(VS_INPUT_gl_m_vRotationAndRadiusData.y);
	float flCos = cos(VS_INPUT_gl_m_vRotationAndRadiusData.y);
	float flAxisXSquared = H_6ijkhi.x * H_6ijkhi.x;
	float flAxisYSquared = H_6ijkhi.y * H_6ijkhi.y;
	float flAxisZSquared = H_6ijkhi.z * H_6ijkhi.z;
	float H_1zt6w01 = C_1d0 - flAxisXSquared;
	float H_itict51 = H_1zt6w01 * flCos;
	float H_m0w0j91 = H_itict51 + flAxisXSquared;
	float H_ul6tjm1 = H_6ijkhi.x * H_6ijkhi.y;
	float H_k83isr = C_1d0 - flCos;
	float H_6ubd7 = H_k83isr * H_ul6tjm1;
	float H_rsv1s41 = H_6ijkhi.z * flSin;
	float H_yq06wt1 = H_6ubd7 + H_rsv1s41;
	float H_vwkt9m1 = H_6ijkhi.x * H_6ijkhi.z;
	float H_eoz615 = H_k83isr * H_vwkt9m1;
	float H_23b66a = H_6ijkhi.y * flSin;
	float H_4bjmz81 = H_eoz615 - H_23b66a;
	float H_w19b8b = H_6ubd7 - H_rsv1s41;
	float H_0hkqtj1 = C_1d0 - flAxisYSquared;
	float H_aobm0p = H_0hkqtj1 * flCos;
	float H_73knml1 = H_aobm0p + flAxisYSquared;
	float H_65lr7r1 = H_6ijkhi.y * H_6ijkhi.z;
	float H_63a0fj = H_65lr7r1 * H_k83isr;
	float H_d6r5m1 = H_6ijkhi.x * flSin;
	float H_t1xtpi1 = H_63a0fj + H_d6r5m1;
	float H_upqn7q = H_23b66a + H_eoz615;
	float H_bexhww1 = H_63a0fj - H_d6r5m1;
	float H_7i1isn1 = C_1d0 - flAxisZSquared;
	float H_lr8md3 = H_7i1isn1 * flCos;
	float H_rv88f5 = H_lr8md3 + flAxisZSquared;
	vec3 H_f8djnk1 = vec3(H_m0w0j91, H_w19b8b, H_upqn7q);
	vec3 H_b04t87 = vec3(H_yq06wt1, H_73knml1, H_bexhww1);
	vec3 H_ar4rei1 = vec3(H_4bjmz81, H_t1xtpi1, H_rv88f5);
	float dotres = dot(H_sj7307, H_f8djnk1);
	float dotres1 = dot(H_sj7307, H_b04t87);
	float dotres2 = dot(H_sj7307, H_ar4rei1);
	vec3 H_3cij4j1 = vec3(dotres, dotres1, dotres2);
	float dotres3 = dot(VS_INPUT_gl_m_vParticleNormal, H_f8djnk1);
	float dotres4 = dot(VS_INPUT_gl_m_vParticleNormal, H_b04t87);
	float dotres5 = dot(VS_INPUT_gl_m_vParticleNormal, H_ar4rei1);
	vec3 H_25kyhb = vec3(dotres3, dotres4, dotres5);
	float H_0vgzbo1 = VS_INPUT_gl_m_vCornerID.x + g_vecDepthControlAndRotationCenterData.y;
	vec3 H_9rly2r = vec3(H_0vgzbo1);
	vec3 H_l57h3f1 = H_3cij4j1 * H_9rly2r;
	float H_0hb90j1 = VS_INPUT_gl_m_vCornerID.y + g_vecDepthControlAndRotationCenterData.z;
	vec3 H_y0t86z = vec3(H_0hb90j1);
	vec3 H_1vm93s = H_6ijkhi * H_y0t86z;
	vec3 H_hl3ya31 = H_1vm93s + H_l57h3f1;
	vec3 H_5vlz4l1 = g_vCameraPositionWs - VS_INPUT_gl_m_vPos;
	float flDistanceFromEyeToParticle = length(H_5vlz4l1);
	bool H_ab3nes1 = g_vecOrientationFadeControlData.z > C_0d0;
	param = H_46vjh3;
	param1 = VS_INPUT_gl_m_vRotationAndRadiusData.w;
	if (H_ab3nes1) {
		float H_1fzll = flDistanceFromEyeToParticle * g_vecRadiusControls.y;
		bool H_0fy6si = VS_INPUT_gl_m_vRotationAndRadiusData.w > H_1fzll;
		float H_8b8rsy1 = flDistanceFromEyeToParticle * g_vecRadiusControls.z;
		bool H_0mhdov1 = VS_INPUT_gl_m_vRotationAndRadiusData.w > H_8b8rsy1;
		float H_dgfxa7 = VS_INPUT_gl_m_vRotationAndRadiusData.w - H_1fzll;
		float H_d9g5p91 = g_vecRadiusControls.z - g_vecRadiusControls.y;
		float H_o95ex61 = H_d9g5p91 * flDistanceFromEyeToParticle;
		float H_aiav7a = H_dgfxa7 / H_o95ex61;
		float H_rl2wwh1 = C_1d0 - H_aiav7a;
		vec4 H_0qwkvf1 = vec4(H_rl2wwh1);
		vec4 H_0ujov21 = H_0qwkvf1 * H_46vjh3;
		vec4 select3 = H_0mhdov1 ? C_vec4p0d0p : H_0ujov21;
		vec4 select4 = H_0fy6si ? select3 : H_46vjh3;
		float param2 = flDistanceFromEyeToParticle * g_vecRadiusControls.x;
		float param3 = flDistanceFromEyeToParticle * g_vecRadiusControls.w;
		float H_3cvx9d1 = clamp(VS_INPUT_gl_m_vRotationAndRadiusData.w, param2, param3);
		param = select4;
		param1 = H_3cvx9d1;
	}
	bool H_gud1601 = param.w < C_0d00392157;
	float param4 = H_gud1601 ? C_0d0 : param1;
	vec3 H_kpd7uy = vec3(param4);
	float flAlphaAdjustment = VS_INPUT_gl_m_vRotationAndRadiusData.w / param4;
	float vecTint1 = mix(C_1d0, flAlphaAdjustment, g_vecOrientationFadeControlData.w);
	float H_771o8l = param.w * vecTint1;
	vec3 H_2fws4d1 = H_hl3ya31 * H_kpd7uy;
	vec3 vecWorldPos = H_2fws4d1 + VS_INPUT_gl_m_vPos;
	vec4 H_i283401 = vec4(vecWorldPos.x, vecWorldPos.y, vecWorldPos.z, C_1d0);
	vec4 H_bo52ih1 = H_i283401 + g_vWorldToCameraOffsetMultiview[0];
	float dotres6 = dot(H_bo52ih1, g_matWorldToProjectionMultiview[0][0]);
	float dotres7 = dot(H_bo52ih1, g_matWorldToProjectionMultiview[0][1]);
	float dotres8 = dot(H_bo52ih1, g_matWorldToProjectionMultiview[0][2]);
	float dotres9 = dot(H_bo52ih1, g_matWorldToProjectionMultiview[0][3]);
	vec3 H_b734ov1 = g_vCameraDirWs * g_vecDepthControlAndRotationCenterData.xxx;
	vec3 param5 = H_b734ov1 + vecWorldPos;
	vec4 H_u7v683 = vec4(param5.x, param5.y, param5.z, C_1d0);
	vec4 H_z5ctld1 = H_u7v683 + g_vWorldToCameraOffsetMultiview[0];
	float dotresa = dot(H_z5ctld1, g_matWorldToProjectionMultiview[0][2]);
	float dotresb = dot(H_z5ctld1, g_matWorldToProjectionMultiview[0][3]);
	float H_vud7lz = dotresa / dotresb;
	float flDesiredZ = H_vud7lz * dotres9;
	float misc2a = min(C_0d001, dotres8);
	float misc2a1 = max(flDesiredZ, misc2a);
	vec3 H_ejiuyb = vecWorldPos - g_vCameraPositionWs;
	float H_yil48l1 = dot(g_vCameraDirWs, H_ejiuyb);
	vec4 H_f4kfbg1 = vec4(vecWorldPos.x, vecWorldPos.y, vecWorldPos.z, H_yil48l1);
	vec3 vCameraToWorld = vecWorldPos - g_vCameraPositionWs;
	vec3 vNormalWs = faceforward(H_25kyhb, vCameraToWorld, H_25kyhb);
	float H_hinrhc = dot(H_i283401, g_vClipPlane0);
	vec3 H_97llm = g_vRefractControl.zzz * param.xyz;
	vec3 H_htmm3o1 = H_97llm * g_vecBlendControl.zzz;
	vec4 H_8tje981 = vec4(H_htmm3o1.x, H_htmm3o1.y, H_htmm3o1.z, H_771o8l);
	PS_INPUT_gl_m_vTexCoords = H_5qazuw;
	PS_INPUT_gl_m_vTintColor = H_8tje981;
	PS_INPUT_gl_vPositionWs_flLinearDepth = H_f4kfbg1;
	PS_INPUT_gl_vNormalWs = vNormalWs;
	PS_INPUT_gl_m_vAnimationBlendValues = C_8k04jx;
	float H_q212zt1 = C_0d0 - dotres7;
	float H_1is19k = misc2a1 * C_2d0;
	float H_vyziih1 = H_1is19k - dotres9;
	vec4 H_4bu5161 = vec4(dotres6, H_q212zt1, H_vyziih1, dotres9);
	gl_Position = H_4bu5161;
	gl_ClipDistance[0] = H_hinrhc;
}
