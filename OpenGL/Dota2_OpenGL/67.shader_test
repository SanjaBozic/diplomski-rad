[require]
GLSL >= 3.30
GL_ARB_separate_shader_objects
SSO ENABLED

[fragment shader]
#version 330 core
// LunarGOO output
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
uniform sampler2D g_tBaseTextureNoSRGB;
layout( binding = 0 ) uniform sampler2D g_tBaseTexture;
layout(std140, binding = 0 ) uniform SpriteCardPixelControls_t {
	vec4 g_vecPixelControls;
	vec4 g_vecBlendControl;
	vec4 g_vRefractControl;
	vec4 g_vecSeq0Scale;
	vec4 g_vecSeq0Bias;
	vec4 g_vecSeq0AlphaBlendControl;
	vec4 g_vecSeq1Scale;
	vec4 g_vecSeq1Bias;
	vec4 g_vecSeq1AlphaBlendControl;
	vec4 g_vecMotionVectorsControl;
	vec4 g_vColorTransformScale;
	float g_flColorTransformAlphaBias;
	float g_flDesatAmount;
	vec2 _g_vPadding_;
	vec4 g_vecOutlineColor;
	vec4 g_vecOutlineRanges;
	vec4 g_vecHSVShiftShadowDensity;
} ;
layout(std140) uniform DotaGlobalParams_t {
	vec3 g_vGlobalLightDir;
	vec3 g_vGlobalLightColor;
	float g_flGlobalLightSpecularScale;
	vec3 g_vGlobalLightSpecularDir;
	float g_flGlobalLightSpecularExp;
	vec3 g_vGlobalLightSpecularColor;
	float g_flGlobalLightSpecularIndependence;
	vec3 g_vGlobalLightAmbientDir;
	float g_flGlobalLightAmbientScale1;
	vec3 g_vGlobalLightAmbientColor1;
	float g_flGlobalLightAmbientScale2;
	vec3 g_vGlobalLightAmbientColor2;
	float g_flGlobalLightAmbientScale2Hero;
	vec2 g_vGlobalCloud1Offset;
	vec2 g_vGlobalCloud2Offset;
	vec3 g_vFowColor;
	float g_flGlobalCloudScale;
	float g_flFowDarkness;
	float g_flFowGrayFactor;
	float g_flFowColorFactor;
	float g_flFowGrayHilights;
	vec4 g_vFowWorldSize;
	vec4 g_vFowTexOffsets;
	layout(row_major) mat4 g_matShadowWorldToTexture;
	vec4 g_vInvShadowDepthTextureSize;
	vec3 g_vGlobalLightAmbientColor3;
	float g_flGlobalLightAmbientShadowAmount;
} ;
uniform sampler2D g_tFow;
uniform sampler2D g_tFrameBufferCopyTexture;
uniform sampler2D g_tDepthTexture;
uniform sampler2D g_tGBufferAlbedo;
uniform sampler2D g_tGBufferLightingTerms;
uniform sampler2D g_tGBufferDepth;
uniform sampler2D g_tGBufferNormalWs;
layout(std140) uniform PerViewConstantBuffer_t {
	layout(row_major) mat4 g_matWorldToProjection;
	layout(row_major) mat4 g_matProjectionToWorld;
	layout(row_major) mat4 g_matWorldToView;
	layout(row_major) mat4 g_matViewToProjection;
	vec4 g_vInvProjRow3;
	vec4 g_vClipPlane0;
	float g_flToneMapScalarLinear;
	float g_flLightMapScalar;
	float g_flEnvMapScalar;
	float g_flToneMapScalarGamma;
	vec3 g_vCameraPositionWs;
	float g_flViewportMinZ;
	vec3 g_vCameraDirWs;
	float g_flViewportMaxZ;
	vec3 g_vCameraUpDirWs;
	float g_flTime;
	vec3 g_vDepthPsToVsConversion;
	float g_flNearPlane;
	float g_flFarPlane;
	float g_flLightBinnerFarPlane;
	vec2 g_vInvViewportSize;
	vec2 g_vViewportToGBufferRatio;
	vec2 g_vMorphTextureAtlasSize;
	vec4 g_vInvGBufferSize;
	vec2 g_vViewportOffset;
	vec2 g_vViewportSize;
	vec2 g_vRenderTargetSize;
	float g_flFogBlendToBackground;
	float g_flHenyeyGreensteinCoeff;
	vec3 g_vFogColor;
	float g_flNegFogStartOverFogRange;
	float g_flInvFogRange;
	float g_flFogMaxDensity;
	float g_flFogExponent;
	float g_flMod2xIdentity;
	vec2 g_bRoughnessParams;
	float g_bStereoEnabled;
	float g_flStereoCameraIndex;
	vec3 g_vMiddleEyePositionWs;
	float g_flPad2;
	layout(row_major) mat4 g_matWorldToProjectionMultiview[2];
	vec4 g_vCameraPositionWsMultiview[2];
	vec4 g_vFrameBufferCopyInvSizeAndUvScale;
	vec4 g_vCameraAngles;
	vec4 g_vWorldToCameraOffset;
	vec4 g_vWorldToCameraOffsetMultiview[2];
	vec4 g_vPerViewConstantExtraData0;
	vec4 g_vPerViewConstantExtraData1;
	vec4 g_vPerViewConstantExtraData2;
	vec4 g_vPerViewConstantExtraData3;
} ;
layout(std140) uniform PerViewLightingConstantBuffer_t {
	vec4 g_vInvLightTextureDims;
	vec4 g_vLightBinCounts;
	vec2 g_vLowResDeferredLightingTextureDim;
	vec2 g_vLowResDeferredLightingTextureInvDim;
	vec3 g_vToolsAmbientLighting;
	float g_flSSAOEnabled;
	vec3 g_vIrradAtlasInvSize;
	float g_flIrradGlobalLightingFactor;
	vec4 g_vGlobalLightingSHRed;
	vec4 g_vGlobalLightingSHGreen;
	vec4 g_vGlobalLightingSHBlue;
	vec3 g_vRayleighScatteringCoeff;
	float g_flMieScatteringEccentricity;
	vec3 g_vMieScatteringCoeff;
	float g_flMieForwardScatteringRatio;
	vec3 g_vSpecularCubeMapScale;
	float g_flDefaultEnvMapIndex;
	vec4 g_vLightCookieSheetSequenceAndSizes;
	vec3 g_vLpvBoxMinCascade0;
	float g_flLpvBrightnessScale;
	vec3 g_vLpvInvBoxDimCascade0;
	vec2 g_vLpvInvCoeffTextureDim;
} ;
layout(std140) uniform PerLayerConstantBuffer_t {
	vec4 g_vWireframeColor;
} ;
uniform sampler2D g_tParticleSheetTexture;
layout(std140) uniform SpritecardSheetData_t {
	vec4 g_vSheetDataIndex;
} ;
layout(std140) uniform SpritecardNormalSheetData_t {
	vec4 g_vNormalSheetDataIndex;
} ;
layout(std140) uniform SpritecardMotionVectorsSheetData_t {
	vec4 g_vMotionVectorsSheetDataIndex;
} ;
layout(std140) uniform SpritecardVertexControls_t {
	vec4 g_vecRadiusControls;
	vec4 g_vecExtraData;
	vec4 g_vecSequenceAddressingControls;
	vec4 g_vecDepthControlAndRotationCenterData;
	vec4 g_vecOrientationFadeControlData;
	vec4 g_vecTexelSizeControls;
	vec4 g_vecFinalUVOffsetAndScale;
	vec4 g_vecExtraData2;
} ;
uniform sampler2D g_tInputTexture;
layout(std140) uniform FilterTaps_t {
	vec4 g_vFilterControl;
	vec4 g_vTextureBounds;
	layout(row_major) mat4 g_matOutputTransform;
	vec4 g_vFilterTaps[32];
} ;
uniform sampler2D g_tClouds;
uniform sampler2DShadow g_tShadowDepthTexture;
layout(location=0) in vec4 PS_INPUT_gl_m_vTexCoords;
layout(location=1) in vec4 PS_INPUT_gl_m_vTintColor;
layout(location=2) in vec4 PS_INPUT_gl_vPositionWs_flLinearDepth;
layout(location=3) in vec3 PS_INPUT_gl_vNormalWs;
layout(location=4) in vec4 PS_INPUT_gl_m_vAnimationBlendValues;
layout(location=0) out vec4 PS_OUTPUT_gl_m_vColor;
const vec3 C_kfumqy1 = vec3(0.2125, 0.7154, 0.0721);
const float C_0d0 = 0.0;
const float C_1d0 = 1.0;
const vec3 C_vec3p0d0p = vec3(0.0);
const vec3 C_vec3p1d0p = vec3(1.0);
void main()
{
	vec4 vecSourceTexel = texture(g_tBaseTexture, PS_INPUT_gl_m_vTexCoords.xy);
	vec4 vecSourceTexel1 = texture(g_tBaseTexture, PS_INPUT_gl_m_vTexCoords.zw);
	vec4 vRet = mix(vecSourceTexel, vecSourceTexel1, PS_INPUT_gl_m_vAnimationBlendValues.x);
	vec3 H_flafr61 = PS_INPUT_gl_m_vTintColor.xyz * vRet.xyz;
	float flLuminance = dot(H_flafr61, C_kfumqy1);
	vec3 H_t1lelu1 = vec3(flLuminance);
	vec3 vecSourceTexel2 = mix(H_flafr61, H_t1lelu1, g_flDesatAmount);
	vec4 H_498olf1 = vRet;
	H_498olf1.xyz = vecSourceTexel2.xyz;
	vec4 vecSourceTexel3 = H_498olf1 * g_vColorTransformScale;
	float H_1uvnoe1 = g_flColorTransformAlphaBias + vecSourceTexel3.w;
	float misc3a = clamp(H_1uvnoe1, C_0d0, C_1d0);
	float H_9v8ms6 = PS_INPUT_gl_m_vTintColor.w * misc3a;
	vec3 H_tfomrc = vec3(H_9v8ms6);
	vec3 misc3a1 = clamp(vecSourceTexel3.xyz, C_vec3p0d0p, C_vec3p1d0p);
	vec3 H_wexr2b = H_tfomrc * misc3a1;
	float H_4rx1xx1 = H_9v8ms6 * g_vecBlendControl.w;
	vec4 H_3e9lms = vec4(H_wexr2b.x, H_wexr2b.y, H_wexr2b.z, H_4rx1xx1);
	PS_OUTPUT_gl_m_vColor = H_3e9lms;
}

