[require]
GLSL >= 3.30
GL_ARB_separate_shader_objects
SSO ENABLED

[fragment shader]
#version 330 core
// LunarGOO output
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
layout(std140, binding = 2 ) uniform PerViewConstantBuffer_t {
	layout(row_major) mat4 g_matWorldToProjection;
	layout(row_major) mat4 g_matProjectionToWorld;
	layout(row_major) mat4 g_matWorldToView;
	layout(row_major) mat4 g_matViewToProjection;
	vec4 g_vInvProjRow3;
	vec4 g_vClipPlane0;
	float g_flToneMapScalarLinear;
	float g_flLightMapScalar;
	float g_flEnvMapScalar;
	float g_flToneMapScalarGamma;
	vec3 g_vCameraPositionWs;
	float g_flViewportMinZ;
	vec3 g_vCameraDirWs;
	float g_flViewportMaxZ;
	vec3 g_vCameraUpDirWs;
	float g_flTime;
	vec3 g_vDepthPsToVsConversion;
	float g_flNearPlane;
	float g_flFarPlane;
	float g_flLightBinnerFarPlane;
	vec2 g_vInvViewportSize;
	vec2 g_vViewportToGBufferRatio;
	vec2 g_vMorphTextureAtlasSize;
	vec4 g_vInvGBufferSize;
	vec2 g_vViewportOffset;
	vec2 g_vViewportSize;
	vec2 g_vRenderTargetSize;
	float g_flFogBlendToBackground;
	float g_flHenyeyGreensteinCoeff;
	vec3 g_vFogColor;
	float g_flNegFogStartOverFogRange;
	float g_flInvFogRange;
	float g_flFogMaxDensity;
	float g_flFogExponent;
	float g_flMod2xIdentity;
	vec2 g_bRoughnessParams;
	float g_bStereoEnabled;
	float g_flStereoCameraIndex;
	vec3 g_vMiddleEyePositionWs;
	float g_flPad2;
	layout(row_major) mat4 g_matWorldToProjectionMultiview[2];
	vec4 g_vCameraPositionWsMultiview[2];
	vec4 g_vFrameBufferCopyInvSizeAndUvScale;
	vec4 g_vCameraAngles;
	vec4 g_vWorldToCameraOffset;
	vec4 g_vWorldToCameraOffsetMultiview[2];
	vec4 g_vPerViewConstantExtraData0;
	vec4 g_vPerViewConstantExtraData1;
	vec4 g_vPerViewConstantExtraData2;
	vec4 g_vPerViewConstantExtraData3;
} ;
layout(std140, binding = 1 ) uniform DotaGlobalParams_t {
	vec3 g_vGlobalLightDir;
	vec3 g_vGlobalLightColor;
	float g_flGlobalLightSpecularScale;
	vec3 g_vGlobalLightSpecularDir;
	float g_flGlobalLightSpecularExp;
	vec3 g_vGlobalLightSpecularColor;
	float g_flGlobalLightSpecularIndependence;
	vec3 g_vGlobalLightAmbientDir;
	float g_flGlobalLightAmbientScale1;
	vec3 g_vGlobalLightAmbientColor1;
	float g_flGlobalLightAmbientScale2;
	vec3 g_vGlobalLightAmbientColor2;
	float g_flGlobalLightAmbientScale2Hero;
	vec2 g_vGlobalCloud1Offset;
	vec2 g_vGlobalCloud2Offset;
	vec3 g_vFowColor;
	float g_flGlobalCloudScale;
	float g_flFowDarkness;
	float g_flFowGrayFactor;
	float g_flFowColorFactor;
	float g_flFowGrayHilights;
	vec4 g_vFowWorldSize;
	vec4 g_vFowTexOffsets;
	layout(row_major) mat4 g_matShadowWorldToTexture;
	vec4 g_vInvShadowDepthTextureSize;
	vec3 g_vGlobalLightAmbientColor3;
	float g_flGlobalLightAmbientShadowAmount;
} ;
layout( binding = 2 ) uniform sampler2DShadow g_tShadowDepthTexture;
layout(std140, binding = 0 ) uniform _Globals_ {
	float g_flBumpStrength;
	vec3 g_vColorTint;
	vec3 g_vColorTint2;
	float g_flOpacityScale;
	float g_flCubeMapScalarExterior;
	float g_flCubeMapScalarInterior;
	vec2 g_vTexCoordScale;
	float g_flSpecularIntensity;
	float g_flFresnelReflectance;
	float g_flFresnelExponent;
	float g_flBloom;
} ;
layout( binding = 0 ) uniform sampler2D g_tColor;
layout( binding = 1 ) uniform sampler2D g_tNormal;
layout( binding = 3 ) uniform samplerCube g_tCubeMapExterior;
layout( binding = 4 ) uniform sampler2D g_tFow;
uniform sampler2D g_tFrameBufferCopyTexture;
uniform sampler2D g_tDepthTexture;
uniform sampler2D g_tGBufferAlbedo;
uniform sampler2D g_tGBufferLightingTerms;
uniform sampler2D g_tGBufferDepth;
uniform sampler2D g_tGBufferNormalWs;
layout(std140) uniform PerViewLightingConstantBuffer_t {
	vec4 g_vInvLightTextureDims;
	vec4 g_vLightBinCounts;
	vec2 g_vLowResDeferredLightingTextureDim;
	vec2 g_vLowResDeferredLightingTextureInvDim;
	vec3 g_vToolsAmbientLighting;
	float g_flSSAOEnabled;
	vec3 g_vIrradAtlasInvSize;
	float g_flIrradGlobalLightingFactor;
	vec4 g_vGlobalLightingSHRed;
	vec4 g_vGlobalLightingSHGreen;
	vec4 g_vGlobalLightingSHBlue;
	vec3 g_vRayleighScatteringCoeff;
	float g_flMieScatteringEccentricity;
	vec3 g_vMieScatteringCoeff;
	float g_flMieForwardScatteringRatio;
	vec3 g_vSpecularCubeMapScale;
	float g_flDefaultEnvMapIndex;
	vec4 g_vLightCookieSheetSequenceAndSizes;
	vec3 g_vLpvBoxMinCascade0;
	float g_flLpvBrightnessScale;
	vec3 g_vLpvInvBoxDimCascade0;
	vec2 g_vLpvInvCoeffTextureDim;
} ;
layout(std140) uniform PerLayerConstantBuffer_t {
	vec4 g_vWireframeColor;
} ;
uniform sampler2D g_tClouds;
uniform samplerCube g_tCubeMapInterior;
layout(location=0) in vec2 PS_INPUT_gl_vBaseTexCoord;
layout(location=1) in vec4 PS_INPUT_gl_vPositionWs_flLinearDepth;
layout(location=2) in vec3 PS_INPUT_gl_vNormalWs;
layout(location=3) in vec4 PS_INPUT_gl_vVertexColor;
layout(location=4) in vec4 PS_INPUT_gl_vTangentUWs_flTangentVSign;
layout(location=0) out vec4 PS_OUTPUT_gl_vDiffuse;
layout(location=1) out vec4 PS_OUTPUT_gl_vAlbedo;
layout(location=2) out vec4 PS_OUTPUT_gl_vSpecular;
const vec2 C_vec2p2d0p = vec2(2.0);
const vec2 C_vec2pa1d0p = vec2(-1.0);
const float C_1d0 = 1.0;
const float C_0d0 = 0.0;
const vec3 C_vec3p0d0p = vec3(0.0);
const vec4 C_wt9i7t = vec4(0.0749064);
const vec2 C_a1z03r = vec2(0.0, 0.0);
const vec4 C_a1xzaw1 = vec4(0.123596);
const float C_0d205993 = 0.205993;
const float C_1d85 = 1.85;
const float C_0d45 = 0.45;
const float C_2d1 = 2.1;
const float C_0d5 = 0.5;
const vec3 C_kfumqy1 = vec3(0.2125, 0.7154, 0.0721);
const vec4 C_d5y0kt1 = vec4(0.0, 1.0, 0.0, 0.0);
void main()
{
	vec3 vGeometricNormalWs = normalize(PS_INPUT_gl_vNormalWs);
	vec4 vAlbedo = texture(g_tColor, PS_INPUT_gl_vBaseTexCoord);
	vec3 H_jqml65 = g_vColorTint * vAlbedo.xyz;
	vec3 H_36u4ia = H_jqml65 * g_vColorTint;
	vec3 H_bsagln1 = H_36u4ia * PS_INPUT_gl_vVertexColor.xyz;
	float flTranslucency = g_flOpacityScale * vAlbedo.w;
	vec3 H_4vbzv6 = vec3(flTranslucency);
	vec3 vTangentUWs = normalize(PS_INPUT_gl_vTangentUWs_flTangentVSign.xyz);
	vec3 vTangentVWs = cross(vGeometricNormalWs, PS_INPUT_gl_vTangentUWs_flTangentVSign.xyz);
	vec3 vTangentVWs1 = normalize(vTangentVWs);
	vec3 vTangentVWs2 = PS_INPUT_gl_vTangentUWs_flTangentVSign.www * vTangentVWs1;
	vec4 vNormalTexel = texture(g_tNormal, PS_INPUT_gl_vBaseTexCoord);
	vec2 H_qgi6bb = vNormalTexel.wy * C_vec2p2d0p;
	vec2 H_mblhlu1 = H_qgi6bb + C_vec2pa1d0p;
	float vNormalTs = dot(H_mblhlu1, H_mblhlu1);
	float param = C_1d0 - vNormalTs;
	float misc3a = clamp(param, C_0d0, C_1d0);
	float vNormalTs1 = sqrt(misc3a);
	float H_vj1l3j = C_0d0 - H_mblhlu1.y;
	vec2 H_x1he8s = vec2(g_flBumpStrength);
	vec2 H_5p8e11 = vec2(H_mblhlu1.x, H_vj1l3j);
	vec2 H_q35u7b1 = H_5p8e11 * H_x1he8s;
	vec3 H_38ejs41 = vec3(H_q35u7b1.x, H_q35u7b1.y, vNormalTs1);
	vec3 vNormalTs2 = normalize(H_38ejs41);
	vec3 vVectorWs = vNormalTs2.xxx * vTangentUWs;
	vec3 H_35021c1 = vNormalTs2.yyy * vTangentVWs2;
	vec3 vVectorWs1 = H_35021c1 + vVectorWs;
	vec3 H_9wf1l91 = vGeometricNormalWs * vNormalTs2.zzz;
	vec3 vVectorWs2 = H_9wf1l91 + vVectorWs1;
	vec3 H_qw6t8a1 = normalize(vVectorWs2);
	vec3 H_j03jbn = C_vec3p0d0p - g_vGlobalLightDir;
	float flNDotL = dot(H_j03jbn, H_qw6t8a1);
	float misc3a1 = clamp(flNDotL, C_0d0, C_1d0);
	float product = PS_INPUT_gl_vPositionWs_flLinearDepth.x * g_matShadowWorldToTexture[0].x;
	float product1 = PS_INPUT_gl_vPositionWs_flLinearDepth.y * g_matShadowWorldToTexture[1].x;
	float dotProduct = product + product1;
	float product2 = PS_INPUT_gl_vPositionWs_flLinearDepth.z * g_matShadowWorldToTexture[2].x;
	float dotProduct1 = dotProduct + product2;
	float dotProduct2 = dotProduct1 + g_matShadowWorldToTexture[3].x;
	float product3 = PS_INPUT_gl_vPositionWs_flLinearDepth.x * g_matShadowWorldToTexture[0].y;
	float product4 = PS_INPUT_gl_vPositionWs_flLinearDepth.y * g_matShadowWorldToTexture[1].y;
	float dotProduct3 = product3 + product4;
	float product5 = PS_INPUT_gl_vPositionWs_flLinearDepth.z * g_matShadowWorldToTexture[2].y;
	float dotProduct4 = dotProduct3 + product5;
	float dotProduct5 = dotProduct4 + g_matShadowWorldToTexture[3].y;
	float product6 = PS_INPUT_gl_vPositionWs_flLinearDepth.x * g_matShadowWorldToTexture[0].z;
	float product7 = PS_INPUT_gl_vPositionWs_flLinearDepth.y * g_matShadowWorldToTexture[1].z;
	float dotProduct6 = product6 + product7;
	float product8 = PS_INPUT_gl_vPositionWs_flLinearDepth.z * g_matShadowWorldToTexture[2].z;
	float dotProduct7 = dotProduct6 + product8;
	float dotProduct8 = dotProduct7 + g_matShadowWorldToTexture[3].z;
	float product9 = PS_INPUT_gl_vPositionWs_flLinearDepth.x * g_matShadowWorldToTexture[0].w;
	float producta = PS_INPUT_gl_vPositionWs_flLinearDepth.y * g_matShadowWorldToTexture[1].w;
	float dotProduct9 = product9 + producta;
	float productb = PS_INPUT_gl_vPositionWs_flLinearDepth.z * g_matShadowWorldToTexture[2].w;
	float dotProducta = dotProduct9 + productb;
	float dotProductb = dotProducta + g_matShadowWorldToTexture[3].w;
	vec3 H_16wbh81 = vec3(dotProductb);
	vec3 H_mo5dbs1 = vec3(dotProduct2, dotProduct5, dotProduct8);
	vec3 H_qdsg5k1 = H_mo5dbs1 / H_16wbh81;
	float param1 = C_0d0 - H_qdsg5k1.z;
	float misc3a2 = clamp(param1, C_0d0, C_1d0);
	float H_60ojyb = C_0d0 - g_vInvShadowDepthTextureSize.x;
	vec2 H_t5te6f = vec2(H_60ojyb);
	vec2 H_ep5c3j1 = H_qdsg5k1.xy + g_vInvShadowDepthTextureSize.xx;
	vec3 H_8dksvs = vec3(H_ep5c3j1.x, H_ep5c3j1.y, misc3a2);
	float H_chn5ep1 = textureLod(g_tShadowDepthTexture, H_8dksvs, C_0d0);
	vec2 H_pv0in9 = vec2(H_60ojyb, g_vInvShadowDepthTextureSize.x);
	vec2 H_he48ts = H_pv0in9 + H_qdsg5k1.xy;
	vec3 H_otyegk = vec3(H_he48ts.x, H_he48ts.y, misc3a2);
	float H_u08pk7 = textureLod(g_tShadowDepthTexture, H_otyegk, C_0d0);
	vec2 H_t32u4i1 = vec2(g_vInvShadowDepthTextureSize.x, H_60ojyb);
	vec2 H_3zubtq = H_qdsg5k1.xy + H_t32u4i1;
	vec3 H_w4ff2h1 = vec3(H_3zubtq.x, H_3zubtq.y, misc3a2);
	float H_xkjzlj1 = textureLod(g_tShadowDepthTexture, H_w4ff2h1, C_0d0);
	vec2 H_r37y1w = H_qdsg5k1.xy + H_t5te6f;
	vec3 H_8eio7d1 = vec3(H_r37y1w.x, H_r37y1w.y, misc3a2);
	float H_efz1ea1 = textureLod(g_tShadowDepthTexture, H_8eio7d1, C_0d0);
	vec4 H_u6ap2o = vec4(H_chn5ep1, H_u08pk7, H_xkjzlj1, H_efz1ea1);
	float flSum = dot(H_u6ap2o, C_wt9i7t);
	vec2 H_e9rh661 = vec2(g_vInvShadowDepthTextureSize.x, C_0d0);
	vec2 H_85dk7x = H_e9rh661 + H_qdsg5k1.xy;
	vec3 H_053dbf1 = vec3(H_85dk7x.x, H_85dk7x.y, misc3a2);
	float H_mabyh11 = textureLod(g_tShadowDepthTexture, H_053dbf1, C_0d0);
	vec2 H_na4vhz = vec2(H_60ojyb, C_0d0);
	vec2 H_iybrli = H_na4vhz + H_qdsg5k1.xy;
	vec3 H_4grr8t1 = vec3(H_iybrli.x, H_iybrli.y, misc3a2);
	float H_t8dmln1 = textureLod(g_tShadowDepthTexture, H_4grr8t1, C_0d0);
	vec2 H_23b4ob1 = C_a1z03r;
	H_23b4ob1.y = H_60ojyb;
	vec2 H_wcm3cs = H_23b4ob1 + H_qdsg5k1.xy;
	vec3 H_oyv10x = vec3(H_wcm3cs.x, H_wcm3cs.y, misc3a2);
	float H_8gpeo9 = textureLod(g_tShadowDepthTexture, H_oyv10x, C_0d0);
	vec2 H_23b4ob1r = C_a1z03r;
	H_23b4ob1r.y = g_vInvShadowDepthTextureSize.x;
	vec2 H_omz8p81 = H_23b4ob1r + H_qdsg5k1.xy;
	vec3 H_o6we2h1 = vec3(H_omz8p81.x, H_omz8p81.y, misc3a2);
	float H_fbktf11 = textureLod(g_tShadowDepthTexture, H_o6we2h1, C_0d0);
	vec4 H_0xzzl01 = vec4(H_mabyh11, H_t8dmln1, H_8gpeo9, H_fbktf11);
	float flSum1 = dot(H_0xzzl01, C_a1xzaw1);
	float flSum2 = flSum + flSum1;
	vec3 H_i59xs01 = vec3(H_qdsg5k1.x, H_qdsg5k1.y, misc3a2);
	float flSum3 = textureLod(g_tShadowDepthTexture, H_i59xs01, C_0d0);
	float H_xchcee1 = flSum3 * C_0d205993;
	float flSum4 = H_xchcee1 + flSum2;
	float flDirectionalAmbientShadow = mix(C_1d0, flSum4, g_flGlobalLightAmbientShadowAmount);
	float flDirectOcclusionFactor = pow(C_1d0, C_1d85);
	float flDirectOcclusionFactor1 = mix(C_0d45, C_1d0, flDirectOcclusionFactor);
	float flIndirectOcclusionFactor = pow(C_1d0, C_2d1);
	vec3 H_fx1uua = vec3(g_flGlobalLightAmbientScale1);
	vec3 vDirectionalAmbientColor = H_fx1uua * g_vGlobalLightAmbientColor1;
	float H_jjpf4g1 = H_qw6t8a1.z * C_0d5;
	float H_ahpdwy = C_0d5 + H_jjpf4g1;
	vec3 vShadowAmbientColor = mix(g_vGlobalLightAmbientColor3, g_vGlobalLightAmbientColor2, H_ahpdwy);
	vec3 H_s7noda1 = vec3(g_flGlobalLightAmbientScale2);
	vec3 vShadowAmbientColor1 = H_s7noda1 * vShadowAmbientColor;
	float flLuminance = dot(vDirectionalAmbientColor, C_kfumqy1);
	vec3 H_t1lelu1 = vec3(flLuminance);
	float flLuminance1 = dot(vShadowAmbientColor1, C_kfumqy1);
	vec3 H_chpant1 = vec3(flLuminance1);
	vec3 vDirectionalAmbientColor1 = mix(vDirectionalAmbientColor, H_t1lelu1, C_vec3p0d0p);
	vec3 vShadowAmbientColor2 = mix(vShadowAmbientColor1, H_chpant1, C_vec3p0d0p);
	float H_31qz09 = flSum4 * misc3a1;
	float H_gau7fy1 = H_31qz09 * flDirectOcclusionFactor1;
	vec3 H_gdbd4a = vec3(H_gau7fy1);
	vec3 vDirectLight = H_gdbd4a * g_vGlobalLightColor;
	float vDirectionalAmbientLight = dot(g_vGlobalLightAmbientDir, H_qw6t8a1);
	float misc3a3 = clamp(vDirectionalAmbientLight, C_0d0, C_1d0);
	float H_kiixpe = flDirectionalAmbientShadow * misc3a3;
	float H_ep5njm1 = H_kiixpe * flIndirectOcclusionFactor;
	vec3 H_2g2z83 = vec3(H_ep5njm1);
	vec3 vDirectionalAmbientLight1 = H_2g2z83 * vDirectionalAmbientColor1;
	float H_6yfb121 = C_1d0 - H_31qz09;
	float H_dvqxom1 = H_6yfb121 * flIndirectOcclusionFactor;
	vec3 H_e5bd49 = vec3(H_dvqxom1);
	vec3 vShadowAmbientLight = H_e5bd49 * vShadowAmbientColor2;
	vec3 H_8w78gv1 = vDirectLight + vDirectionalAmbientLight1;
	vec3 vLighting = H_8w78gv1 + vShadowAmbientLight;
	vec3 vDiffuse = H_bsagln1 * vLighting;
	vec3 H_8mjky01 = PS_INPUT_gl_vPositionWs_flLinearDepth.xyz - g_vCameraPositionWs;
	vec3 H_i1nbjv1 = normalize(H_8mjky01);
	vec3 H_t3ywhi1 = C_vec3p0d0p - H_i1nbjv1;
	vec3 vReflect = reflect(H_t3ywhi1, H_qw6t8a1);
	float flSpecular = dot(g_vGlobalLightSpecularDir, vReflect);
	float misc3a4 = clamp(flSpecular, C_0d0, C_1d0);
	float flSpecular1 = pow(misc3a4, g_flGlobalLightSpecularExp);
	float flSpecular2 = flSpecular1 * g_flSpecularIntensity;
	float flSpecular3 = PS_INPUT_gl_vVertexColor.w * flSpecular2;
	vec3 H_tp9b8o = vec3(flSpecular3);
	vec3 vSpecularRGB = H_tp9b8o * g_vGlobalLightSpecularColor;
	vec3 H_yisnc8 = C_vec3p0d0p - vReflect;
	vec4 vCubeMap = texture(g_tCubeMapExterior, H_yisnc8);
	vec3 H_8ac9pt1 = vec3(g_flCubeMapScalarExterior);
	vec3 vCubeMap1 = H_8ac9pt1 * vCubeMap.xyz;
	vec3 H_e3gb6g = PS_INPUT_gl_vVertexColor.www * vCubeMap1;
	vec3 vSpecularRGB1 = H_e3gb6g + vSpecularRGB;
	float flVDotNk = dot(H_t3ywhi1, H_qw6t8a1);
	float misc3a5 = clamp(flVDotNk, C_0d0, C_1d0);
	float H_amazx2 = C_1d0 - misc3a5;
	float flVDotNk1 = abs(H_amazx2);
	float flVDotNk2 = pow(flVDotNk1, g_flFresnelExponent);
	float H_0fby2a1 = C_1d0 - g_flFresnelReflectance;
	float H_lplz5w1 = H_0fby2a1 * flVDotNk2;
	float H_vlq1ik1 = H_lplz5w1 + g_flFresnelReflectance;
	vec3 H_dyq7zc1 = vec3(H_vlq1ik1);
	vec3 vSpecularRGB2 = H_dyq7zc1 * vSpecularRGB1;
	vec3 vDiffuse1 = vDiffuse + vSpecularRGB2;
	vec2 H_n3d8b6 = PS_INPUT_gl_vPositionWs_flLinearDepth.xy * g_vFowWorldSize.zw;
	vec2 H_wmk3nj = H_n3d8b6 + g_vFowWorldSize.xy;
	vec4 flFowResult = texture(g_tFow, H_wmk3nj);
	vec3 H_jgw9ib = H_4vbzv6 * vDiffuse1;
	vec4 H_nqm6561 = vec4(H_jgw9ib.x, H_jgw9ib.y, H_jgw9ib.z, flTranslucency);
	vec4 H_rm1rhn = vec4(H_bsagln1.x, H_bsagln1.y, H_bsagln1.z, flTranslucency);
	float flLuminance2 = dot(vSpecularRGB2, C_kfumqy1);
	float H_i2aa5s = flLuminance2 * g_flBloom;
	float H_y0oq9l = H_i2aa5s * flFowResult.x;
	vec4 H_h8msa21 = C_d5y0kt1;
	H_h8msa21.zw = vec2(H_y0oq9l, C_0d0);
	PS_OUTPUT_gl_vDiffuse = H_nqm6561;
	PS_OUTPUT_gl_vAlbedo = H_rm1rhn;
	PS_OUTPUT_gl_vSpecular = H_h8msa21;
}

