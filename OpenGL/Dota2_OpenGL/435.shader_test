[require]
GLSL >= 3.30
GL_ARB_separate_shader_objects
SSO ENABLED

[fragment shader]
#version 330 core
// LunarGOO output
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_ARB_texture_cube_map_array : enable
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_viewport_array : enable
layout(std140, binding = 1 ) uniform PerViewConstantBuffer_t {
	layout(row_major) mat4 g_matWorldToProjection;
	layout(row_major) mat4 g_matProjectionToWorld;
	layout(row_major) mat4 g_matWorldToView;
	layout(row_major) mat4 g_matViewToProjection;
	vec4 g_vInvProjRow3;
	vec4 g_vClipPlane0;
	float g_flToneMapScalarLinear;
	float g_flLightMapScalar;
	float g_flEnvMapScalar;
	float g_flToneMapScalarGamma;
	vec3 g_vCameraPositionWs;
	float g_flViewportMinZ;
	vec3 g_vCameraDirWs;
	float g_flViewportMaxZ;
	vec3 g_vCameraUpDirWs;
	float g_flTime;
	vec3 g_vDepthPsToVsConversion;
	float g_flNearPlane;
	float g_flFarPlane;
	float g_flLightBinnerFarPlane;
	vec2 g_vInvViewportSize;
	vec2 g_vViewportToGBufferRatio;
	vec2 g_vMorphTextureAtlasSize;
	vec4 g_vInvGBufferSize;
	vec2 g_vViewportOffset;
	vec2 g_vViewportSize;
	vec2 g_vRenderTargetSize;
	float g_flFogBlendToBackground;
	float g_flHenyeyGreensteinCoeff;
	vec3 g_vFogColor;
	float g_flNegFogStartOverFogRange;
	float g_flInvFogRange;
	float g_flFogMaxDensity;
	float g_flFogExponent;
	float g_flMod2xIdentity;
	vec2 g_bRoughnessParams;
	float g_bStereoEnabled;
	float g_flStereoCameraIndex;
	vec3 g_vMiddleEyePositionWs;
	float g_flPad2;
	layout(row_major) mat4 g_matWorldToProjectionMultiview[2];
	vec4 g_vCameraPositionWsMultiview[2];
	vec4 g_vFrameBufferCopyInvSizeAndUvScale;
	vec4 g_vCameraAngles;
	vec4 g_vWorldToCameraOffset;
	vec4 g_vWorldToCameraOffsetMultiview[2];
	vec4 g_vPerViewConstantExtraData0;
	vec4 g_vPerViewConstantExtraData1;
	vec4 g_vPerViewConstantExtraData2;
	vec4 g_vPerViewConstantExtraData3;
} ;
layout( binding = 0 ) uniform sampler2D g_tGrassQuadArray;
layout( binding = 2 ) uniform sampler2D g_tGrassQuadSpecularArray;
layout(std140, binding = 0 ) uniform DotaGlobalParams_t {
	vec3 g_vGlobalLightDir;
	vec3 g_vGlobalLightColor;
	float g_flGlobalLightSpecularScale;
	vec3 g_vGlobalLightSpecularDir;
	float g_flGlobalLightSpecularExp;
	vec3 g_vGlobalLightSpecularColor;
	float g_flGlobalLightSpecularIndependence;
	vec3 g_vGlobalLightAmbientDir;
	float g_flGlobalLightAmbientScale1;
	vec3 g_vGlobalLightAmbientColor1;
	float g_flGlobalLightAmbientScale2;
	vec3 g_vGlobalLightAmbientColor2;
	float g_flGlobalLightAmbientScale2Hero;
	vec2 g_vGlobalCloud1Offset;
	vec2 g_vGlobalCloud2Offset;
	vec3 g_vFowColor;
	float g_flGlobalCloudScale;
	float g_flFowDarkness;
	float g_flFowGrayFactor;
	float g_flFowColorFactor;
	float g_flFowGrayHilights;
	vec4 g_vFowWorldSize;
	vec4 g_vFowTexOffsets;
	layout(row_major) mat4 g_matShadowWorldToTexture;
	vec4 g_vInvShadowDepthTextureSize;
	vec3 g_vGlobalLightAmbientColor3;
	float g_flGlobalLightAmbientShadowAmount;
} ;
layout( binding = 1 ) uniform sampler2DShadow g_tShadowDepthTexture;
layout( binding = 4 ) uniform sampler2D g_tFow;
layout( binding = 3 ) uniform sampler2D g_tBloomBuffer;
layout(std140) uniform _Globals_ {
	float g_flBumpStrength;
	float g_flAlphaTestThreshold;
	vec4 g_vWindStrengthFreqMulHighStrength;
	vec3 g_vWindOffset;
	vec3 g_vWindDir;
	vec3 g_vCameraPosFs;
} ;
uniform sampler2D g_tFrameBufferCopyTexture;
uniform sampler2D g_tDepthTexture;
uniform sampler2D g_tGBufferAlbedo;
uniform sampler2D g_tGBufferLightingTerms;
uniform sampler2D g_tGBufferDepth;
uniform sampler2D g_tGBufferNormalWs;
layout(std140) uniform PerViewLightingConstantBuffer_t {
	vec4 g_vInvLightTextureDims;
	vec4 g_vLightBinCounts;
	vec2 g_vLowResDeferredLightingTextureDim;
	vec2 g_vLowResDeferredLightingTextureInvDim;
	vec3 g_vToolsAmbientLighting;
	float g_flSSAOEnabled;
	vec3 g_vIrradAtlasInvSize;
	float g_flIrradGlobalLightingFactor;
	vec4 g_vGlobalLightingSHRed;
	vec4 g_vGlobalLightingSHGreen;
	vec4 g_vGlobalLightingSHBlue;
	vec3 g_vRayleighScatteringCoeff;
	float g_flMieScatteringEccentricity;
	vec3 g_vMieScatteringCoeff;
	float g_flMieForwardScatteringRatio;
	vec3 g_vSpecularCubeMapScale;
	float g_flDefaultEnvMapIndex;
	vec4 g_vLightCookieSheetSequenceAndSizes;
	vec3 g_vLpvBoxMinCascade0;
	float g_flLpvBrightnessScale;
	vec3 g_vLpvInvBoxDimCascade0;
	vec2 g_vLpvInvCoeffTextureDim;
} ;
layout(std140) uniform PerLayerConstantBuffer_t {
	vec4 g_vWireframeColor;
} ;
uniform sampler2D g_tClouds;
layout(std140) uniform DotaHeightFogParams_t {
	vec4 g_vHeightFogColor_HeightBias;
	vec4 g_vHeightFogRangeParams;
	vec4 g_vHeightFogDensityParams;
	vec3 g_vFogTexCoordTransform0U;
	vec3 g_vFogTexCoordTransform0V;
	vec3 g_vFogTexCoordTransform1U;
	vec3 g_vFogTexCoordTransform1V;
	vec3 g_vFogTexCoordTransformTotalU;
	vec3 g_vFogTexCoordTransformTotalV;
	vec3 g_vFogLayer1VelocitySpeed;
	vec2 g_vCausticWindSpeedScaleAmplitudeScale;
} ;
uniform sampler2D g_tHeightFogTexture0;
uniform sampler2D g_tHeightFogTexture1;
uniform sampler2D g_tHeightFogTotalOpacity;
uniform sampler2D g_tFlow;
layout(location=0) in vec3 PS_INPUT_gl_vPositionWs;
layout(location=1) in vec3 PS_INPUT_gl_vNormalWs;
layout(location=2) in vec2 PS_INPUT_gl_vTextureCoords;
layout(location=3) in vec3 PS_INPUT_gl_vTint;
layout(location=4) in vec3 PS_INPUT_gl_vBrightnessAlpha;
layout(location=0) out vec4 PS_OUTPUT_gl_vColor;
const float C_0d0 = 0.0;
const float C_0d7 = 0.7;
const vec3 C_vec3p1d0p = vec3(1.0);
const vec3 C_vec3p0d0p = vec3(0.0);
const float C_1d0 = 1.0;
const float C_0d5 = 0.5;
const float C_7d0 = 7.0;
const vec3 C_shpsoq1 = vec3(0.3, 0.59, 0.11);
const float C_0d3 = 0.3;
const vec3 C_ptervi1 = vec3(0.0, 0.0, 0.2);
const vec3 C_imhxe9 = vec3(0.0, 0.0, 1.0);
void main()
{
	vec3 H_s7noda1 = vec3(g_flGlobalLightAmbientScale2);
	vec3 vShadowAmbientColor = H_s7noda1 * g_vGlobalLightAmbientColor2;
	vec4 vAlbedo = texture(g_tGrassQuadArray, PS_INPUT_gl_vTextureCoords);
	float H_swmhnd = PS_INPUT_gl_vBrightnessAlpha.y * vAlbedo.w;
	float flTrampledValue = clamp(PS_INPUT_gl_vBrightnessAlpha.x, C_0d0, C_0d7);
	float flTrampledValue1 = flTrampledValue / C_0d7;
	vec3 vTrampledColorAmount = mix(vShadowAmbientColor, C_vec3p1d0p, flTrampledValue1);
	vec3 H_nt7uxe = PS_INPUT_gl_vTint * vAlbedo.xyz;
	vec3 H_jmxc79 = H_nt7uxe * vTrampledColorAmount;
	vec3 H_m8dygk = H_jmxc79 * PS_INPUT_gl_vBrightnessAlpha.xxx;
	vec3 vNormalWs = normalize(PS_INPUT_gl_vNormalWs);
	vec3 vLighting_flShadow = normalize(vNormalWs);
	vec3 H_j03jbn = C_vec3p0d0p - g_vGlobalLightDir;
	float flNDotL = dot(H_j03jbn, vLighting_flShadow);
	float misc3a = clamp(flNDotL, C_0d0, C_1d0);
	float product = PS_INPUT_gl_vPositionWs.x * g_matShadowWorldToTexture[0].x;
	float product1 = PS_INPUT_gl_vPositionWs.y * g_matShadowWorldToTexture[1].x;
	float dotProduct = product + product1;
	float product2 = PS_INPUT_gl_vPositionWs.z * g_matShadowWorldToTexture[2].x;
	float dotProduct1 = dotProduct + product2;
	float dotProduct2 = dotProduct1 + g_matShadowWorldToTexture[3].x;
	float product3 = PS_INPUT_gl_vPositionWs.x * g_matShadowWorldToTexture[0].y;
	float product4 = PS_INPUT_gl_vPositionWs.y * g_matShadowWorldToTexture[1].y;
	float dotProduct3 = product3 + product4;
	float product5 = PS_INPUT_gl_vPositionWs.z * g_matShadowWorldToTexture[2].y;
	float dotProduct4 = dotProduct3 + product5;
	float dotProduct5 = dotProduct4 + g_matShadowWorldToTexture[3].y;
	float product6 = PS_INPUT_gl_vPositionWs.x * g_matShadowWorldToTexture[0].z;
	float product7 = PS_INPUT_gl_vPositionWs.y * g_matShadowWorldToTexture[1].z;
	float dotProduct6 = product6 + product7;
	float product8 = PS_INPUT_gl_vPositionWs.z * g_matShadowWorldToTexture[2].z;
	float dotProduct7 = dotProduct6 + product8;
	float dotProduct8 = dotProduct7 + g_matShadowWorldToTexture[3].z;
	float product9 = PS_INPUT_gl_vPositionWs.x * g_matShadowWorldToTexture[0].w;
	float producta = PS_INPUT_gl_vPositionWs.y * g_matShadowWorldToTexture[1].w;
	float dotProduct9 = product9 + producta;
	float productb = PS_INPUT_gl_vPositionWs.z * g_matShadowWorldToTexture[2].w;
	float dotProducta = dotProduct9 + productb;
	float dotProductb = dotProducta + g_matShadowWorldToTexture[3].w;
	vec3 H_16wbh81 = vec3(dotProductb);
	vec3 H_mo5dbs1 = vec3(dotProduct2, dotProduct5, dotProduct8);
	vec3 H_qdsg5k1 = H_mo5dbs1 / H_16wbh81;
	float param = C_0d0 - H_qdsg5k1.z;
	float misc3a1 = clamp(param, C_0d0, C_1d0);
	vec3 H_ls2vnt1 = vec3(H_qdsg5k1.x, H_qdsg5k1.y, misc3a1);
	float txt = textureLod(g_tShadowDepthTexture, H_ls2vnt1, C_0d0);
	float flDirectionalAmbientShadow = mix(C_1d0, txt, g_flGlobalLightAmbientShadowAmount);
	vec3 H_zjeh651 = vec3(flDirectionalAmbientShadow);
	float flShadow = misc3a * txt;
	vec3 H_bmtten = vec3(flShadow);
	float flAmbientNdotL = dot(g_vGlobalLightAmbientDir, vLighting_flShadow);
	float misc3a2 = clamp(flAmbientNdotL, C_0d0, C_1d0);
	float H_78aukw1 = vLighting_flShadow.z * C_0d5;
	float H_q4tuqu1 = C_0d5 + H_78aukw1;
	vec3 vShadowAmbientColor1 = mix(g_vGlobalLightAmbientColor3, g_vGlobalLightAmbientColor2, H_q4tuqu1);
	vec3 vShadowAmbientColor2 = H_s7noda1 * vShadowAmbientColor1;
	vec3 H_w70kwa1 = H_bmtten * g_vGlobalLightColor;
	vec3 H_c5p1i = H_zjeh651 * g_vGlobalLightAmbientColor1;
	float H_3bofxb1 = g_flGlobalLightAmbientScale1 * misc3a2;
	vec3 H_z65r7r = vec3(H_3bofxb1);
	vec3 H_jmnfab = H_c5p1i * H_z65r7r;
	vec3 H_mcmps21 = H_jmnfab + H_w70kwa1;
	float H_lhzc0q = C_1d0 - flShadow;
	vec3 H_6i50er = vec3(H_lhzc0q);
	vec3 H_ismiur1 = H_6i50er * vShadowAmbientColor2;
	vec3 vLighting = H_ismiur1 + H_mcmps21;
	vec4 txt1 = texture(g_tGrassQuadSpecularArray, PS_INPUT_gl_vTextureCoords);
	float H_6o7zsp = txt1.y * C_7d0;
	vec3 H_6tbv721 = PS_INPUT_gl_vPositionWs - g_vCameraPositionWs;
	vec3 H_kkgz3m = normalize(H_6tbv721);
	vec3 H_vpzgi9 = C_vec3p0d0p - H_kkgz3m;
	vec3 vReflect = reflect(H_vpzgi9, vNormalWs);
	float flSpecular = dot(g_vGlobalLightSpecularDir, vReflect);
	float misc3a3 = clamp(flSpecular, C_0d0, C_1d0);
	float flSpecular1 = pow(misc3a3, g_flGlobalLightSpecularExp);
	float flSpecular2 = H_6o7zsp * flSpecular1;
	vec3 H_s6408y = vec3(flSpecular2);
	vec3 vSpecularRGB = H_s6408y * g_vGlobalLightSpecularColor;
	float misc3a4 = clamp(g_flGlobalLightSpecularIndependence, C_0d0, C_1d0);
	vec3 H_lvwgu8 = vec3(misc3a4);
	float H_9bwy73 = C_1d0 - misc3a4;
	vec3 H_liuneg1 = vec3(H_9bwy73);
	vec3 H_t7bcha1 = H_liuneg1 * vSpecularRGB;
	vec3 vDiffuse = H_m8dygk + H_t7bcha1;
	vec3 vDiffuse1 = vDiffuse * vLighting;
	vec3 H_bcfwoi = vec3(g_flGlobalLightSpecularScale);
	vec3 H_8nr7ib1 = H_bcfwoi * vSpecularRGB;
	vec3 H_lme3po = H_8nr7ib1 * H_lvwgu8;
	vec3 H_rsafwo1 = H_bmtten * H_lme3po;
	vec3 vDiffuse2 = H_rsafwo1 + vDiffuse1;
	vec3 vDiffuse3 = mix(vDiffuse2, H_m8dygk, txt1.w);
	vec2 vScreenUv = g_vInvGBufferSize.xy * gl_FragCoord.xy;
	vec4 vDiffuse4 = textureLod(g_tBloomBuffer, vScreenUv, C_0d0);
	vec3 vDiffuse5 = vDiffuse3 + vDiffuse4.xyz;
	vec2 H_gcq7wv = PS_INPUT_gl_vPositionWs.xy * g_vFowWorldSize.zw;
	vec2 H_wyaezd = H_gcq7wv + g_vFowWorldSize.xy;
	vec4 fowResult = texture(g_tFow, H_wyaezd);
	float vGray = dot(vDiffuse5, C_shpsoq1);
	float vGray1 = pow(vGray, g_flFowGrayHilights);
	vec3 H_5rw442 = vec3(vGray1);
	vec3 vGray2 = max(H_5rw442, C_0d5);
	vec3 vGray3 = g_vFowColor * vGray2;
	vec3 H_tnu4ev = vec3(g_flFowColorFactor);
	vec3 H_1v3bfi1 = H_tnu4ev * vDiffuse5;
	vec3 vFullFowColor = H_1v3bfi1 + vGray3;
	vec3 misc3a5 = mix(vFullFowColor, vDiffuse5, fowResult.x);
	bool H_dq1u5b1 = fowResult.z < C_0d3;
	vec3 H_mr4q8z = misc3a5 + C_ptervi1;
	vec3 H_rck6vy1 = fowResult.zzz * misc3a5;
	vec3 H_qh28wi1 = H_rck6vy1 * C_imhxe9;
	vec3 H_ybp4w51 = H_mr4q8z + H_qh28wi1;
	vec3 select = H_dq1u5b1 ? misc3a5 : H_ybp4w51;
	float flDist = distance(PS_INPUT_gl_vPositionWs, g_vCameraPositionWs);
	float H_j6vk5z = flDist * g_flInvFogRange;
	float param1 = H_j6vk5z + g_flNegFogStartOverFogRange;
	float misc3a6 = clamp(param1, C_0d0, C_1d0);
	float flFog = pow(misc3a6, g_flFogExponent);
	float misc2a = min(g_flFogMaxDensity, flFog);
	float misc3a7 = clamp(misc2a, C_0d0, C_1d0);
	vec3 misc3a8 = mix(select, g_vFogColor, misc3a7);
	vec4 H_po63xv = vec4(misc3a8.x, misc3a8.y, misc3a8.z, H_swmhnd);
	PS_OUTPUT_gl_vColor = H_po63xv;
}

