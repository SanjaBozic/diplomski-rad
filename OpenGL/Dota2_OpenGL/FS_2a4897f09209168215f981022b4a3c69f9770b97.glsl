#version 330 core
// LunarGOO output
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
layout(std140, binding = 1 ) uniform PerViewConstantBuffer_t {
	layout(row_major) mat4 g_matWorldToProjection;
	layout(row_major) mat4 g_matProjectionToWorld;
	layout(row_major) mat4 g_matWorldToView;
	layout(row_major) mat4 g_matViewToProjection;
	vec4 g_vInvProjRow3;
	vec4 g_vClipPlane0;
	float g_flToneMapScalarLinear;
	float g_flLightMapScalar;
	float g_flEnvMapScalar;
	float g_flToneMapScalarGamma;
	vec3 g_vCameraPositionWs;
	float g_flViewportMinZ;
	vec3 g_vCameraDirWs;
	float g_flViewportMaxZ;
	vec3 g_vCameraUpDirWs;
	float g_flTime;
	vec3 g_vDepthPsToVsConversion;
	float g_flNearPlane;
	float g_flFarPlane;
	float g_flLightBinnerFarPlane;
	vec2 g_vInvViewportSize;
	vec2 g_vViewportToGBufferRatio;
	vec2 g_vMorphTextureAtlasSize;
	vec4 g_vInvGBufferSize;
	vec2 g_vViewportOffset;
	vec2 g_vViewportSize;
	vec2 g_vRenderTargetSize;
	float g_flFogBlendToBackground;
	float g_flHenyeyGreensteinCoeff;
	vec3 g_vFogColor;
	float g_flNegFogStartOverFogRange;
	float g_flInvFogRange;
	float g_flFogMaxDensity;
	float g_flFogExponent;
	float g_flMod2xIdentity;
	vec2 g_bRoughnessParams;
	float g_bStereoEnabled;
	float g_flStereoCameraIndex;
	vec3 g_vMiddleEyePositionWs;
	float g_flPad2;
	layout(row_major) mat4 g_matWorldToProjectionMultiview[2];
	vec4 g_vCameraPositionWsMultiview[2];
	vec4 g_vFrameBufferCopyInvSizeAndUvScale;
	vec4 g_vCameraAngles;
	vec4 g_vWorldToCameraOffset;
	vec4 g_vWorldToCameraOffsetMultiview[2];
	vec4 g_vPerViewConstantExtraData0;
	vec4 g_vPerViewConstantExtraData1;
	vec4 g_vPerViewConstantExtraData2;
	vec4 g_vPerViewConstantExtraData3;
} ;
layout(std140, binding = 0 ) uniform _Globals_ {
	float g_flBumpStrength;
	vec4 g_vWindStrengthFreqMulHighStrength;
	vec3 g_vWindOffset;
	vec3 g_vWindDir;
	vec3 g_vColorTint;
	vec3 g_vReflectionTint;
	float g_flReflectionAmount;
	vec3 g_vRefractionTint;
	float g_flRefractionAmount;
	vec3 g_vWaterFogColor;
	float g_flWaterDepth;
	float g_flWaterFogShadowFactor;
	float g_flLowEndSurfaceFactor;
	float g_flLowEndSurfaceMinimumColor;
	float g_flLowEndSurfaceOpacity;
	vec3 g_vLowEndSurfaceColor;
	vec3 g_vLowEndReflectionDir;
	vec3 g_vLowEndReflectionColor;
	float g_flLowEndReflectionPower;
	float g_flLowEndBaseBloom;
	float g_flLowEndBloomPower;
	float g_flLowEndBumpStrength;
	float g_flFlowTimeScale;
	float g_flWorldPositionScale;
	float g_flWorldUvScale;
	float g_flNoiseUvScale;
	float g_flNoiseStrength;
	float g_flNormalFlowLerpExp;
	float g_flNormalUvScale;
	float g_flNormalFlowTimeIntervalInSeconds;
	float g_flNormalFlowUvScrollDistance;
	float g_flColorFlowLerpExp;
	float g_flColorFlowUvScale;
	float g_flColorFlowTimeIntervalInSeconds;
	float g_flColorFlowUvScrollDistance;
	float g_flReflectance;
	vec3 g_vReflectionDir;
	vec3 g_vReflectionColor;
	float g_flReflectionPower;
	float g_flBaseBloom;
	float g_flBloomPower;
	float g_flScroll1X;
	float g_flScroll1Y;
	float g_flScroll2X;
	float g_flScroll2Y;
	vec4 g_vViewportExtentsTs;
} ;
layout(std140, binding = 2 ) uniform DotaHeightFogParams_t {
	vec4 g_vHeightFogColor_HeightBias;
	vec4 g_vHeightFogRangeParams;
	vec4 g_vHeightFogDensityParams;
	vec3 g_vFogTexCoordTransform0U;
	vec3 g_vFogTexCoordTransform0V;
	vec3 g_vFogTexCoordTransform1U;
	vec3 g_vFogTexCoordTransform1V;
	vec3 g_vFogTexCoordTransformTotalU;
	vec3 g_vFogTexCoordTransformTotalV;
	vec3 g_vFogLayer1VelocitySpeed;
	vec2 g_vCausticWindSpeedScaleAmplitudeScale;
} ;
layout( binding = 0 ) uniform sampler2D g_tNoise;
layout( binding = 1 ) uniform sampler2D g_tFlow;
layout( binding = 2 ) uniform sampler2D g_tNormal;
layout( binding = 3 ) uniform sampler2D g_tRefractionMap;
layout(std140, binding = 3 ) uniform DotaGlobalParams_t {
	vec3 g_vGlobalLightDir;
	vec3 g_vGlobalLightColor;
	float g_flGlobalLightSpecularScale;
	vec3 g_vGlobalLightSpecularDir;
	float g_flGlobalLightSpecularExp;
	vec3 g_vGlobalLightSpecularColor;
	float g_flGlobalLightSpecularIndependence;
	vec3 g_vGlobalLightAmbientDir;
	float g_flGlobalLightAmbientScale1;
	vec3 g_vGlobalLightAmbientColor1;
	float g_flGlobalLightAmbientScale2;
	vec3 g_vGlobalLightAmbientColor2;
	float g_flGlobalLightAmbientScale2Hero;
	vec2 g_vGlobalCloud1Offset;
	vec2 g_vGlobalCloud2Offset;
	vec3 g_vFowColor;
	float g_flGlobalCloudScale;
	float g_flFowDarkness;
	float g_flFowGrayFactor;
	float g_flFowColorFactor;
	float g_flFowGrayHilights;
	vec4 g_vFowWorldSize;
	vec4 g_vFowTexOffsets;
	layout(row_major) mat4 g_matShadowWorldToTexture;
	vec4 g_vInvShadowDepthTextureSize;
	vec3 g_vGlobalLightAmbientColor3;
	float g_flGlobalLightAmbientShadowAmount;
} ;
layout( binding = 4 ) uniform sampler2D g_tReflectionMap;
uniform sampler2D g_tFow;
uniform sampler2D g_tFrameBufferCopyTexture;
uniform sampler2D g_tDepthTexture;
uniform sampler2D g_tGBufferAlbedo;
uniform sampler2D g_tGBufferLightingTerms;
uniform sampler2D g_tGBufferDepth;
uniform sampler2D g_tGBufferNormalWs;
layout(std140) uniform PerViewLightingConstantBuffer_t {
	vec4 g_vInvLightTextureDims;
	vec4 g_vLightBinCounts;
	vec2 g_vLowResDeferredLightingTextureDim;
	vec2 g_vLowResDeferredLightingTextureInvDim;
	vec3 g_vToolsAmbientLighting;
	float g_flSSAOEnabled;
	vec3 g_vIrradAtlasInvSize;
	float g_flIrradGlobalLightingFactor;
	vec4 g_vGlobalLightingSHRed;
	vec4 g_vGlobalLightingSHGreen;
	vec4 g_vGlobalLightingSHBlue;
	vec3 g_vRayleighScatteringCoeff;
	float g_flMieScatteringEccentricity;
	vec3 g_vMieScatteringCoeff;
	float g_flMieForwardScatteringRatio;
	vec3 g_vSpecularCubeMapScale;
	float g_flDefaultEnvMapIndex;
	vec4 g_vLightCookieSheetSequenceAndSizes;
	vec3 g_vLpvBoxMinCascade0;
	float g_flLpvBrightnessScale;
	vec3 g_vLpvInvBoxDimCascade0;
	vec2 g_vLpvInvCoeffTextureDim;
} ;
layout(std140) uniform PerLayerConstantBuffer_t {
	vec4 g_vWireframeColor;
} ;
uniform sampler2D g_tClouds;
uniform sampler2DShadow g_tShadowDepthTexture;
uniform sampler2D g_tColor;
layout(location=0) in vec2 PS_INPUT_gl_vTexCoords;
layout(location=1) in vec4 PS_INPUT_gl_vPositionWs_flLinearDepth;
layout(location=2) in vec3 PS_INPUT_gl_vNormalWs;
layout(location=3) in vec4 PS_INPUT_gl_vVertexColor;
layout(location=4) in vec3 PS_INPUT_gl_vTangentUWs;
layout(location=5) in vec3 PS_INPUT_gl_vTangentVWs;
layout(location=0) out vec4 PS_OUTPUT_gl_vDiffuse;
layout(location=1) out vec4 PS_OUTPUT_gl_vSpecular;
layout(location=2) out vec4 PS_OUTPUT_gl_flDepth;
layout(location=3) out vec4 PS_OUTPUT_gl_vNormal;
const float C_1d0 = 1.0;
const vec3 C_vec3p0d5p = vec3(0.5);
const float C_0d0 = 0.0;
const vec2 C_vec2p2d0p = vec2(2.0);
const vec2 C_vec2pa1d0p = vec2(-1.0);
const float C_2d0 = 2.0;
const float C_0d5 = 0.5;
const float C_0d311 = 0.311;
const float C_a1d0 = -1.0;
const float C_0d1 = 0.1;
const vec3 C_vec3p0d0p = vec3(0.0);
const vec2 C_vec2p70d0p = vec2(70.0);
const vec2 C_vec2p16d0p = vec2(16.0);
const float C_3d5 = 3.5;
const float C_a0d05 = -0.05;
const float C_20d0 = 20.0;
const vec3 C_vec3p1d0p = vec3(1.0);
const vec4 C_obaw8x1 = vec4(0.0, 0.0, 0.0, 0.0);
void main()
{
	vec3 vNormalWs = normalize(PS_INPUT_gl_vNormalWs);
	vec4 H_vpxkxl1 = vec4(PS_INPUT_gl_vPositionWs_flLinearDepth.w, PS_INPUT_gl_vPositionWs_flLinearDepth.w, PS_INPUT_gl_vPositionWs_flLinearDepth.w, C_1d0);
	vec3 H_cs7t26 = vNormalWs * C_vec3p0d5p;
	vec3 H_43mnzq = C_vec3p0d5p + H_cs7t26;
	vec4 H_p4aj09 = vec4(H_43mnzq.x, H_43mnzq.y, H_43mnzq.z, C_0d0);
	float flTime = g_flFlowTimeScale * g_flTime;
	vec3 H_gq9g7w = vec3(g_flWorldPositionScale);
	vec3 vPositionWs = H_gq9g7w * PS_INPUT_gl_vPositionWs_flLinearDepth.xyz;
	vec3 H_nm4rb4 = vec3(PS_INPUT_gl_vPositionWs_flLinearDepth.x, PS_INPUT_gl_vPositionWs_flLinearDepth.y, C_1d0);
	float vWorldUv = dot(g_vFogTexCoordTransformTotalU, H_nm4rb4);
	float vWorldUv1 = dot(g_vFogTexCoordTransformTotalV, H_nm4rb4);
	vec2 H_97t6d41 = vec2(vWorldUv, vWorldUv1);
	float H_kfnxoe = C_0d0 - vPositionWs.y;
	vec2 H_l4hguh = vec2(vPositionWs.x, H_kfnxoe);
	vec2 H_6yxida = vec2(g_flNormalUvScale);
	vec2 vUv = H_6yxida * H_l4hguh;
	vec2 H_x7okeq = vec2(g_flNoiseUvScale);
	vec2 H_601zd7 = H_l4hguh * H_x7okeq;
	vec4 flNoise = texture(g_tNoise, H_601zd7);
	float flNoise1 = flNoise.y * g_flNoiseStrength;
	vec4 vFlowTexel = texture(g_tFlow, H_97t6d41);
	vec2 H_2zlrlz = vFlowTexel.xy * C_vec2p2d0p;
	vec2 vFlowVectorTs = H_2zlrlz + C_vec2pa1d0p;
	float H_ge0dfj = g_flNormalFlowTimeIntervalInSeconds * C_2d0;
	float H_g716jq1 = flTime / H_ge0dfj;
	float flTimeInIntervals = H_g716jq1 + flNoise1;
	float H_83ih0t1 = fract(flTimeInIntervals);
	vec2 H_c0m2m4 = vec2(H_83ih0t1);
	float param = flTimeInIntervals + C_0d5;
	float H_l5pql91 = fract(param);
	vec2 H_zb64z5 = vec2(H_l5pql91);
	float flOffset = floor(flTimeInIntervals);
	float flOffset1 = flOffset * C_0d311;
	vec2 H_spg3qb = vec2(flOffset1);
	float flOffset2 = floor(param);
	float H_50gn7o = C_0d311 * flOffset2;
	float flOffset3 = C_0d5 + H_50gn7o;
	vec2 H_eohecc1 = vec2(flOffset3);
	vec2 H_uiqus91 = H_spg3qb + vUv;
	vec2 H_svty0k = vec2(g_flNormalFlowUvScrollDistance);
	vec2 H_5mc33f = H_svty0k * vFlowVectorTs;
	vec2 H_lau5y31 = H_5mc33f * H_c0m2m4;
	vec2 vFlowUv = H_lau5y31 + H_uiqus91;
	vec2 H_wvjitq1 = H_eohecc1 + vUv;
	vec2 H_3xm7td = H_5mc33f * H_zb64z5;
	vec2 vFlowUv1 = H_3xm7td + H_wvjitq1;
	float H_wy5ti41 = C_2d0 * H_l5pql91;
	float H_qnn8i3 = H_wy5ti41 + C_a1d0;
	float flWeight = abs(H_qnn8i3);
	float flWeight1 = pow(flWeight, g_flNormalFlowLerpExp);
	vec2 H_vrvlsn1 = vec2(flWeight1);
	float H_x2zp11 = C_2d0 * H_83ih0t1;
	float H_j6mk6k1 = C_a1d0 + H_x2zp11;
	float flWeight2 = abs(H_j6mk6k1);
	float flWeight3 = pow(flWeight2, g_flNormalFlowLerpExp);
	vec2 H_twh4mr = vec2(flWeight3);
	vec4 vNormalTexel = texture(g_tNormal, vFlowUv);
	vec4 vNormalTexel1 = texture(g_tNormal, vFlowUv1);
	vec2 H_jvmfl11 = H_vrvlsn1 * vNormalTexel.wy;
	vec2 H_w1t1om1 = H_twh4mr * vNormalTexel1.wy;
	vec2 H_jj4i8x1 = H_jvmfl11 + H_w1t1om1;
	vec2 H_kjtpkp1 = C_vec2p2d0p * H_jj4i8x1;
	vec2 H_ibg1d81 = C_vec2pa1d0p + H_kjtpkp1;
	float H_hr1o701 = vFlowVectorTs.x * vFlowVectorTs.x;
	float H_59vo381 = vFlowVectorTs.y * vFlowVectorTs.y;
	float H_fhiul71 = H_59vo381 + H_hr1o701;
	float H_svdb3r = H_fhiul71 + C_0d1;
	float H_l5onq81 = H_svdb3r * g_flBumpStrength;
	vec2 H_3x7a9b = vec2(H_l5onq81);
	vec2 H_3dmhz6 = H_3x7a9b * H_ibg1d81;
	vec3 H_bf8a3j;
	H_bf8a3j.xy = H_3dmhz6.xy;
	float misc2a = dot(H_3dmhz6, H_3dmhz6);
	bool H_fqshc = misc2a > C_1d0;
	vec2 vNormalTs = normalize(H_3dmhz6);
	vec3 H_gm7j0n1;
	H_gm7j0n1.xy = vNormalTs.xy;
	vec3 select = H_fqshc ? H_gm7j0n1 : H_bf8a3j;
	float vNormalTs1 = dot(select.xy, select.xy);
	float param1 = C_1d0 - vNormalTs1;
	float misc3a = clamp(param1, C_0d0, C_1d0);
	float vNormalTs2 = sqrt(misc3a);
	vec3 H_1v5ex4 = select;
	H_1v5ex4.z = vNormalTs2;
	vec2 vScreenUv = g_vInvGBufferSize.xy * gl_FragCoord.xy;
	vec4 vUnwarpedRefractionTexel = texture(g_tRefractionMap, vScreenUv);
	vec3 H_8mjky01 = PS_INPUT_gl_vPositionWs_flLinearDepth.xyz - g_vCameraPositionWs;
	vec3 H_8eauiw = C_vec3p0d0p - H_8mjky01;
	float flCameraDist = length(H_8eauiw);
	vec2 H_tzs2xz = vec2(flCameraDist);
	float H_q9ey6t1 = g_flReflectionAmount * vUnwarpedRefractionTexel.w;
	vec2 H_upx5m7 = vec2(H_q9ey6t1);
	vec2 H_dtcqkc = H_upx5m7 * select.xy;
	vec2 H_vnfack1 = H_dtcqkc * C_vec2p70d0p;
	vec2 H_3kleet1 = H_vnfack1 * C_vec2p16d0p;
	vec2 H_ai6lc91 = H_3kleet1 / H_tzs2xz;
	vec2 vReflectScreenCoord = H_ai6lc91 + vScreenUv;
	float H_871oji = g_flRefractionAmount * vUnwarpedRefractionTexel.w;
	vec2 H_9sxhff = vec2(H_871oji);
	vec2 H_j6kal = H_9sxhff * select.xy;
	vec2 H_jc44bh1 = C_vec2p70d0p * H_j6kal;
	vec2 H_vuylje1 = C_vec2p16d0p * H_jc44bh1;
	vec2 H_n0vnrp1 = H_vuylje1 / H_tzs2xz;
	vec2 vRefractScreenCoord = vScreenUv - H_n0vnrp1;
	float vReflectScreenCoord1 = clamp(vReflectScreenCoord.y, g_vViewportExtentsTs.y, g_vViewportExtentsTs.w);
	vec2 H_vi4bam1 = vReflectScreenCoord;
	H_vi4bam1.y = vReflectScreenCoord1;
	float vRefractScreenCoord1 = clamp(vRefractScreenCoord.y, g_vViewportExtentsTs.y, g_vViewportExtentsTs.w);
	vec2 H_x1iwq2 = vRefractScreenCoord;
	H_x1iwq2.y = vRefractScreenCoord1;
	vec3 vReflectionTint = g_vFogColor * g_vReflectionTint;
	vec3 vWaterFogColor = mix(g_vGlobalLightColor, g_vGlobalLightAmbientColor2, g_flWaterFogShadowFactor);
	vec3 vWaterFogColor1 = g_vWaterFogColor * vWaterFogColor;
	vec4 vReflectColor = texture(g_tReflectionMap, H_vi4bam1);
	vec3 vReflectColor1 = vReflectColor.xyz * vReflectionTint;
	vec4 vRefractColor = texture(g_tRefractionMap, H_x1iwq2);
	float param2 = vUnwarpedRefractionTexel.w * C_3d5;
	float misc3a1 = clamp(param2, C_0d0, C_1d0);
	vec3 H_e1l8bp = g_vRefractionTint * vRefractColor.xyz;
	vec3 vRefractColor1 = mix(vRefractColor.xyz, H_e1l8bp, misc3a1);
	float param3 = C_2d0 * vUnwarpedRefractionTexel.w;
	float misc3a2 = clamp(param3, C_0d0, C_1d0);
	vec3 H_7pnklg = vec3(misc3a2);
	vec3 vReflectColor2 = H_7pnklg * vReflectColor1;
	vec3 vRefractColor2 = mix(vRefractColor1, vWaterFogColor1, vUnwarpedRefractionTexel.w);
	float H_awgtck = vUnwarpedRefractionTexel.w + C_a0d05;
	float param4 = H_awgtck * C_20d0;
	float misc3a3 = clamp(param4, C_0d0, C_1d0);
	float flFresnel = g_flReflectance * misc3a3;
	vec3 H_yjj1ii = vec3(flFresnel);
	vec3 H_qnmmav1 = H_yjj1ii * vReflectColor2;
	vec3 H_e3lvsa = H_qnmmav1 + vRefractColor2;
	vec3 H_i1nbjv1 = normalize(H_8mjky01);
	vec3 H_t3ywhi1 = C_vec3p0d0p - H_i1nbjv1;
	vec3 vReflectDir = reflect(H_t3ywhi1, H_1v5ex4);
	float flSpecular = dot(g_vReflectionDir, vReflectDir);
	float misc3a4 = clamp(flSpecular, C_0d0, C_1d0);
	float flSpecular1 = pow(misc3a4, g_flReflectionPower);
	vec3 H_jvk9qx1 = vec3(flSpecular1);
	vec3 vReflectionColor = g_vGlobalLightSpecularColor * g_vReflectionColor;
	vec3 H_lp6q2d = g_vGlobalLightColor * vReflectionColor;
	float misc3a5 = clamp(g_flGlobalLightSpecularIndependence, C_0d0, C_1d0);
	vec3 vReflectionColor1 = mix(H_lp6q2d, vReflectionColor, misc3a5);
	vec3 H_3vbdqr1 = H_jvk9qx1 * vReflectionColor1;
	vec3 H_xwcmob1 = H_3vbdqr1 + H_e3lvsa;
	vec3 misc3a6 = clamp(H_xwcmob1, C_vec3p0d0p, C_vec3p1d0p);
	float vSpecular = pow(flSpecular1, g_flBloomPower);
	vec4 H_do3r571 = vec4(misc3a6.x, misc3a6.y, misc3a6.z, C_0d0);
	vec4 H_5agmpi = C_obaw8x1;
	H_5agmpi.yzw = vec3(g_flBaseBloom, vSpecular, C_0d0);
	PS_OUTPUT_gl_vDiffuse = H_do3r571;
	PS_OUTPUT_gl_vSpecular = H_5agmpi;
	PS_OUTPUT_gl_flDepth = H_vpxkxl1;
	PS_OUTPUT_gl_vNormal = H_p4aj09;
}
