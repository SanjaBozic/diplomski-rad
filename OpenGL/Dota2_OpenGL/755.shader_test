[require]
GLSL >= 3.30
GL_ARB_separate_shader_objects
SSO ENABLED

[fragment shader]
#version 330 core
// LunarGOO output
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
layout(std140, binding = 0 ) uniform PerViewConstantBuffer_t {
	layout(row_major) mat4 g_matWorldToProjection;
	layout(row_major) mat4 g_matProjectionToWorld;
	layout(row_major) mat4 g_matWorldToView;
	layout(row_major) mat4 g_matViewToProjection;
	vec4 g_vInvProjRow3;
	vec4 g_vClipPlane0;
	float g_flToneMapScalarLinear;
	float g_flLightMapScalar;
	float g_flEnvMapScalar;
	float g_flToneMapScalarGamma;
	vec3 g_vCameraPositionWs;
	float g_flViewportMinZ;
	vec3 g_vCameraDirWs;
	float g_flViewportMaxZ;
	vec3 g_vCameraUpDirWs;
	float g_flTime;
	vec3 g_vDepthPsToVsConversion;
	float g_flNearPlane;
	float g_flFarPlane;
	float g_flLightBinnerFarPlane;
	vec2 g_vInvViewportSize;
	vec2 g_vViewportToGBufferRatio;
	vec2 g_vMorphTextureAtlasSize;
	vec4 g_vInvGBufferSize;
	vec2 g_vViewportOffset;
	vec2 g_vViewportSize;
	vec2 g_vRenderTargetSize;
	float g_flFogBlendToBackground;
	float g_flHenyeyGreensteinCoeff;
	vec3 g_vFogColor;
	float g_flNegFogStartOverFogRange;
	float g_flInvFogRange;
	float g_flFogMaxDensity;
	float g_flFogExponent;
	float g_flMod2xIdentity;
	vec2 g_bRoughnessParams;
	float g_bStereoEnabled;
	float g_flStereoCameraIndex;
	vec3 g_vMiddleEyePositionWs;
	float g_flPad2;
	layout(row_major) mat4 g_matWorldToProjectionMultiview[2];
	vec4 g_vCameraPositionWsMultiview[2];
	vec4 g_vFrameBufferCopyInvSizeAndUvScale;
	vec4 g_vCameraAngles;
	vec4 g_vWorldToCameraOffset;
	vec4 g_vWorldToCameraOffsetMultiview[2];
	vec4 g_vPerViewConstantExtraData0;
	vec4 g_vPerViewConstantExtraData1;
	vec4 g_vPerViewConstantExtraData2;
	vec4 g_vPerViewConstantExtraData3;
} ;
layout(std140, binding = 2 ) uniform DotaGlobalParams_t {
	vec3 g_vGlobalLightDir;
	vec3 g_vGlobalLightColor;
	float g_flGlobalLightSpecularScale;
	vec3 g_vGlobalLightSpecularDir;
	float g_flGlobalLightSpecularExp;
	vec3 g_vGlobalLightSpecularColor;
	float g_flGlobalLightSpecularIndependence;
	vec3 g_vGlobalLightAmbientDir;
	float g_flGlobalLightAmbientScale1;
	vec3 g_vGlobalLightAmbientColor1;
	float g_flGlobalLightAmbientScale2;
	vec3 g_vGlobalLightAmbientColor2;
	float g_flGlobalLightAmbientScale2Hero;
	vec2 g_vGlobalCloud1Offset;
	vec2 g_vGlobalCloud2Offset;
	vec3 g_vFowColor;
	float g_flGlobalCloudScale;
	float g_flFowDarkness;
	float g_flFowGrayFactor;
	float g_flFowColorFactor;
	float g_flFowGrayHilights;
	vec4 g_vFowWorldSize;
	vec4 g_vFowTexOffsets;
	layout(row_major) mat4 g_matShadowWorldToTexture;
	vec4 g_vInvShadowDepthTextureSize;
	vec3 g_vGlobalLightAmbientColor3;
	float g_flGlobalLightAmbientShadowAmount;
} ;
layout( binding = 6 ) uniform sampler2DShadow g_tShadowDepthTexture;
layout( binding = 7 ) uniform sampler2D g_tClouds;
layout(std140, binding = 1 ) uniform _Globals_ {
	float g_flAmbientScale;
	vec3 g_vColorTint;
	float g_flAlphaTestReference;
	float g_flFresnelModulatesAlpha;
	float g_flDetailBlendFactor;
	float g_flDetail2BlendFactor;
	float g_flColorWarpBlendFactorFromCode;
	float g_flCloakFactor;
	float g_flFullyCloakedRefractFactor;
	float g_flMaterialCloakFactor;
	float g_flCloakRefractAmount;
	float g_flCloakIntensity;
	float g_flCloakBlurAmount;
	vec3 g_vCloakColorTint;
	float g_flDetailBlendToFull;
	float g_flDiffuseWarpBlendToFull;
	float g_flMetalnessBlendToFull;
	float g_flSelfIllumBlendToFull;
	float g_flSpecularBlendToFull;
	float g_flEnvMapBlendToFull;
	float g_flReflectionsTintByBaseBlendToNone;
	float g_flSpecularExponentBlendToFull;
	vec3 g_vBloomColor;
	float g_flBloomScale;
	float g_flBloomShift;
	vec3 g_vSpecularColor;
	float g_flSpecularExponent;
	float g_flSpecularScale;
	vec3 g_vDetail1ColorTint;
	vec3 g_vDetail2ColorTint;
	float g_bFog;
	float g_bMaskCubeMapByMetalness;
	vec2 g_vTexCoordScale;
	vec2 g_vDetailTexCoordScale;
	float g_flOverbrightFactor;
} ;
layout( binding = 0 ) uniform sampler2D g_tNormal;
layout( binding = 1 ) uniform sampler2D g_tFresnelWarp;
layout( binding = 2 ) uniform sampler2D g_tMasks1;
layout( binding = 3 ) uniform sampler2D g_tMasks2;
layout( binding = 4 ) uniform sampler2D g_tColor;
layout( binding = 5 ) uniform sampler2D g_tDetail;
uniform sampler2D g_tFow;
uniform sampler2D g_tFrameBufferCopyTexture;
uniform sampler2D g_tDepthTexture;
uniform sampler2D g_tGBufferAlbedo;
uniform sampler2D g_tGBufferLightingTerms;
uniform sampler2D g_tGBufferDepth;
uniform sampler2D g_tGBufferNormalWs;
layout(std140) uniform PerViewLightingConstantBuffer_t {
	vec4 g_vInvLightTextureDims;
	vec4 g_vLightBinCounts;
	vec2 g_vLowResDeferredLightingTextureDim;
	vec2 g_vLowResDeferredLightingTextureInvDim;
	vec3 g_vToolsAmbientLighting;
	float g_flSSAOEnabled;
	vec3 g_vIrradAtlasInvSize;
	float g_flIrradGlobalLightingFactor;
	vec4 g_vGlobalLightingSHRed;
	vec4 g_vGlobalLightingSHGreen;
	vec4 g_vGlobalLightingSHBlue;
	vec3 g_vRayleighScatteringCoeff;
	float g_flMieScatteringEccentricity;
	vec3 g_vMieScatteringCoeff;
	float g_flMieForwardScatteringRatio;
	vec3 g_vSpecularCubeMapScale;
	float g_flDefaultEnvMapIndex;
	vec4 g_vLightCookieSheetSequenceAndSizes;
	vec3 g_vLpvBoxMinCascade0;
	float g_flLpvBrightnessScale;
	vec3 g_vLpvInvBoxDimCascade0;
	vec2 g_vLpvInvCoeffTextureDim;
} ;
layout(std140) uniform PerLayerConstantBuffer_t {
	vec4 g_vWireframeColor;
} ;
uniform sampler2D g_tDetail2;
uniform sampler3D g_tColorWarp3DFromCode;
layout(location=0) in vec4 PS_INPUT_gl_vBaseTexCoord_vDetailTexCoord;
layout(location=1) in vec3 PS_INPUT_gl_vNormalWs;
layout(location=2) in vec4 PS_INPUT_gl_vTangentUWs_flTangentVSign;
layout(location=3) in vec4 PS_INPUT_gl_vVertexColor;
layout(location=4) in vec4 PS_INPUT_gl_vPositionWs_flLinearDepth;
layout(location=5) in vec4 PS_INPUT_gl_vRimColor_flFog;
layout(location=6) in vec4 PS_INPUT_gl_vLightAtten;
layout(location=0) out vec4 PS_OUTPUT_gl_vDiffuse;
layout(location=1) out vec4 PS_OUTPUT_gl_flDepth;
const vec2 C_vec2p2d0p = vec2(2.0);
const vec2 C_vec2pa1d0p = vec2(-1.0);
const float C_1d0 = 1.0;
const float C_0d0 = 0.0;
const vec3 C_vec3p0d0p = vec3(0.0);
const float C_0d5 = 0.5;
const vec3 C_vec3p2d0p = vec3(2.0);
const vec3 C_vec3p1d0p = vec3(1.0);
const float C_a1d0 = -1.0;
const vec4 C_wt9i7t = vec4(0.0749064);
const vec2 C_a1z03r = vec2(0.0, 0.0);
const vec4 C_a1xzaw1 = vec4(0.123596);
const float C_0d205993 = 0.205993;
const float C_0d001 = 0.001;
const vec3 C_1oqnzq = vec3(0.0, 0.0, -1.0);
const vec3 C_6aobaf1 = vec3(0.0, 0.0, -20000.0);
const vec3 C_imhxe9 = vec3(0.0, 0.0, 1.0);
void main()
{
	vec3 vGeometricNormalWs = normalize(PS_INPUT_gl_vNormalWs);
	vec3 vTangentUWs = normalize(PS_INPUT_gl_vTangentUWs_flTangentVSign.xyz);
	vec3 vTangentVWs = cross(vGeometricNormalWs, PS_INPUT_gl_vTangentUWs_flTangentVSign.xyz);
	vec3 vTangentVWs1 = normalize(vTangentVWs);
	vec3 vTangentVWs2 = PS_INPUT_gl_vTangentUWs_flTangentVSign.www * vTangentVWs1;
	vec4 vNormalTexel = texture(g_tNormal, PS_INPUT_gl_vBaseTexCoord_vDetailTexCoord.xy);
	vec2 H_qgi6bb = vNormalTexel.wy * C_vec2p2d0p;
	vec2 H_mblhlu1 = H_qgi6bb + C_vec2pa1d0p;
	float vNormalTs = dot(H_mblhlu1, H_mblhlu1);
	float param = C_1d0 - vNormalTs;
	float misc3a = clamp(param, C_0d0, C_1d0);
	float vNormalTs1 = sqrt(misc3a);
	vec3 H_g61ahj = vec3(vNormalTs1);
	float H_vj1l3j = C_0d0 - H_mblhlu1.y;
	vec3 H_edajjc1 = vec3(H_vj1l3j);
	vec3 vVectorWs = H_mblhlu1.xxx * vTangentUWs;
	vec3 H_fid0m41 = H_edajjc1 * vTangentVWs2;
	vec3 vVectorWs1 = H_fid0m41 + vVectorWs;
	vec3 H_rhwd1v = H_g61ahj * vGeometricNormalWs;
	vec3 vVectorWs2 = H_rhwd1v + vVectorWs1;
	vec3 H_qw6t8a1 = normalize(vVectorWs2);
	vec3 H_8mjky01 = PS_INPUT_gl_vPositionWs_flLinearDepth.xyz - g_vCameraPositionWs;
	vec3 H_i1nbjv1 = normalize(H_8mjky01);
	vec3 H_t3ywhi1 = C_vec3p0d0p - H_i1nbjv1;
	float flVDotN = dot(H_t3ywhi1, H_qw6t8a1);
	float misc3a1 = clamp(flVDotN, C_0d0, C_1d0);
	vec2 H_u9x9w1 = vec2(misc3a1, C_0d5);
	vec4 vFresnelTerms = textureLod(g_tFresnelWarp, H_u9x9w1, C_0d0);
	vec4 vMasks = texture(g_tMasks1, PS_INPUT_gl_vBaseTexCoord_vDetailTexCoord.xy);
	float flDetailMask = max(vMasks.x, g_flDetailBlendToFull);
	float flMetalnessMask = max(vMasks.z, g_flMetalnessBlendToFull);
	float flSelfIllumMask = max(vMasks.w, g_flSelfIllumBlendToFull);
	float flFresnelSpecular = max(vFresnelTerms.z, flMetalnessMask);
	vec3 H_txpgr4 = vec3(flFresnelSpecular);
	vec4 vMasks1 = texture(g_tMasks2, PS_INPUT_gl_vBaseTexCoord_vDetailTexCoord.xy);
	float flSpecularMask = max(vMasks1.x, g_flSpecularBlendToFull);
	vec3 H_0ooyak = vec3(flSpecularMask);
	float flRimMask = max(vMasks1.y, g_flEnvMapBlendToFull);
	vec3 H_znzd9q = vec3(flRimMask);
	float flTintByBaseMask = max(vMasks1.z, g_flReflectionsTintByBaseBlendToNone);
	float flSpecularExponent = max(vMasks1.w, g_flSpecularExponentBlendToFull);
	vec4 vColorTexel = texture(g_tColor, PS_INPUT_gl_vBaseTexCoord_vDetailTexCoord.xy);
	vec4 vDetailTexel = texture(g_tDetail, PS_INPUT_gl_vBaseTexCoord_vDetailTexCoord.zw);
	float flDetailMask1 = flDetailMask * g_flDetailBlendFactor;
	vec3 H_t2i1ry = g_vDetail1ColorTint * vDetailTexel.xyz;
	vec3 H_mwn9wm = H_t2i1ry * C_vec3p2d0p;
	vec3 vDetailTexel1 = mix(C_vec3p1d0p, H_mwn9wm, flDetailMask1);
	vec3 vAlbedo = vColorTexel.xyz * vDetailTexel1;
	vec3 vAlbedo1 = PS_INPUT_gl_vVertexColor.xyz * vAlbedo;
	float H_60zmsr = vFresnelTerms.z + C_a1d0;
	float H_7o3mot = H_60zmsr * g_flFresnelModulatesAlpha;
	float H_5t2slh = C_1d0 + H_7o3mot;
	float flTranslucency = H_5t2slh * vColorTexel.w;
	float H_1f2e8d1 = PS_INPUT_gl_vVertexColor.w * flTranslucency;
	vec4 H_pws5jp1;
	H_pws5jp1.w = H_1f2e8d1;
	bool H_uqtg5m1 = H_1f2e8d1 < g_flAlphaTestReference;
	if (H_uqtg5m1) {
		discard;
	}
	float product = PS_INPUT_gl_vPositionWs_flLinearDepth.x * g_matShadowWorldToTexture[0].x;
	float product1 = PS_INPUT_gl_vPositionWs_flLinearDepth.y * g_matShadowWorldToTexture[1].x;
	float dotProduct = product + product1;
	float product2 = PS_INPUT_gl_vPositionWs_flLinearDepth.z * g_matShadowWorldToTexture[2].x;
	float dotProduct1 = dotProduct + product2;
	float dotProduct2 = dotProduct1 + g_matShadowWorldToTexture[3].x;
	float product3 = PS_INPUT_gl_vPositionWs_flLinearDepth.x * g_matShadowWorldToTexture[0].y;
	float product4 = PS_INPUT_gl_vPositionWs_flLinearDepth.y * g_matShadowWorldToTexture[1].y;
	float dotProduct3 = product3 + product4;
	float product5 = PS_INPUT_gl_vPositionWs_flLinearDepth.z * g_matShadowWorldToTexture[2].y;
	float dotProduct4 = dotProduct3 + product5;
	float dotProduct5 = dotProduct4 + g_matShadowWorldToTexture[3].y;
	float product6 = PS_INPUT_gl_vPositionWs_flLinearDepth.x * g_matShadowWorldToTexture[0].z;
	float product7 = PS_INPUT_gl_vPositionWs_flLinearDepth.y * g_matShadowWorldToTexture[1].z;
	float dotProduct6 = product6 + product7;
	float product8 = PS_INPUT_gl_vPositionWs_flLinearDepth.z * g_matShadowWorldToTexture[2].z;
	float dotProduct7 = dotProduct6 + product8;
	float dotProduct8 = dotProduct7 + g_matShadowWorldToTexture[3].z;
	float product9 = PS_INPUT_gl_vPositionWs_flLinearDepth.x * g_matShadowWorldToTexture[0].w;
	float producta = PS_INPUT_gl_vPositionWs_flLinearDepth.y * g_matShadowWorldToTexture[1].w;
	float dotProduct9 = product9 + producta;
	float productb = PS_INPUT_gl_vPositionWs_flLinearDepth.z * g_matShadowWorldToTexture[2].w;
	float dotProducta = dotProduct9 + productb;
	float dotProductb = dotProducta + g_matShadowWorldToTexture[3].w;
	vec3 H_16wbh81 = vec3(dotProductb);
	vec3 H_mo5dbs1 = vec3(dotProduct2, dotProduct5, dotProduct8);
	vec3 H_qdsg5k1 = H_mo5dbs1 / H_16wbh81;
	float param1 = C_0d0 - H_qdsg5k1.z;
	float misc3a2 = clamp(param1, C_0d0, C_1d0);
	float H_60ojyb = C_0d0 - g_vInvShadowDepthTextureSize.x;
	vec2 H_t5te6f = vec2(H_60ojyb);
	vec2 H_ep5c3j1 = H_qdsg5k1.xy + g_vInvShadowDepthTextureSize.xx;
	vec3 H_8dksvs = vec3(H_ep5c3j1.x, H_ep5c3j1.y, misc3a2);
	float H_chn5ep1 = textureLod(g_tShadowDepthTexture, H_8dksvs, C_0d0);
	vec2 H_pv0in9 = vec2(H_60ojyb, g_vInvShadowDepthTextureSize.x);
	vec2 H_he48ts = H_pv0in9 + H_qdsg5k1.xy;
	vec3 H_otyegk = vec3(H_he48ts.x, H_he48ts.y, misc3a2);
	float H_u08pk7 = textureLod(g_tShadowDepthTexture, H_otyegk, C_0d0);
	vec2 H_t32u4i1 = vec2(g_vInvShadowDepthTextureSize.x, H_60ojyb);
	vec2 H_3zubtq = H_qdsg5k1.xy + H_t32u4i1;
	vec3 H_w4ff2h1 = vec3(H_3zubtq.x, H_3zubtq.y, misc3a2);
	float H_xkjzlj1 = textureLod(g_tShadowDepthTexture, H_w4ff2h1, C_0d0);
	vec2 H_r37y1w = H_qdsg5k1.xy + H_t5te6f;
	vec3 H_8eio7d1 = vec3(H_r37y1w.x, H_r37y1w.y, misc3a2);
	float H_efz1ea1 = textureLod(g_tShadowDepthTexture, H_8eio7d1, C_0d0);
	vec4 H_u6ap2o = vec4(H_chn5ep1, H_u08pk7, H_xkjzlj1, H_efz1ea1);
	float flSum = dot(H_u6ap2o, C_wt9i7t);
	vec2 H_e9rh661 = vec2(g_vInvShadowDepthTextureSize.x, C_0d0);
	vec2 H_85dk7x = H_e9rh661 + H_qdsg5k1.xy;
	vec3 H_053dbf1 = vec3(H_85dk7x.x, H_85dk7x.y, misc3a2);
	float H_mabyh11 = textureLod(g_tShadowDepthTexture, H_053dbf1, C_0d0);
	vec2 H_na4vhz = vec2(H_60ojyb, C_0d0);
	vec2 H_iybrli = H_na4vhz + H_qdsg5k1.xy;
	vec3 H_4grr8t1 = vec3(H_iybrli.x, H_iybrli.y, misc3a2);
	float H_t8dmln1 = textureLod(g_tShadowDepthTexture, H_4grr8t1, C_0d0);
	vec2 H_23b4ob1 = C_a1z03r;
	H_23b4ob1.y = H_60ojyb;
	vec2 H_wcm3cs = H_23b4ob1 + H_qdsg5k1.xy;
	vec3 H_oyv10x = vec3(H_wcm3cs.x, H_wcm3cs.y, misc3a2);
	float H_8gpeo9 = textureLod(g_tShadowDepthTexture, H_oyv10x, C_0d0);
	vec2 H_23b4ob1r = C_a1z03r;
	H_23b4ob1r.y = g_vInvShadowDepthTextureSize.x;
	vec2 H_omz8p81 = H_23b4ob1r + H_qdsg5k1.xy;
	vec3 H_o6we2h1 = vec3(H_omz8p81.x, H_omz8p81.y, misc3a2);
	float H_fbktf11 = textureLod(g_tShadowDepthTexture, H_o6we2h1, C_0d0);
	vec4 H_0xzzl01 = vec4(H_mabyh11, H_t8dmln1, H_8gpeo9, H_fbktf11);
	float flSum1 = dot(H_0xzzl01, C_a1xzaw1);
	float flSum2 = flSum + flSum1;
	vec3 H_i59xs01 = vec3(H_qdsg5k1.x, H_qdsg5k1.y, misc3a2);
	float flSum3 = textureLod(g_tShadowDepthTexture, H_i59xs01, C_0d0);
	float H_xchcee1 = flSum3 * C_0d205993;
	float flSum4 = H_xchcee1 + flSum2;
	vec3 param2 = C_vec3p0d0p - g_vGlobalLightDir;
	float flNDotL = dot(H_qw6t8a1, param2);
	float H_tvce4i1 = C_0d5 * flNDotL;
	float flHalfLambert = C_0d5 + H_tvce4i1;
	float flHalfLambert1 = flHalfLambert * flSum4;
	vec3 H_kx1zyk = vec3(flHalfLambert1);
	vec3 vDiffuse = H_kx1zyk * g_vGlobalLightColor;
	vec3 vReflection = reflect(H_t3ywhi1, H_qw6t8a1);
	vec3 H_kwpofl1 = C_vec3p0d0p - vReflection;
	float flRDotL = dot(param2, H_kwpofl1);
	float misc3a3 = clamp(flRDotL, C_0d0, C_1d0);
	float H_rvksnx = flSpecularExponent * g_flSpecularExponent;
	float misc3a4 = clamp(flNDotL, C_0d0, C_1d0);
	float flSpecularIntensity = max(C_0d001, misc3a3);
	float flSpecularIntensity1 = pow(flSpecularIntensity, H_rvksnx);
	float flSpecularIntensity2 = flSpecularIntensity1 * misc3a4;
	vec3 H_v1vcpt = vec3(flSpecularIntensity2);
	vec3 vSpecular = H_v1vcpt * g_vGlobalLightColor;
	float vDiffuse1 = dot(g_vGlobalLightAmbientDir, H_qw6t8a1);
	float misc3a5 = clamp(vDiffuse1, C_0d0, C_1d0);
	vec3 H_kcr5ui = vec3(misc3a5);
	vec3 H_qhgahu = H_kcr5ui * g_vGlobalLightAmbientColor1;
	vec3 H_fx1uua = vec3(g_flGlobalLightAmbientScale1);
	vec3 H_vp43341 = H_fx1uua * H_qhgahu;
	vec3 H_j21u991 = vec3(g_flAmbientScale);
	vec3 H_xovjmu = H_j21u991 * H_vp43341;
	vec3 vDiffuse2 = H_xovjmu + vDiffuse;
	float flDenom = dot(param2, C_1oqnzq);
	vec3 H_ssxaeo1 = PS_INPUT_gl_vPositionWs_flLinearDepth.xyz + C_6aobaf1;
	float flDistance = dot(C_1oqnzq, H_ssxaeo1);
	float flDistance1 = flDistance / flDenom;
	vec3 H_dxlgf3 = vec3(flDistance1);
	vec3 H_9egwha = H_dxlgf3 * param2;
	vec3 H_ccosvm1 = PS_INPUT_gl_vPositionWs_flLinearDepth.xyz - H_9egwha;
	vec2 H_w6a2p9 = vec2(g_flGlobalCloudScale);
	vec2 vStartUv = H_ccosvm1.xy / H_w6a2p9;
	vec2 H_v0fa1g = g_vGlobalCloud1Offset + vStartUv;
	vec4 flCloudColor = texture(g_tClouds, H_v0fa1g);
	vec2 H_gfa5yl = g_vGlobalCloud2Offset + vStartUv;
	vec4 flCloudColor1 = texture(g_tClouds, H_gfa5yl);
	float flCloudColor2 = flCloudColor.x * flCloudColor1.y;
	float H_jcq67g1 = C_0d5 * H_qw6t8a1.z;
	float H_hwxri21 = C_0d5 + H_jcq67g1;
	vec3 vShadowAmbientColor = mix(g_vGlobalLightAmbientColor3, g_vGlobalLightAmbientColor2, H_hwxri21);
	vec3 H_40n9ey = vec3(g_flGlobalLightAmbientScale2Hero);
	vec3 vShadowAmbientColor1 = H_40n9ey * vShadowAmbientColor;
	float H_ckpxio1 = C_1d0 - flSum4;
	float H_lf8czm1 = C_1d0 - flCloudColor2;
	float vDiffuse3 = max(H_ckpxio1, H_lf8czm1);
	vec3 H_mbxp6i1 = vec3(vDiffuse3);
	vec3 H_94ywkv = H_mbxp6i1 * vShadowAmbientColor1;
	vec3 H_eg0vus = H_94ywkv * H_j21u991;
	vec3 vDiffuse4 = H_eg0vus + vDiffuse2;
	vec3 H_q7ff1b = vec3(g_flSpecularScale);
	vec3 vSpecular1 = H_q7ff1b * vSpecular;
	vec3 vSpecular2 = H_0ooyak * vSpecular1;
	vec3 vSpecularTint = mix(vColorTexel.xyz, g_vSpecularColor, flTintByBaseMask);
	vec3 vSpecular3 = vSpecular2 * vSpecularTint;
	vec3 vSpecular4 = H_txpgr4 * vSpecular3;
	vec3 H_lokt4p1 = vAlbedo1 * vDiffuse4;
	vec3 H_djz9o81 = H_lokt4p1 + vSpecular4;
	vec3 H_p83ryl1 = mix(H_djz9o81, vSpecular4, flMetalnessMask);
	vec3 vRimLight = H_znzd9q * PS_INPUT_gl_vRimColor_flFog.xyz;
	float vRimLight1 = dot(H_qw6t8a1, C_imhxe9);
	float vRimLight2 = max(C_0d0, vRimLight1);
	vec3 H_pgkd0l1 = vec3(vRimLight2);
	vec3 vRimLight3 = H_pgkd0l1 * vRimLight;
	vec3 vRimLight4 = vFresnelTerms.xxx * vRimLight3;
	vec3 H_wuuavy = H_p83ryl1 + vRimLight4;
	float misc3a6 = clamp(flSelfIllumMask, C_0d0, C_1d0);
	vec3 H_pyu4oa = mix(H_wuuavy, vAlbedo, misc3a6);
	vec3 H_eqbz9z = vec3(g_flOverbrightFactor);
	vec3 H_2048jw = H_eqbz9z * H_pyu4oa;
	vec4 H_qsvdxn = H_pws5jp1;
	H_qsvdxn.xyz = H_2048jw.xyz;
	PS_OUTPUT_gl_vDiffuse = H_qsvdxn;
	PS_OUTPUT_gl_flDepth = PS_INPUT_gl_vPositionWs_flLinearDepth.wwww;
}

