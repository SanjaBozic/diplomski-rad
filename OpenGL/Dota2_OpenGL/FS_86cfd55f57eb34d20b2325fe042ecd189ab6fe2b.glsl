#version 330 core
// LunarGOO output
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
layout(std140, binding = 1 ) uniform DotaGlobalParams_t {
	vec3 g_vGlobalLightDir;
	vec3 g_vGlobalLightColor;
	float g_flGlobalLightSpecularScale;
	vec3 g_vGlobalLightSpecularDir;
	float g_flGlobalLightSpecularExp;
	vec3 g_vGlobalLightSpecularColor;
	float g_flGlobalLightSpecularIndependence;
	vec3 g_vGlobalLightAmbientDir;
	float g_flGlobalLightAmbientScale1;
	vec3 g_vGlobalLightAmbientColor1;
	float g_flGlobalLightAmbientScale2;
	vec3 g_vGlobalLightAmbientColor2;
	float g_flGlobalLightAmbientScale2Hero;
	vec2 g_vGlobalCloud1Offset;
	vec2 g_vGlobalCloud2Offset;
	vec3 g_vFowColor;
	float g_flGlobalCloudScale;
	float g_flFowDarkness;
	float g_flFowGrayFactor;
	float g_flFowColorFactor;
	float g_flFowGrayHilights;
	vec4 g_vFowWorldSize;
	vec4 g_vFowTexOffsets;
	layout(row_major) mat4 g_matShadowWorldToTexture;
	vec4 g_vInvShadowDepthTextureSize;
	vec3 g_vGlobalLightAmbientColor3;
	float g_flGlobalLightAmbientShadowAmount;
} ;
layout( binding = 3 ) uniform sampler2D g_tFow;
layout(std140, binding = 0 ) uniform PerViewConstantBuffer_t {
	layout(row_major) mat4 g_matWorldToProjection;
	layout(row_major) mat4 g_matProjectionToWorld;
	layout(row_major) mat4 g_matWorldToView;
	layout(row_major) mat4 g_matViewToProjection;
	vec4 g_vInvProjRow3;
	vec4 g_vClipPlane0;
	float g_flToneMapScalarLinear;
	float g_flLightMapScalar;
	float g_flEnvMapScalar;
	float g_flToneMapScalarGamma;
	vec3 g_vCameraPositionWs;
	float g_flViewportMinZ;
	vec3 g_vCameraDirWs;
	float g_flViewportMaxZ;
	vec3 g_vCameraUpDirWs;
	float g_flTime;
	vec3 g_vDepthPsToVsConversion;
	float g_flNearPlane;
	float g_flFarPlane;
	float g_flLightBinnerFarPlane;
	vec2 g_vInvViewportSize;
	vec2 g_vViewportToGBufferRatio;
	vec2 g_vMorphTextureAtlasSize;
	vec4 g_vInvGBufferSize;
	vec2 g_vViewportOffset;
	vec2 g_vViewportSize;
	vec2 g_vRenderTargetSize;
	float g_flFogBlendToBackground;
	float g_flHenyeyGreensteinCoeff;
	vec3 g_vFogColor;
	float g_flNegFogStartOverFogRange;
	float g_flInvFogRange;
	float g_flFogMaxDensity;
	float g_flFogExponent;
	float g_flMod2xIdentity;
	vec2 g_bRoughnessParams;
	float g_bStereoEnabled;
	float g_flStereoCameraIndex;
	vec3 g_vMiddleEyePositionWs;
	float g_flPad2;
	layout(row_major) mat4 g_matWorldToProjectionMultiview[2];
	vec4 g_vCameraPositionWsMultiview[2];
	vec4 g_vFrameBufferCopyInvSizeAndUvScale;
	vec4 g_vCameraAngles;
	vec4 g_vWorldToCameraOffset;
	vec4 g_vWorldToCameraOffsetMultiview[2];
	vec4 g_vPerViewConstantExtraData0;
	vec4 g_vPerViewConstantExtraData1;
	vec4 g_vPerViewConstantExtraData2;
	vec4 g_vPerViewConstantExtraData3;
} ;
layout( binding = 0 ) uniform sampler2D g_tGBufferDepth;
layout( binding = 1 ) uniform sampler2D g_tOutputColor1010102;
layout( binding = 2 ) uniform sampler2D g_tBloom;
layout(std140) uniform _Globals_ {
	vec4 g_vWindStrengthFreqMulHighStrength;
	vec3 g_vWindOffset;
	vec3 g_vWindDir;
	vec3 g_vCameraPosFs;
	vec3 g_vAltFowCameraPosition;
} ;
uniform sampler2D g_tFrameBufferCopyTexture;
uniform sampler2D g_tDepthTexture;
uniform sampler2D g_tGBufferAlbedo;
uniform sampler2D g_tGBufferLightingTerms;
uniform sampler2D g_tGBufferNormalWs;
layout(std140) uniform PerViewLightingConstantBuffer_t {
	vec4 g_vInvLightTextureDims;
	vec4 g_vLightBinCounts;
	vec2 g_vLowResDeferredLightingTextureDim;
	vec2 g_vLowResDeferredLightingTextureInvDim;
	vec3 g_vToolsAmbientLighting;
	float g_flSSAOEnabled;
	vec3 g_vIrradAtlasInvSize;
	float g_flIrradGlobalLightingFactor;
	vec4 g_vGlobalLightingSHRed;
	vec4 g_vGlobalLightingSHGreen;
	vec4 g_vGlobalLightingSHBlue;
	vec3 g_vRayleighScatteringCoeff;
	float g_flMieScatteringEccentricity;
	vec3 g_vMieScatteringCoeff;
	float g_flMieForwardScatteringRatio;
	vec3 g_vSpecularCubeMapScale;
	float g_flDefaultEnvMapIndex;
	vec4 g_vLightCookieSheetSequenceAndSizes;
	vec3 g_vLpvBoxMinCascade0;
	float g_flLpvBrightnessScale;
	vec3 g_vLpvInvBoxDimCascade0;
	vec2 g_vLpvInvCoeffTextureDim;
} ;
layout(std140) uniform PerLayerConstantBuffer_t {
	vec4 g_vWireframeColor;
} ;
uniform sampler2D g_tClouds;
uniform sampler2DShadow g_tShadowDepthTexture;
layout(std140) uniform DotaHeightFogParams_t {
	vec4 g_vHeightFogColor_HeightBias;
	vec4 g_vHeightFogRangeParams;
	vec4 g_vHeightFogDensityParams;
	vec3 g_vFogTexCoordTransform0U;
	vec3 g_vFogTexCoordTransform0V;
	vec3 g_vFogTexCoordTransform1U;
	vec3 g_vFogTexCoordTransform1V;
	vec3 g_vFogTexCoordTransformTotalU;
	vec3 g_vFogTexCoordTransformTotalV;
	vec3 g_vFogLayer1VelocitySpeed;
	vec2 g_vCausticWindSpeedScaleAmplitudeScale;
} ;
uniform sampler2D g_tHeightFogTexture0;
uniform sampler2D g_tHeightFogTexture1;
uniform sampler2D g_tHeightFogTotalOpacity;
uniform sampler2D g_tFlow;
layout(location=0) in vec2 PS_INPUT_gl_vTexCoord;
layout(location=1) in vec3 PS_INPUT_gl_vCameraToFarPlaneDirWs;
layout(location=2) in vec2 PS_INPUT_gl_vFowCoordSs;
layout(location=0) out vec4 PS_OUTPUT_gl_vColor;
const vec2 C_vec2p0d25p = vec2(0.25);
const vec3 C_shpsoq1 = vec3(0.3, 0.59, 0.11);
const float C_0d5 = 0.5;
const float C_0d3 = 0.3;
const vec3 C_ptervi1 = vec3(0.0, 0.0, 0.2);
const vec3 C_imhxe9 = vec3(0.0, 0.0, 1.0);
const float C_0d0 = 0.0;
const float C_1d0 = 1.0;
const vec4 C_xx1m2m1 = vec4(0.0, 0.0, 0.0, 1.0);
void main()
{
	vec4 flLinearDepth = texture(g_tGBufferDepth, PS_INPUT_gl_vTexCoord);
	vec3 H_28t7ha1 = PS_INPUT_gl_vCameraToFarPlaneDirWs * flLinearDepth.xxx;
	vec3 vPositionWs = H_28t7ha1 + g_vCameraPositionWs;
	vec4 H_djikho = texture(g_tOutputColor1010102, PS_INPUT_gl_vTexCoord);
	vec4 H_b1c1ku1 = texture(g_tBloom, PS_INPUT_gl_vTexCoord);
	vec3 H_z1fzbx = H_b1c1ku1.xyz + H_djikho.xyz;
	vec2 H_zss5nr1 = g_vFowWorldSize.zw * vPositionWs.xy;
	vec2 H_jk3gxs = H_zss5nr1 + g_vFowWorldSize.xy;
	vec2 H_t7j7ew1 = H_jk3gxs + g_vFowTexOffsets.xy;
	vec4 fowResult = texture(g_tFow, H_t7j7ew1);
	vec2 H_9ge1qu1 = H_jk3gxs + g_vFowTexOffsets.zw;
	vec4 fowResult1 = texture(g_tFow, H_9ge1qu1);
	vec2 fowResult2 = fowResult.xz + fowResult1.xz;
	vec2 H_nkzjwv1 = H_jk3gxs - g_vFowTexOffsets.xy;
	vec4 fowResult3 = texture(g_tFow, H_nkzjwv1);
	vec2 fowResult4 = fowResult2 + fowResult3.xz;
	vec2 H_fqwnkx1 = H_jk3gxs - g_vFowTexOffsets.zw;
	vec4 fowResult5 = texture(g_tFow, H_fqwnkx1);
	vec2 fowResult6 = fowResult4 + fowResult5.xz;
	vec2 fowResult7 = fowResult6 * C_vec2p0d25p;
	float vGray = dot(H_z1fzbx, C_shpsoq1);
	float vGray1 = pow(vGray, g_flFowGrayHilights);
	vec3 H_5rw442 = vec3(vGray1);
	vec3 vGray2 = max(H_5rw442, C_0d5);
	vec3 vGray3 = g_vFowColor * vGray2;
	vec3 H_tnu4ev = vec3(g_flFowColorFactor);
	vec3 H_4irepp1 = H_tnu4ev * H_z1fzbx;
	vec3 vFullFowColor = H_4irepp1 + vGray3;
	vec3 misc3a = mix(vFullFowColor, H_z1fzbx, fowResult7.x);
	bool H_hob107 = fowResult7.y < C_0d3;
	vec3 H_nbt72a1 = misc3a + C_ptervi1;
	vec3 H_ix08zp1 = fowResult7.yyy * misc3a;
	vec3 H_yxxozf = H_ix08zp1 * C_imhxe9;
	vec3 H_bhw7fx = H_nbt72a1 + H_yxxozf;
	vec3 select = H_hob107 ? misc3a : H_bhw7fx;
	float flDist = distance(vPositionWs, g_vCameraPositionWs);
	float H_j6vk5z = flDist * g_flInvFogRange;
	float param = H_j6vk5z + g_flNegFogStartOverFogRange;
	float misc3a1 = clamp(param, C_0d0, C_1d0);
	float flFog = pow(misc3a1, g_flFogExponent);
	float misc2a = min(g_flFogMaxDensity, flFog);
	float misc3a2 = clamp(misc2a, C_0d0, C_1d0);
	vec3 misc3a3 = mix(select, g_vFogColor, misc3a2);
	vec4 H_rwwpo7 = C_xx1m2m1;
	H_rwwpo7.xyz = misc3a3.xyz;
	PS_OUTPUT_gl_vColor = H_rwwpo7;
}
