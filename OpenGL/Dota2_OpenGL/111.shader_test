[require]
GLSL >= 3.30
GL_ARB_separate_shader_objects
SSO ENABLED

[fragment shader]
#version 330 core
// LunarGOO output
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
layout(std140, binding = 0 ) uniform _Globals_ {
	vec4 g_vInvTextureDim;
} ;
layout( binding = 0 ) uniform sampler2D g_tInputTexture;
layout(std140) uniform PerViewConstantBuffer_t {
	layout(row_major) mat4 g_matWorldToProjection;
	layout(row_major) mat4 g_matProjectionToWorld;
	layout(row_major) mat4 g_matWorldToView;
	layout(row_major) mat4 g_matViewToProjection;
	vec4 g_vInvProjRow3;
	vec4 g_vClipPlane0;
	float g_flToneMapScalarLinear;
	float g_flLightMapScalar;
	float g_flEnvMapScalar;
	float g_flToneMapScalarGamma;
	vec3 g_vCameraPositionWs;
	float g_flViewportMinZ;
	vec3 g_vCameraDirWs;
	float g_flViewportMaxZ;
	vec3 g_vCameraUpDirWs;
	float g_flTime;
	vec3 g_vDepthPsToVsConversion;
	float g_flNearPlane;
	float g_flFarPlane;
	float g_flLightBinnerFarPlane;
	vec2 g_vInvViewportSize;
	vec2 g_vViewportToGBufferRatio;
	vec2 g_vMorphTextureAtlasSize;
	vec4 g_vInvGBufferSize;
	vec2 g_vViewportOffset;
	vec2 g_vViewportSize;
	vec2 g_vRenderTargetSize;
	float g_flFogBlendToBackground;
	float g_flHenyeyGreensteinCoeff;
	vec3 g_vFogColor;
	float g_flNegFogStartOverFogRange;
	float g_flInvFogRange;
	float g_flFogMaxDensity;
	float g_flFogExponent;
	float g_flMod2xIdentity;
	vec2 g_bRoughnessParams;
	float g_bStereoEnabled;
	float g_flStereoCameraIndex;
	vec3 g_vMiddleEyePositionWs;
	float g_flPad2;
	layout(row_major) mat4 g_matWorldToProjectionMultiview[2];
	vec4 g_vCameraPositionWsMultiview[2];
	vec4 g_vFrameBufferCopyInvSizeAndUvScale;
	vec4 g_vCameraAngles;
	vec4 g_vWorldToCameraOffset;
	vec4 g_vWorldToCameraOffsetMultiview[2];
	vec4 g_vPerViewConstantExtraData0;
	vec4 g_vPerViewConstantExtraData1;
	vec4 g_vPerViewConstantExtraData2;
	vec4 g_vPerViewConstantExtraData3;
} ;
layout(std140) uniform PerViewLightingConstantBuffer_t {
	vec4 g_vInvLightTextureDims;
	vec4 g_vLightBinCounts;
	vec2 g_vLowResDeferredLightingTextureDim;
	vec2 g_vLowResDeferredLightingTextureInvDim;
	vec3 g_vToolsAmbientLighting;
	float g_flSSAOEnabled;
	vec3 g_vIrradAtlasInvSize;
	float g_flIrradGlobalLightingFactor;
	vec4 g_vGlobalLightingSHRed;
	vec4 g_vGlobalLightingSHGreen;
	vec4 g_vGlobalLightingSHBlue;
	vec3 g_vRayleighScatteringCoeff;
	float g_flMieScatteringEccentricity;
	vec3 g_vMieScatteringCoeff;
	float g_flMieForwardScatteringRatio;
	vec3 g_vSpecularCubeMapScale;
	float g_flDefaultEnvMapIndex;
	vec4 g_vLightCookieSheetSequenceAndSizes;
	vec3 g_vLpvBoxMinCascade0;
	float g_flLpvBrightnessScale;
	vec3 g_vLpvInvBoxDimCascade0;
	vec2 g_vLpvInvCoeffTextureDim;
} ;
layout(std140) uniform PerLayerConstantBuffer_t {
	vec4 g_vWireframeColor;
} ;
layout(location=0) in vec2 PS_INPUT_gl_vTexCoord;
layout(location=0) out vec4 PS_OUTPUT_gl_vColor;
const float C_0d0 = 0.0;
const ivec2 C_1s6y7w1 = ivec2(0, -1);
const ivec2 C_h7x911 = ivec2(-1, 0);
const ivec2 C_ivec2p0p = ivec2(0);
const ivec2 C_ivec2p1ca0p = ivec2(1, 0);
const ivec2 C_ivec2p0ca1p = ivec2(0, 1);
const float C_1d96321 = 1.96321;
const float C_0d25 = 0.25;
const float C_0d0833333 = 0.0833333;
const vec4 C_vec4p0d2p = vec4(0.2);
const float C_a0d25 = -0.25;
const float C_1d33333 = 1.33333;
const float C_0d666667 = 0.666667;
const ivec2 C_ivec2pa1p = ivec2(-1);
const ivec2 C_cd2kfw = ivec2(1, -1);
const ivec2 C_wk45l6 = ivec2(-1, 1);
const ivec2 C_ivec2p1p = ivec2(1);
const float C_a0d5 = -0.5;
const float C_0d5 = 0.5;
const float C_a1d0 = -1.0;
const vec2 C_a1z03r = vec2(0.0, 0.0);
const vec2 C_vec2pa2d5p = vec2(-2.5);
const vec2 C_vec2p2d5p = vec2(2.5);
const vec2 C_vec2p4d0p = vec2(4.0);
const int C_0 = 0;
const bool C_false = false;
const int C_1 = 1;
void main()
{
	int i;
	bool doneP;
	bool doneN;
	float lumaEndP;
	float lumaEndN;
	vec2 posP;
	vec2 posN;
	float lumaEndN1;
	float lumaEndP1;
	float lumaEndN2;
	float lumaEndP2;
	float lumaEndP3;
	float lumaEndN3;
	float lumaEndP4;
	float lumaEndN4;
	vec4 earlyretval;
	vec2 H_z8if2n1;
	H_z8if2n1.x = g_vInvTextureDim.x;
	vec2 vScreenUv = g_vInvTextureDim.xy * gl_FragCoord.xy;
	vec4 rgbN = textureLodOffset(g_tInputTexture, vScreenUv, C_0d0, C_1s6y7w1);
	vec4 rgbW = textureLodOffset(g_tInputTexture, vScreenUv, C_0d0, C_h7x911);
	vec4 rgbM = textureLodOffset(g_tInputTexture, vScreenUv, C_0d0, C_ivec2p0p);
	vec4 rgbE = textureLodOffset(g_tInputTexture, vScreenUv, C_0d0, C_ivec2p1ca0p);
	vec4 rgbS = textureLodOffset(g_tInputTexture, vScreenUv, C_0d0, C_ivec2p0ca1p);
	float H_90z8am = rgbN.y * C_1d96321;
	float H_9u5tb31 = H_90z8am + rgbN.x;
	float H_e40m2y = C_1d96321 * rgbW.y;
	float H_oco8391 = H_e40m2y + rgbW.x;
	float H_gg6prs1 = C_1d96321 * rgbM.y;
	float H_xfyo5r1 = H_gg6prs1 + rgbM.x;
	float H_cftb601 = C_1d96321 * rgbE.y;
	float H_j1rp641 = H_cftb601 + rgbE.x;
	float H_ac1xjl1 = C_1d96321 * rgbS.y;
	float H_frcefa = H_ac1xjl1 + rgbS.x;
	float rangeMin = min(H_9u5tb31, H_oco8391);
	float rangeMin1 = min(H_frcefa, H_j1rp641);
	float rangeMin2 = min(rangeMin, rangeMin1);
	float rangeMin3 = min(H_xfyo5r1, rangeMin2);
	float rangeMax = max(H_9u5tb31, H_oco8391);
	float rangeMax1 = max(H_frcefa, H_j1rp641);
	float rangeMax2 = max(rangeMax, rangeMax1);
	float rangeMax3 = max(H_xfyo5r1, rangeMax2);
	float rangeAlphaMin = min(rgbN.w, rgbW.w);
	float rangeAlphaMin1 = min(rgbS.w, rgbE.w);
	float rangeAlphaMin2 = min(rangeAlphaMin, rangeAlphaMin1);
	float rangeAlphaMin3 = min(rgbM.w, rangeAlphaMin2);
	float rangeAlphaMax = max(rgbN.w, rgbW.w);
	float rangeAlphaMax1 = max(rgbS.w, rgbE.w);
	float rangeAlphaMax2 = max(rangeAlphaMax, rangeAlphaMax1);
	float rangeAlphaMax3 = max(rgbM.w, rangeAlphaMax2);
	float range = rangeMax3 - rangeMin3;
	float rangeAlpha = rangeAlphaMax3 - rangeAlphaMin3;
	bool bUseAlpha = rangeAlpha > range;
	float select = bUseAlpha ? rangeAlpha : range;
	float select1 = bUseAlpha ? rangeAlphaMax3 : rangeMax3;
	float select2 = bUseAlpha ? rgbS.w : H_frcefa;
	float select3 = bUseAlpha ? rgbE.w : H_j1rp641;
	float select4 = bUseAlpha ? rgbM.w : H_xfyo5r1;
	float select5 = bUseAlpha ? rgbW.w : H_oco8391;
	float select6 = bUseAlpha ? rgbN.w : H_9u5tb31;
	float H_5673gr = select1 * C_0d25;
	float misc2a = max(C_0d0833333, H_5673gr);
	bool H_ebnouo1 = select < misc2a;
	if (H_ebnouo1) {
		earlyretval = rgbM;
	} else {
		vec4 H_h72fu9 = rgbN + rgbW;
		vec4 H_g3ehgq = H_h72fu9 + rgbE;
		vec4 H_imm8zp = H_g3ehgq + rgbS;
		vec4 H_e019i4 = H_imm8zp + rgbM;
		vec4 rgbL = H_e019i4 * C_vec4p0d2p;
		float H_nojo6q = select5 + select6;
		float H_t7e20o1 = H_nojo6q + select3;
		float H_9c5i4a = H_t7e20o1 + select2;
		float lumaL = C_0d25 * H_9c5i4a;
		float H_7twp6d = lumaL - select4;
		float rangeL = abs(H_7twp6d);
		float H_xg56aj = rangeL / select;
		float H_8wr0j9 = H_xg56aj + C_a0d25;
		float blendL = max(C_0d0, H_8wr0j9);
		float blendL1 = blendL * C_1d33333;
		float blendL2 = min(C_0d666667, blendL1);
		vec4 H_xb6yd = vec4(blendL2);
		vec4 rgbNW = textureLodOffset(g_tInputTexture, vScreenUv, C_0d0, C_ivec2pa1p);
		vec4 rgbNE = textureLodOffset(g_tInputTexture, vScreenUv, C_0d0, C_cd2kfw);
		vec4 rgbSW = textureLodOffset(g_tInputTexture, vScreenUv, C_0d0, C_wk45l6);
		vec4 rgbSE = textureLodOffset(g_tInputTexture, vScreenUv, C_0d0, C_ivec2p1p);
		float H_4811gq1 = C_1d96321 * rgbNW.y;
		float H_uqp8l6 = H_4811gq1 + rgbNW.x;
		float H_urr13h = C_1d96321 * rgbNE.y;
		float H_o8cv4p1 = H_urr13h + rgbNE.x;
		float H_995r9n1 = C_1d96321 * rgbSW.y;
		float H_fdq4oz = H_995r9n1 + rgbSW.x;
		float H_fyqedp1 = C_1d96321 * rgbSE.y;
		float H_aibcet1 = H_fyqedp1 + rgbSE.x;
		float select7 = bUseAlpha ? rgbSE.w : H_aibcet1;
		float select8 = bUseAlpha ? rgbSW.w : H_fdq4oz;
		float select9 = bUseAlpha ? rgbNE.w : H_o8cv4p1;
		float selecta = bUseAlpha ? rgbNW.w : H_uqp8l6;
		float H_fsi9re1 = C_0d25 * selecta;
		float H_phwbbt = select6 * C_a0d5;
		float H_kq50es1 = H_fsi9re1 + H_phwbbt;
		float H_vuh654 = C_0d25 * select9;
		float H_w90f3w = H_kq50es1 + H_vuh654;
		float edgeVert = abs(H_w90f3w);
		float H_f235sh = select5 * C_0d5;
		float H_nr3v7h = select4 * C_a1d0;
		float H_x1dpiq = H_f235sh + H_nr3v7h;
		float H_htrn8b1 = C_0d5 * select3;
		float H_42vy63 = H_htrn8b1 + H_x1dpiq;
		float edgeVert1 = abs(H_42vy63);
		float H_bnakiq1 = edgeVert + edgeVert1;
		float H_w5w6v3 = C_0d25 * select8;
		float H_t386uw1 = C_a0d5 * select2;
		float H_un0pew = H_t386uw1 + H_w5w6v3;
		float H_5xgad1 = C_0d25 * select7;
		float H_zap9901 = H_5xgad1 + H_un0pew;
		float edgeVert2 = abs(H_zap9901);
		float edgeVert3 = H_bnakiq1 + edgeVert2;
		float H_sst54x1 = C_a0d5 * select5;
		float H_9cmw9g1 = H_fsi9re1 + H_sst54x1;
		float H_1f96wb1 = H_9cmw9g1 + H_w5w6v3;
		float edgeHorz = abs(H_1f96wb1);
		float H_mcrpu91 = C_0d5 * select6;
		float H_d14eu4 = H_mcrpu91 + H_nr3v7h;
		float H_i46oya1 = C_0d5 * select2;
		float H_8nxvvn1 = H_d14eu4 + H_i46oya1;
		float edgeHorz1 = abs(H_8nxvvn1);
		float H_v4r5k = edgeHorz + edgeHorz1;
		float H_uem6kw1 = C_a0d5 * select3;
		float H_2ic21t1 = H_uem6kw1 + H_vuh654;
		float H_wy10pq1 = H_2ic21t1 + H_5xgad1;
		float edgeHorz2 = abs(H_wy10pq1);
		float edgeHorz3 = H_v4r5k + edgeHorz2;
		bool horzSpan = edgeHorz3 >= edgeVert3;
		float H_2p88nb = horzSpan ? g_vInvTextureDim.y : g_vInvTextureDim.x;
		float lengthSign = C_0d0 - H_2p88nb;
		float lumaN = horzSpan ? select6 : select5;
		float lumaS = horzSpan ? select2 : select3;
		float H_5hecnu1 = lumaN - select4;
		float gradientN = abs(H_5hecnu1);
		float H_i0p9af = lumaS - select4;
		float gradientS = abs(H_i0p9af);
		bool pairN = gradientN >= gradientS;
		float lumaS1 = pairN ? lumaN : lumaS;
		float lumaN1 = lumaS1 + select4;
		float lumaN2 = C_0d5 * lumaN1;
		float gradientN1 = pairN ? gradientN : gradientS;
		float lengthSign1 = pairN ? lengthSign : H_2p88nb;
		float posN1 = C_0d5 * lengthSign1;
		float selectb = horzSpan ? C_0d0 : posN1;
		float H_r31g96 = selectb + vScreenUv.x;
		float selectc = horzSpan ? posN1 : C_0d0;
		float H_ncfp2w = selectc + vScreenUv.y;
		vec2 H_kb41m71 = vec2(H_r31g96, H_ncfp2w);
		float gradientN2 = C_0d25 * gradientN1;
		vec2 H_ktq2a7 = H_z8if2n1;
		H_ktq2a7.y = C_0d0;
		vec2 H_23b4ob1 = C_a1z03r;
		H_23b4ob1.y = g_vInvTextureDim.y;
		vec2 selectd = horzSpan ? H_ktq2a7 : H_23b4ob1;
		vec2 H_thpy3o1 = selectd * C_vec2pa2d5p;
		vec2 posN2 = H_kb41m71 + H_thpy3o1;
		vec2 H_kwgp2a1 = selectd * C_vec2p2d5p;
		vec2 posP1 = H_kb41m71 + H_kwgp2a1;
		vec2 offNP = selectd * C_vec2p4d0p;
		i = C_0;
		doneP = C_false;
		doneN = C_false;
		lumaEndP = lumaN2;
		lumaEndN = lumaN2;
		posP = posP1;
		posN = posN2;
		lumaEndP4 = lumaEndP;
		lumaEndN4 = lumaEndN;
		while (i <= C_1) {
			if (bUseAlpha) {
				lumaEndN1 = lumaEndN;
				if (! doneN) {
					vec4 txt = textureGrad(g_tInputTexture, posN, offNP, offNP);
					lumaEndN1 = txt.w;
				}
				lumaEndP1 = lumaEndP;
				if (! doneP) {
					vec4 txt1 = textureGrad(g_tInputTexture, posP, offNP, offNP);
					lumaEndP1 = txt1.w;
				}
				lumaEndP3 = lumaEndP1;
				lumaEndN3 = lumaEndN1;
			} else {
				lumaEndN2 = lumaEndN;
				if (! doneN) {
					vec4 txt2 = textureGrad(g_tInputTexture, posN, offNP, offNP);
					float H_o35v3w1 = C_1d96321 * txt2.y;
					float H_5op10d1 = H_o35v3w1 + txt2.x;
					lumaEndN2 = H_5op10d1;
				}
				lumaEndP2 = lumaEndP;
				if (! doneP) {
					vec4 txt3 = textureGrad(g_tInputTexture, posP, offNP, offNP);
					float H_73veiz = C_1d96321 * txt3.y;
					float H_sq6e2e1 = H_73veiz + txt3.x;
					lumaEndP2 = H_sq6e2e1;
				}
				lumaEndP3 = lumaEndP2;
				lumaEndN3 = lumaEndN2;
			}
			float H_y08oey = lumaEndN3 - lumaN2;
			float doneN1 = abs(H_y08oey);
			bool H_vtyfv6 = doneN1 >= gradientN2;
			bool doneN2 = doneN || H_vtyfv6;
			float H_c0zzvq1 = lumaEndP3 - lumaN2;
			float doneP1 = abs(H_c0zzvq1);
			bool H_tq2hlw = doneP1 >= gradientN2;
			bool doneP2 = doneP || H_tq2hlw;
			bool H_fnhx1e = doneN2 && doneP2;
			if (H_fnhx1e) {
				lumaEndP4 = lumaEndP3;
				lumaEndN4 = lumaEndN3;
				break;
			}
			vec2 posN3 = posN - offNP;
			vec2 selecte = doneN2 ? posN : posN3;
			vec2 posP2 = offNP + posP;
			vec2 selectf = doneP2 ? posP : posP2;
			int H_o3goq3 = C_1 + i;
			i = H_o3goq3;
			doneP = doneP2;
			doneN = doneN2;
			lumaEndP = lumaEndP3;
			lumaEndN = lumaEndN3;
			posP = selectf;
			posN = selecte;
			lumaEndP4 = lumaEndP;
			lumaEndN4 = lumaEndN;
		}
		float dstN = vScreenUv.x - posN.x;
		float dstN1 = vScreenUv.y - posN.y;
		float selectg = horzSpan ? dstN : dstN1;
		float dstP = posP.x - vScreenUv.x;
		float dstP1 = posP.y - vScreenUv.y;
		float selecth = horzSpan ? dstP : dstP1;
		bool directionN = selectg < selecth;
		float lumaEndN5 = directionN ? lumaEndN4 : lumaEndP4;
		float H_5du7k31 = select4 - lumaN2;
		bool H_0m0bvt1 = H_5du7k31 < C_0d0;
		float H_safque = lumaEndN5 - lumaN2;
		bool H_xg2jtc1 = H_safque < C_0d0;
		bool tmp = H_0m0bvt1 ^^ H_xg2jtc1;
		float lengthSign2 = tmp ? lengthSign1 : C_0d0;
		float spanLength = selectg + selecth;
		float dstN2 = directionN ? selectg : selecth;
		float H_8dxktp = C_a1d0 / spanLength;
		float H_8mzjks1 = H_8dxktp * dstN2;
		float H_gfo0kc1 = C_0d5 + H_8mzjks1;
		float subPixelOffset = H_gfo0kc1 * lengthSign2;
		float rgbF = horzSpan ? C_0d0 : subPixelOffset;
		float H_0sn088 = rgbF + vScreenUv.x;
		float subPixelOffset1 = horzSpan ? subPixelOffset : C_0d0;
		float H_m8mlr3 = subPixelOffset1 + vScreenUv.y;
		vec2 H_i4g1d61 = vec2(H_0sn088, H_m8mlr3);
		vec4 txt4 = textureLod(g_tInputTexture, H_i4g1d61, C_0d0);
		float H_fzqbmr = C_0d0 - blendL2;
		vec4 H_v0wrv2 = vec4(H_fzqbmr);
		vec4 H_3a84qs1 = H_v0wrv2 * txt4;
		vec4 H_4b1o7z = H_xb6yd * rgbL;
		vec4 H_q87t9j = H_4b1o7z + txt4;
		vec4 H_uvyxza = H_3a84qs1 + H_q87t9j;
		earlyretval = H_uvyxza;
	}
	PS_OUTPUT_gl_vColor = earlyretval;
}

