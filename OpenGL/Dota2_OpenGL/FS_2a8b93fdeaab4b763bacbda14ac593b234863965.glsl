#version 330 core
// LunarGOO output
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
layout(std140, binding = 0 ) uniform _Globals_ {
	float g_flBumpStrength;
	float g_flOpacityScale;
	vec3 g_vColorTint;
	vec3 g_vColorTint2;
	float g_flSpecularBloom;
	float g_flSpecularIntensity;
	vec2 g_vTexCoordScale;
} ;
layout( binding = 0 ) uniform sampler2D g_tColor;
layout( binding = 1 ) uniform sampler2D g_tSpecular;
layout( binding = 2 ) uniform sampler2D g_tNormal;
layout(std140) uniform DotaGlobalParams_t {
	vec3 g_vGlobalLightDir;
	vec3 g_vGlobalLightColor;
	float g_flGlobalLightSpecularScale;
	vec3 g_vGlobalLightSpecularDir;
	float g_flGlobalLightSpecularExp;
	vec3 g_vGlobalLightSpecularColor;
	float g_flGlobalLightSpecularIndependence;
	vec3 g_vGlobalLightAmbientDir;
	float g_flGlobalLightAmbientScale1;
	vec3 g_vGlobalLightAmbientColor1;
	float g_flGlobalLightAmbientScale2;
	vec3 g_vGlobalLightAmbientColor2;
	float g_flGlobalLightAmbientScale2Hero;
	vec2 g_vGlobalCloud1Offset;
	vec2 g_vGlobalCloud2Offset;
	vec3 g_vFowColor;
	float g_flGlobalCloudScale;
	float g_flFowDarkness;
	float g_flFowGrayFactor;
	float g_flFowColorFactor;
	float g_flFowGrayHilights;
	vec4 g_vFowWorldSize;
	vec4 g_vFowTexOffsets;
	layout(row_major) mat4 g_matShadowWorldToTexture;
	vec4 g_vInvShadowDepthTextureSize;
	vec3 g_vGlobalLightAmbientColor3;
	float g_flGlobalLightAmbientShadowAmount;
} ;
uniform sampler2D g_tFow;
uniform sampler2D g_tFrameBufferCopyTexture;
uniform sampler2D g_tDepthTexture;
uniform sampler2D g_tGBufferAlbedo;
uniform sampler2D g_tGBufferLightingTerms;
uniform sampler2D g_tGBufferDepth;
uniform sampler2D g_tGBufferNormalWs;
layout(std140) uniform PerViewConstantBuffer_t {
	layout(row_major) mat4 g_matWorldToProjection;
	layout(row_major) mat4 g_matProjectionToWorld;
	layout(row_major) mat4 g_matWorldToView;
	layout(row_major) mat4 g_matViewToProjection;
	vec4 g_vInvProjRow3;
	vec4 g_vClipPlane0;
	float g_flToneMapScalarLinear;
	float g_flLightMapScalar;
	float g_flEnvMapScalar;
	float g_flToneMapScalarGamma;
	vec3 g_vCameraPositionWs;
	float g_flViewportMinZ;
	vec3 g_vCameraDirWs;
	float g_flViewportMaxZ;
	vec3 g_vCameraUpDirWs;
	float g_flTime;
	vec3 g_vDepthPsToVsConversion;
	float g_flNearPlane;
	float g_flFarPlane;
	float g_flLightBinnerFarPlane;
	vec2 g_vInvViewportSize;
	vec2 g_vViewportToGBufferRatio;
	vec2 g_vMorphTextureAtlasSize;
	vec4 g_vInvGBufferSize;
	vec2 g_vViewportOffset;
	vec2 g_vViewportSize;
	vec2 g_vRenderTargetSize;
	float g_flFogBlendToBackground;
	float g_flHenyeyGreensteinCoeff;
	vec3 g_vFogColor;
	float g_flNegFogStartOverFogRange;
	float g_flInvFogRange;
	float g_flFogMaxDensity;
	float g_flFogExponent;
	float g_flMod2xIdentity;
	vec2 g_bRoughnessParams;
	float g_bStereoEnabled;
	float g_flStereoCameraIndex;
	vec3 g_vMiddleEyePositionWs;
	float g_flPad2;
	layout(row_major) mat4 g_matWorldToProjectionMultiview[2];
	vec4 g_vCameraPositionWsMultiview[2];
	vec4 g_vFrameBufferCopyInvSizeAndUvScale;
	vec4 g_vCameraAngles;
	vec4 g_vWorldToCameraOffset;
	vec4 g_vWorldToCameraOffsetMultiview[2];
	vec4 g_vPerViewConstantExtraData0;
	vec4 g_vPerViewConstantExtraData1;
	vec4 g_vPerViewConstantExtraData2;
	vec4 g_vPerViewConstantExtraData3;
} ;
layout(std140) uniform PerViewLightingConstantBuffer_t {
	vec4 g_vInvLightTextureDims;
	vec4 g_vLightBinCounts;
	vec2 g_vLowResDeferredLightingTextureDim;
	vec2 g_vLowResDeferredLightingTextureInvDim;
	vec3 g_vToolsAmbientLighting;
	float g_flSSAOEnabled;
	vec3 g_vIrradAtlasInvSize;
	float g_flIrradGlobalLightingFactor;
	vec4 g_vGlobalLightingSHRed;
	vec4 g_vGlobalLightingSHGreen;
	vec4 g_vGlobalLightingSHBlue;
	vec3 g_vRayleighScatteringCoeff;
	float g_flMieScatteringEccentricity;
	vec3 g_vMieScatteringCoeff;
	float g_flMieForwardScatteringRatio;
	vec3 g_vSpecularCubeMapScale;
	float g_flDefaultEnvMapIndex;
	vec4 g_vLightCookieSheetSequenceAndSizes;
	vec3 g_vLpvBoxMinCascade0;
	float g_flLpvBrightnessScale;
	vec3 g_vLpvInvBoxDimCascade0;
	vec2 g_vLpvInvCoeffTextureDim;
} ;
layout(std140) uniform PerLayerConstantBuffer_t {
	vec4 g_vWireframeColor;
} ;
uniform sampler2D g_tClouds;
uniform sampler2DShadow g_tShadowDepthTexture;
uniform sampler2D g_tTintMask;
layout(location=0) in vec2 PS_INPUT_gl_vBaseTexCoord;
layout(location=1) in vec4 PS_INPUT_gl_vPositionWs_flLinearDepth;
layout(location=2) in vec4 PS_INPUT_gl_vNormalWs_flSpecularAmount;
layout(location=3) in vec4 PS_INPUT_gl_vVertexColor;
layout(location=4) in float PS_INPUT_gl_flClipPlaneDist;
layout(location=5) in vec4 PS_INPUT_gl_vTangentUWs_flTangentVSign;
layout(location=0) out vec4 PS_OUTPUT_gl_vDiffuse;
layout(location=1) out vec4 PS_OUTPUT_gl_vNormal;
layout(location=2) out vec4 PS_OUTPUT_gl_vSpecular;
const vec2 C_vec2p2d0p = vec2(2.0);
const vec2 C_vec2pa1d0p = vec2(-1.0);
const float C_1d0 = 1.0;
const float C_0d0 = 0.0;
const vec3 C_vec3p0d5p = vec3(0.5);
void main()
{
	vec3 vGeometricNormalWs = normalize(PS_INPUT_gl_vNormalWs_flSpecularAmount.xyz);
	vec3 vTangentUWs = normalize(PS_INPUT_gl_vTangentUWs_flTangentVSign.xyz);
	vec3 vTangentVWs = cross(vGeometricNormalWs, PS_INPUT_gl_vTangentUWs_flTangentVSign.xyz);
	vec3 vTangentVWs1 = normalize(vTangentVWs);
	vec3 vTangentVWs2 = PS_INPUT_gl_vTangentUWs_flTangentVSign.www * vTangentVWs1;
	vec4 vDiffuse = texture(g_tColor, PS_INPUT_gl_vBaseTexCoord);
	vec3 H_ysarle = g_vColorTint * vDiffuse.xyz;
	vec4 H_xgyfl71 = vDiffuse;
	H_xgyfl71.xyz = H_ysarle.xyz;
	vec4 vDiffuse1 = H_xgyfl71 * PS_INPUT_gl_vVertexColor;
	vec4 vSpecular = texture(g_tSpecular, PS_INPUT_gl_vBaseTexCoord);
	float H_i0xhec = g_flSpecularIntensity * vSpecular.x;
	float H_2q4yo51 = g_flSpecularBloom * vSpecular.z;
	vec4 vNormalTexel = texture(g_tNormal, PS_INPUT_gl_vBaseTexCoord);
	vec2 H_qgi6bb = vNormalTexel.wy * C_vec2p2d0p;
	vec2 H_mblhlu1 = H_qgi6bb + C_vec2pa1d0p;
	float vNormalTs = dot(H_mblhlu1, H_mblhlu1);
	float param = C_1d0 - vNormalTs;
	float misc3a = clamp(param, C_0d0, C_1d0);
	float vNormalTs1 = sqrt(misc3a);
	float H_vj1l3j = C_0d0 - H_mblhlu1.y;
	vec2 H_x1he8s = vec2(g_flBumpStrength);
	vec2 H_5p8e11 = vec2(H_mblhlu1.x, H_vj1l3j);
	vec2 H_q35u7b1 = H_5p8e11 * H_x1he8s;
	vec3 H_38ejs41 = vec3(H_q35u7b1.x, H_q35u7b1.y, vNormalTs1);
	vec3 vNormalTs2 = normalize(H_38ejs41);
	vec3 vVectorWs = vNormalTs2.xxx * vTangentUWs;
	vec3 H_35021c1 = vNormalTs2.yyy * vTangentVWs2;
	vec3 vVectorWs1 = H_35021c1 + vVectorWs;
	vec3 H_9wf1l91 = vGeometricNormalWs * vNormalTs2.zzz;
	vec3 vVectorWs2 = H_9wf1l91 + vVectorWs1;
	vec3 H_qw6t8a1 = normalize(vVectorWs2);
	vec3 H_od0vzl1 = H_qw6t8a1 * C_vec3p0d5p;
	vec3 H_dhway41 = C_vec3p0d5p + H_od0vzl1;
	float flTranslucency = PS_INPUT_gl_vVertexColor.w * vDiffuse1.w;
	float flTranslucency1 = flTranslucency * g_flOpacityScale;
	vec4 H_6655va1 = vec4(vDiffuse1.x, vDiffuse1.y, vDiffuse1.z, flTranslucency1);
	vec4 H_4a9pvk = vec4(H_i0xhec, vSpecular.y, H_2q4yo51, flTranslucency1);
	float H_n79hkq = g_flOpacityScale * vNormalTexel.x;
	vec4 H_f3kc801 = vec4(H_dhway41.x, H_dhway41.y, H_dhway41.z, H_n79hkq);
	PS_OUTPUT_gl_vDiffuse = H_6655va1;
	PS_OUTPUT_gl_vNormal = H_f3kc801;
	PS_OUTPUT_gl_vSpecular = H_4a9pvk;
}
