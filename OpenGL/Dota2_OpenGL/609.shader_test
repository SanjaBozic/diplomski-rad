[require]
GLSL >= 3.30
GL_ARB_separate_shader_objects
SSO ENABLED

[fragment shader]
#version 330 core
// LunarGOO output
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
layout( binding = 0 ) uniform sampler2D g_tInputTexture;
layout(std140) uniform PerViewConstantBuffer_t {
	layout(row_major) mat4 g_matWorldToProjection;
	layout(row_major) mat4 g_matProjectionToWorld;
	layout(row_major) mat4 g_matWorldToView;
	layout(row_major) mat4 g_matViewToProjection;
	vec4 g_vInvProjRow3;
	vec4 g_vClipPlane0;
	float g_flToneMapScalarLinear;
	float g_flLightMapScalar;
	float g_flEnvMapScalar;
	float g_flToneMapScalarGamma;
	vec3 g_vCameraPositionWs;
	float g_flViewportMinZ;
	vec3 g_vCameraDirWs;
	float g_flViewportMaxZ;
	vec3 g_vCameraUpDirWs;
	float g_flTime;
	vec3 g_vDepthPsToVsConversion;
	float g_flNearPlane;
	float g_flFarPlane;
	float g_flLightBinnerFarPlane;
	vec2 g_vInvViewportSize;
	vec2 g_vViewportToGBufferRatio;
	vec2 g_vMorphTextureAtlasSize;
	vec4 g_vInvGBufferSize;
	vec2 g_vViewportOffset;
	vec2 g_vViewportSize;
	vec2 g_vRenderTargetSize;
	float g_flFogBlendToBackground;
	float g_flHenyeyGreensteinCoeff;
	vec3 g_vFogColor;
	float g_flNegFogStartOverFogRange;
	float g_flInvFogRange;
	float g_flFogMaxDensity;
	float g_flFogExponent;
	float g_flMod2xIdentity;
	vec2 g_bRoughnessParams;
	float g_bStereoEnabled;
	float g_flStereoCameraIndex;
	vec3 g_vMiddleEyePositionWs;
	float g_flPad2;
	layout(row_major) mat4 g_matWorldToProjectionMultiview[2];
	vec4 g_vCameraPositionWsMultiview[2];
	vec4 g_vFrameBufferCopyInvSizeAndUvScale;
	vec4 g_vCameraAngles;
	vec4 g_vWorldToCameraOffset;
	vec4 g_vWorldToCameraOffsetMultiview[2];
	vec4 g_vPerViewConstantExtraData0;
	vec4 g_vPerViewConstantExtraData1;
	vec4 g_vPerViewConstantExtraData2;
	vec4 g_vPerViewConstantExtraData3;
} ;
layout(std140) uniform PerViewLightingConstantBuffer_t {
	vec4 g_vInvLightTextureDims;
	vec4 g_vLightBinCounts;
	vec2 g_vLowResDeferredLightingTextureDim;
	vec2 g_vLowResDeferredLightingTextureInvDim;
	vec3 g_vToolsAmbientLighting;
	float g_flSSAOEnabled;
	vec3 g_vIrradAtlasInvSize;
	float g_flIrradGlobalLightingFactor;
	vec4 g_vGlobalLightingSHRed;
	vec4 g_vGlobalLightingSHGreen;
	vec4 g_vGlobalLightingSHBlue;
	vec3 g_vRayleighScatteringCoeff;
	float g_flMieScatteringEccentricity;
	vec3 g_vMieScatteringCoeff;
	float g_flMieForwardScatteringRatio;
	vec3 g_vSpecularCubeMapScale;
	float g_flDefaultEnvMapIndex;
	vec4 g_vLightCookieSheetSequenceAndSizes;
	vec3 g_vLpvBoxMinCascade0;
	float g_flLpvBrightnessScale;
	vec3 g_vLpvInvBoxDimCascade0;
	vec2 g_vLpvInvCoeffTextureDim;
} ;
layout(std140) uniform PerLayerConstantBuffer_t {
	vec4 g_vWireframeColor;
} ;
layout(location=0) in vec2 PS_INPUT_gl_m_vInputTexCoords;
layout(location=0) out vec4 PS_OUTPUT_gl_m_vColor;
const int C_0 = 0;
const vec2 C_vec2p1d0p = vec2(1.0);
const vec2 C_vec2pa0d5p = vec2(-0.5);
const float C_a0d166667 = -0.166667;
const float C_0d5 = 0.5;
const float C_a0d5 = -0.5;
const float C_0d166667 = 0.166667;
const float C_a1d0 = -1.0;
const float C_0d666667 = 0.666667;
const vec2 C_vec2pa1d0p = vec2(-1.0);
const vec2 C_vec2p0d5p = vec2(0.5);
const float C_0d0 = 0.0;
void main()
{
	ivec2 txtQ = textureSize(g_tInputTexture, C_0);
	vec2 param = vec2(txtQ);
	vec2 rec_nrCP = C_vec2p1d0p / param;
	vec2 H_aici5l = PS_INPUT_gl_m_vInputTexCoords * param;
	vec2 coord_hg = H_aici5l + C_vec2pa0d5p;
	vec2 index = floor(coord_hg);
	vec2 H_hyea1o = coord_hg - index;
	float H_1d89371 = H_hyea1o.x * H_hyea1o.x;
	float H_x0636x1 = H_1d89371 * H_hyea1o.x;
	float product = H_x0636x1 * C_a0d166667;
	float product1 = H_1d89371 * C_0d5;
	float dotProduct = product + product1;
	float product2 = H_hyea1o.x * C_a0d5;
	float dotProduct1 = dotProduct + product2;
	float dotProduct2 = dotProduct1 + C_0d166667;
	float product3 = C_0d5 * H_x0636x1;
	float product4 = H_1d89371 * C_a1d0;
	float dotProduct3 = product3 + product4;
	float dotProduct4 = dotProduct3 + C_0d666667;
	float product5 = C_a0d5 * H_x0636x1;
	float dotProduct5 = product1 + product5;
	float product6 = C_0d5 * H_hyea1o.x;
	float dotProduct6 = dotProduct5 + product6;
	float dotProduct7 = C_0d166667 + dotProduct6;
	float product7 = C_0d166667 * H_x0636x1;
	float H_7yqkgo1 = H_hyea1o.y * H_hyea1o.y;
	float H_4wdzzc1 = H_7yqkgo1 * H_hyea1o.y;
	float product8 = C_a0d166667 * H_4wdzzc1;
	float product9 = C_0d5 * H_7yqkgo1;
	float dotProduct8 = product8 + product9;
	float producta = C_a0d5 * H_hyea1o.y;
	float dotProduct9 = dotProduct8 + producta;
	float dotProducta = C_0d166667 + dotProduct9;
	float productb = C_0d5 * H_4wdzzc1;
	float productc = C_a1d0 * H_7yqkgo1;
	float dotProductb = productb + productc;
	float dotProductc = C_0d666667 + dotProductb;
	float productd = C_a0d5 * H_4wdzzc1;
	float dotProductd = product9 + productd;
	float producte = C_0d5 * H_hyea1o.y;
	float dotProducte = dotProductd + producte;
	float dotProductf = C_0d166667 + dotProducte;
	float productf = C_0d166667 * H_4wdzzc1;
	vec2 H_ddzful1 = vec2(dotProduct2, dotProducta);
	vec2 H_517brw = vec2(dotProduct4, dotProductc);
	vec2 H_hld6i6 = vec2(dotProduct7, dotProductf);
	vec2 H_jes2sy = vec2(product7, productf);
	vec2 H_a77qvn1 = H_517brw + H_ddzful1;
	vec2 H_tbiy7c1 = H_hld6i6 + H_jes2sy;
	vec2 H_p8kuo21 = H_517brw / H_a77qvn1;
	vec2 H_nadiza = H_p8kuo21 + C_vec2pa1d0p;
	vec2 H_3cv9at = H_jes2sy / H_tbiy7c1;
	vec2 H_807vhp = C_vec2p1d0p + H_3cv9at;
	vec2 coord = H_nadiza + index;
	vec2 H_9ugigv = vec2(H_807vhp.x, H_nadiza.y);
	vec2 coord1 = H_9ugigv + index;
	vec2 H_1sykds1 = vec2(H_nadiza.x, H_807vhp.y);
	vec2 coord2 = H_1sykds1 + index;
	vec2 coord3 = H_807vhp + index;
	vec2 H_85rmc51 = coord + C_vec2p0d5p;
	vec2 coord4 = H_85rmc51 * rec_nrCP;
	vec2 H_rim597 = C_vec2p0d5p + coord1;
	vec2 coord5 = H_rim597 * rec_nrCP;
	vec2 H_q785j7 = C_vec2p0d5p + coord2;
	vec2 coord6 = H_q785j7 * rec_nrCP;
	vec2 H_pwt4t7 = C_vec2p0d5p + coord3;
	vec2 coord7 = H_pwt4t7 * rec_nrCP;
	vec4 tex = textureLod(g_tInputTexture, coord4, C_0d0);
	vec4 tex1 = textureLod(g_tInputTexture, coord5, C_0d0);
	vec4 tex2 = textureLod(g_tInputTexture, coord6, C_0d0);
	vec4 tex3 = textureLod(g_tInputTexture, coord7, C_0d0);
	vec4 tex4 = mix(tex2, tex, H_a77qvn1.y);
	vec4 tex5 = mix(tex3, tex1, H_a77qvn1.y);
	vec4 misc3a = mix(tex5, tex4, H_a77qvn1.x);
	PS_OUTPUT_gl_m_vColor = misc3a;
}

