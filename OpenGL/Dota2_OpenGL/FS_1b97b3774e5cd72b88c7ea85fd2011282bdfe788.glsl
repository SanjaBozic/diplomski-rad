#version 330 core
// LunarGOO output
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
layout( binding = 3 ) uniform sampler2D g_tSsaoBuffer;
layout(std140, binding = 1 ) uniform _Globals_ {
	vec4 g_vInvSsaoTextureSize;
	float g_flSSAOBias;
	float g_flSampleRadius;
	vec4 g_vProjToScreenScaleBias;
	float g_flDepthDeltaScale;
} ;
layout( binding = 0 ) uniform sampler2D g_tGBufferNormalWs;
layout( binding = 1 ) uniform sampler2D g_tGBufferDepth;
layout(std140, binding = 0 ) uniform PerViewConstantBuffer_t {
	layout(row_major) mat4 g_matWorldToProjection;
	layout(row_major) mat4 g_matProjectionToWorld;
	layout(row_major) mat4 g_matWorldToView;
	layout(row_major) mat4 g_matViewToProjection;
	vec4 g_vInvProjRow3;
	vec4 g_vClipPlane0;
	float g_flToneMapScalarLinear;
	float g_flLightMapScalar;
	float g_flEnvMapScalar;
	float g_flToneMapScalarGamma;
	vec3 g_vCameraPositionWs;
	float g_flViewportMinZ;
	vec3 g_vCameraDirWs;
	float g_flViewportMaxZ;
	vec3 g_vCameraUpDirWs;
	float g_flTime;
	vec3 g_vDepthPsToVsConversion;
	float g_flNearPlane;
	float g_flFarPlane;
	float g_flLightBinnerFarPlane;
	vec2 g_vInvViewportSize;
	vec2 g_vViewportToGBufferRatio;
	vec2 g_vMorphTextureAtlasSize;
	vec4 g_vInvGBufferSize;
	vec2 g_vViewportOffset;
	vec2 g_vViewportSize;
	vec2 g_vRenderTargetSize;
	float g_flFogBlendToBackground;
	float g_flHenyeyGreensteinCoeff;
	vec3 g_vFogColor;
	float g_flNegFogStartOverFogRange;
	float g_flInvFogRange;
	float g_flFogMaxDensity;
	float g_flFogExponent;
	float g_flMod2xIdentity;
	vec2 g_bRoughnessParams;
	float g_bStereoEnabled;
	float g_flStereoCameraIndex;
	vec3 g_vMiddleEyePositionWs;
	float g_flPad2;
	layout(row_major) mat4 g_matWorldToProjectionMultiview[2];
	vec4 g_vCameraPositionWsMultiview[2];
	vec4 g_vFrameBufferCopyInvSizeAndUvScale;
	vec4 g_vCameraAngles;
	vec4 g_vWorldToCameraOffset;
	vec4 g_vWorldToCameraOffsetMultiview[2];
	vec4 g_vPerViewConstantExtraData0;
	vec4 g_vPerViewConstantExtraData1;
	vec4 g_vPerViewConstantExtraData2;
	vec4 g_vPerViewConstantExtraData3;
} ;
layout( binding = 2 ) uniform sampler2D g_tNoise;
layout(std140) uniform DotaGlobalParams_t {
	vec3 g_vGlobalLightDir;
	vec3 g_vGlobalLightColor;
	float g_flGlobalLightSpecularScale;
	vec3 g_vGlobalLightSpecularDir;
	float g_flGlobalLightSpecularExp;
	vec3 g_vGlobalLightSpecularColor;
	float g_flGlobalLightSpecularIndependence;
	vec3 g_vGlobalLightAmbientDir;
	float g_flGlobalLightAmbientScale1;
	vec3 g_vGlobalLightAmbientColor1;
	float g_flGlobalLightAmbientScale2;
	vec3 g_vGlobalLightAmbientColor2;
	float g_flGlobalLightAmbientScale2Hero;
	vec2 g_vGlobalCloud1Offset;
	vec2 g_vGlobalCloud2Offset;
	vec3 g_vFowColor;
	float g_flGlobalCloudScale;
	float g_flFowDarkness;
	float g_flFowGrayFactor;
	float g_flFowColorFactor;
	float g_flFowGrayHilights;
	vec4 g_vFowWorldSize;
	vec4 g_vFowTexOffsets;
	layout(row_major) mat4 g_matShadowWorldToTexture;
	vec4 g_vInvShadowDepthTextureSize;
	vec3 g_vGlobalLightAmbientColor3;
	float g_flGlobalLightAmbientShadowAmount;
} ;
uniform sampler2D g_tFow;
uniform sampler2D g_tFrameBufferCopyTexture;
uniform sampler2D g_tDepthTexture;
uniform sampler2D g_tGBufferAlbedo;
uniform sampler2D g_tGBufferLightingTerms;
layout(std140) uniform PerViewLightingConstantBuffer_t {
	vec4 g_vInvLightTextureDims;
	vec4 g_vLightBinCounts;
	vec2 g_vLowResDeferredLightingTextureDim;
	vec2 g_vLowResDeferredLightingTextureInvDim;
	vec3 g_vToolsAmbientLighting;
	float g_flSSAOEnabled;
	vec3 g_vIrradAtlasInvSize;
	float g_flIrradGlobalLightingFactor;
	vec4 g_vGlobalLightingSHRed;
	vec4 g_vGlobalLightingSHGreen;
	vec4 g_vGlobalLightingSHBlue;
	vec3 g_vRayleighScatteringCoeff;
	float g_flMieScatteringEccentricity;
	vec3 g_vMieScatteringCoeff;
	float g_flMieForwardScatteringRatio;
	vec3 g_vSpecularCubeMapScale;
	float g_flDefaultEnvMapIndex;
	vec4 g_vLightCookieSheetSequenceAndSizes;
	vec3 g_vLpvBoxMinCascade0;
	float g_flLpvBrightnessScale;
	vec3 g_vLpvInvBoxDimCascade0;
	vec2 g_vLpvInvCoeffTextureDim;
} ;
layout(std140) uniform PerLayerConstantBuffer_t {
	vec4 g_vWireframeColor;
} ;
uniform sampler2D g_tSsao;
layout(location=0) in vec2 PS_INPUT_gl_vTexCoord;
layout(location=1) in vec3 PS_INPUT_gl_vCameraToFarPlaneDirWs;
layout(location=0) out vec4 PS_OUTPUT_gl_vColor;
const vec3 C_z9d0q31[16] = vec3[16](vec3(0.615195, 0.099185, 0.468574), vec3(-0.246664, 0.495551, 0.636662), vec3(-0.302699, 0.197356, 0.928992), vec3(0.329761, -0.243882, 0.453554), vec3(0.228839, 0.289674, 0.13315), vec3(-0.221339, -0.148409, 0.131756), vec3(-0.457569, -0.666197, 0.229464), vec3(-0.073882, 0.055014, -0.009701), vec3(-0.038274, -0.039986, 0.009818), vec3(0.745164, 0.323719, -0.429083), vec3(-0.015386, 0.267425, -0.066036), vec3(-0.096176, -0.522937, -0.250845), vec3(0.489685, -0.464403, -0.14924), vec3(-0.131151, 0.139137, -0.70088), vec3(-0.362332, -0.100502, -0.306237), vec3(0.293372, -0.170633, -0.661786));
const vec2 C_vec2pa0d5p = vec2(-0.5);
const float C_0d0 = 0.0;
const vec3 C_vec3pa0d5p = vec3(-0.5);
const vec3 C_vec3p2d0p = vec3(2.0);
const vec2 C_vec2p0d25p = vec2(0.25);
const vec4 C_vec4p2d0p = vec4(2.0);
const vec4 C_vec4pa1d0p = vec4(-1.0);
const int C_0 = 0;
const int C_1 = 1;
const int C_2 = 2;
const int C_3 = 3;
const float C_1d0 = 1.0;
const vec2 C_86o5yl1 = vec2(0.996109, 0.00389105);
const vec4 C_cvjbkm = vec4(-0.00152588);
const vec4 C_727tkr1 = vec4(0.0625);
const float C_65535d0 = 65535.0;
const float C_0d00390625 = 0.00390625;
const float C_256d0 = 256.0;
const float C_255d0 = 255.0;
const vec2 C_vec2p7d0p = vec2(7.0);
const vec2 C_vec2p8d0p = vec2(8.0);
const float C_0d0627451 = 0.0627451;
const float C_0d00392157 = 0.00392157;
void main()
{
	int s;
	float flTotalOcclusion;
	vec2 H_czymo61 = gl_FragCoord.xy + C_vec2pa0d5p;
	vec4 vNormalWs = textureLod(g_tGBufferNormalWs, PS_INPUT_gl_vTexCoord, C_0d0);
	vec3 H_j6zc56 = vNormalWs.xyz + C_vec3pa0d5p;
	vec3 H_by3gme1 = H_j6zc56 * C_vec3p2d0p;
	vec4 flLinearDepth = textureLod(g_tGBufferDepth, PS_INPUT_gl_vTexCoord, C_0d0);
	vec3 H_28t7ha1 = PS_INPUT_gl_vCameraToFarPlaneDirWs * flLinearDepth.xxx;
	vec3 vPositionWs = H_28t7ha1 + g_vCameraPositionWs;
	vec2 H_8vr2bq1 = H_czymo61 * C_vec2p0d25p;
	vec4 vReflectPlane = texture(g_tNoise, H_8vr2bq1);
	vec4 H_gri1481 = vReflectPlane * C_vec4p2d0p;
	vec4 H_bspbgs = H_gri1481 + C_vec4pa1d0p;
	vec4 vReflectPlane1 = normalize(H_bspbgs);
	vec3 H_8zwn0s1 = vec3(g_flSSAOBias);
	vec3 H_851nn41 = H_8zwn0s1 * H_by3gme1;
	vec3 vScenePositionWs = H_851nn41 + vPositionWs;
	vec3 H_ue8iub = vec3(g_flFarPlane);
	vec3 g_vCameraDirWsDivFarZ = g_vCameraDirWs / H_ue8iub;
	float g_vEyeVector = dot(g_vCameraDirWsDivFarZ, g_vCameraPositionWs);
	vec3 H_t3i7lr = vec3(g_flSampleRadius);
	vec3 H_vvpk1a1 = H_t3i7lr * g_vCameraDirWsDivFarZ;
	float vWorldToViewZ = dot(g_vCameraDirWsDivFarZ, vScenePositionWs);
	float H_u8jl1a = vWorldToViewZ - g_vEyeVector;
	vec4 H_opn1uf = vec4(H_vvpk1a1.x, H_vvpk1a1.y, H_vvpk1a1.z, H_u8jl1a);
	float product = g_matWorldToProjection[0].x * g_vProjToScreenScaleBias.x;
	float product1 = g_matWorldToProjection[3].x * g_vProjToScreenScaleBias.z;
	float dotProduct = product + product1;
	float product2 = g_matWorldToProjection[0].y * g_vProjToScreenScaleBias.x;
	float product3 = g_matWorldToProjection[3].y * g_vProjToScreenScaleBias.z;
	float dotProduct1 = product2 + product3;
	float product4 = g_matWorldToProjection[0].z * g_vProjToScreenScaleBias.x;
	float product5 = g_matWorldToProjection[3].z * g_vProjToScreenScaleBias.z;
	float dotProduct2 = product4 + product5;
	float product6 = g_matWorldToProjection[0].w * g_vProjToScreenScaleBias.x;
	float product7 = g_matWorldToProjection[3].w * g_vProjToScreenScaleBias.z;
	float dotProduct3 = product6 + product7;
	float product8 = g_matWorldToProjection[1].x * g_vProjToScreenScaleBias.y;
	float product9 = g_matWorldToProjection[3].x * g_vProjToScreenScaleBias.w;
	float dotProduct4 = product8 + product9;
	float producta = g_matWorldToProjection[1].y * g_vProjToScreenScaleBias.y;
	float productb = g_matWorldToProjection[3].y * g_vProjToScreenScaleBias.w;
	float dotProduct5 = producta + productb;
	float productc = g_matWorldToProjection[1].z * g_vProjToScreenScaleBias.y;
	float productd = g_matWorldToProjection[3].z * g_vProjToScreenScaleBias.w;
	float dotProduct6 = productc + productd;
	float producte = g_matWorldToProjection[1].w * g_vProjToScreenScaleBias.y;
	float productf = g_matWorldToProjection[3].w * g_vProjToScreenScaleBias.w;
	float dotProduct7 = producte + productf;
	vec3 vCameraRelativePos = g_vWorldToCameraOffset.xyz + vScenePositionWs;
	vec3 H_6egikc1 = vec3(dotProduct, dotProduct1, dotProduct2);
	float vWorldToScreen = dot(H_6egikc1, vCameraRelativePos);
	float H_8fpdho = dotProduct3 + vWorldToScreen;
	vec3 H_upr7kk = vec3(dotProduct4, dotProduct5, dotProduct6);
	float vWorldToScreen1 = dot(H_upr7kk, vCameraRelativePos);
	float H_v5hekt1 = dotProduct7 + vWorldToScreen1;
	float vWorldToScreen2 = dot(g_matWorldToProjection[3].xyz, vCameraRelativePos);
	float H_vfzils1 = g_matWorldToProjection[3].w + vWorldToScreen2;
	vec3 H_yv0ndn1 = H_6egikc1 * H_t3i7lr;
	vec4 H_avkg5x = vec4(H_yv0ndn1.x, H_yv0ndn1.y, H_yv0ndn1.z, H_8fpdho);
	vec3 H_q6gfej1 = H_t3i7lr * H_upr7kk;
	vec4 H_1mjgg81 = vec4(H_q6gfej1.x, H_q6gfej1.y, H_q6gfej1.z, H_v5hekt1);
	vec3 H_tbudtr1 = H_t3i7lr * g_matWorldToProjection[3].xyz;
	vec4 H_oa4ne8 = vec4(H_tbudtr1.x, H_tbudtr1.y, H_tbudtr1.z, H_vfzils1);
	s = C_0;
	flTotalOcclusion = C_0d0;
	for ( ; s <= 15; s += 4) {
		int H_vy1cex = s | C_1;
		int H_unnbox = s | C_2;
		int H_tc9byx = s | C_3;
		vec3 vSampleDirWs = reflect(C_z9d0q31[s], vReflectPlane1.xyz);
		float misc2a = dot(vSampleDirWs, H_by3gme1);
		bool H_idtyjc = misc2a < C_0d0;
		vec3 vSampleDirWs1 = reflect(vSampleDirWs, H_by3gme1);
		vec3 select = H_idtyjc ? vSampleDirWs1 : vSampleDirWs;
		vec4 H_yb8t57 = vec4(select.x, select.y, select.z, C_1d0);
		float vLinearComparisonDepth = dot(H_opn1uf, H_yb8t57);
		float vSamplePositionPs = dot(H_yb8t57, H_avkg5x);
		float vSamplePositionPs1 = dot(H_yb8t57, H_1mjgg81);
		float vSamplePositionPs2 = dot(H_yb8t57, H_oa4ne8);
		vec2 H_ydcfql = vec2(vSamplePositionPs2);
		vec2 H_5ejyya1 = vec2(vSamplePositionPs, vSamplePositionPs1);
		vec2 H_nc81cp1 = H_5ejyya1 / H_ydcfql;
		vec4 vEncodedDepths = texture(g_tSsaoBuffer, H_nc81cp1);
		float misc2a1 = dot(vEncodedDepths.xy, C_86o5yl1);
		vec3 vSampleDirWs2 = reflect(C_z9d0q31[H_vy1cex], vReflectPlane1.xyz);
		float misc2a2 = dot(vSampleDirWs2, H_by3gme1);
		bool H_c4pwgx1 = misc2a2 < C_0d0;
		vec3 vSampleDirWs3 = reflect(vSampleDirWs2, H_by3gme1);
		vec3 select1 = H_c4pwgx1 ? vSampleDirWs3 : vSampleDirWs2;
		vec4 H_30v0kv = vec4(select1.x, select1.y, select1.z, C_1d0);
		float vLinearComparisonDepth1 = dot(H_opn1uf, H_30v0kv);
		float vSamplePositionPs3 = dot(H_30v0kv, H_avkg5x);
		float vSamplePositionPs4 = dot(H_30v0kv, H_1mjgg81);
		float vSamplePositionPs5 = dot(H_30v0kv, H_oa4ne8);
		vec2 H_9o8g9l1 = vec2(vSamplePositionPs5);
		vec2 H_1kgied = vec2(vSamplePositionPs3, vSamplePositionPs4);
		vec2 H_st28d41 = H_1kgied / H_9o8g9l1;
		vec4 vEncodedDepths1 = texture(g_tSsaoBuffer, H_st28d41);
		float misc2a3 = dot(vEncodedDepths1.xy, C_86o5yl1);
		vec3 vSampleDirWs4 = reflect(C_z9d0q31[H_unnbox], vReflectPlane1.xyz);
		float misc2a4 = dot(vSampleDirWs4, H_by3gme1);
		bool H_61as7r = misc2a4 < C_0d0;
		vec3 vSampleDirWs5 = reflect(vSampleDirWs4, H_by3gme1);
		vec3 select2 = H_61as7r ? vSampleDirWs5 : vSampleDirWs4;
		vec4 H_8hhwuf1 = vec4(select2.x, select2.y, select2.z, C_1d0);
		float vLinearComparisonDepth2 = dot(H_opn1uf, H_8hhwuf1);
		float vSamplePositionPs6 = dot(H_8hhwuf1, H_avkg5x);
		float vSamplePositionPs7 = dot(H_8hhwuf1, H_1mjgg81);
		float vSamplePositionPs8 = dot(H_8hhwuf1, H_oa4ne8);
		vec2 H_cti8qb = vec2(vSamplePositionPs8);
		vec2 H_njxzkl1 = vec2(vSamplePositionPs6, vSamplePositionPs7);
		vec2 H_jiprxk = H_njxzkl1 / H_cti8qb;
		vec4 vEncodedDepths2 = texture(g_tSsaoBuffer, H_jiprxk);
		float misc2a5 = dot(vEncodedDepths2.xy, C_86o5yl1);
		vec3 vSampleDirWs6 = reflect(C_z9d0q31[H_tc9byx], vReflectPlane1.xyz);
		float misc2a6 = dot(vSampleDirWs6, H_by3gme1);
		bool H_47lovu = misc2a6 < C_0d0;
		vec3 vSampleDirWs7 = reflect(vSampleDirWs6, H_by3gme1);
		vec3 select3 = H_47lovu ? vSampleDirWs7 : vSampleDirWs6;
		vec4 H_hreqsn = vec4(select3.x, select3.y, select3.z, C_1d0);
		float vLinearComparisonDepth3 = dot(H_opn1uf, H_hreqsn);
		vec4 H_kskizz = vec4(vLinearComparisonDepth, vLinearComparisonDepth1, vLinearComparisonDepth2, vLinearComparisonDepth3);
		float vSamplePositionPs9 = dot(H_hreqsn, H_avkg5x);
		float vSamplePositionPsa = dot(H_hreqsn, H_1mjgg81);
		float vSamplePositionPsb = dot(H_hreqsn, H_oa4ne8);
		vec2 H_ydvezc = vec2(vSamplePositionPsb);
		vec2 H_uiwae6 = vec2(vSamplePositionPs9, vSamplePositionPsa);
		vec2 H_yfuvc11 = H_uiwae6 / H_ydvezc;
		vec4 vEncodedDepths3 = texture(g_tSsaoBuffer, H_yfuvc11);
		float misc2a7 = dot(vEncodedDepths3.xy, C_86o5yl1);
		vec4 H_0nx2cw1 = vec4(misc2a1, misc2a3, misc2a5, misc2a7);
		vec4 vDepthDelta = H_kskizz - H_0nx2cw1;
		vec4 vDepthDelta1 = vDepthDelta + C_cvjbkm;
		bool H_zse4w8 = vDepthDelta1.x < C_0d0;
		float H_oddle8 = g_flDepthDeltaScale * vDepthDelta1.x;
		float param = C_1d0 - H_oddle8;
		float misc3a = clamp(param, C_0d0, C_1d0);
		float select4 = H_zse4w8 ? C_0d0 : misc3a;
		bool H_s9t7jl = vDepthDelta1.y < C_0d0;
		float H_n2zko8 = g_flDepthDeltaScale * vDepthDelta1.y;
		float param1 = C_1d0 - H_n2zko8;
		float misc3a1 = clamp(param1, C_0d0, C_1d0);
		float select5 = H_s9t7jl ? C_0d0 : misc3a1;
		bool H_htx2k91 = vDepthDelta1.z < C_0d0;
		float H_mrkky8 = g_flDepthDeltaScale * vDepthDelta1.z;
		float param2 = C_1d0 - H_mrkky8;
		float misc3a2 = clamp(param2, C_0d0, C_1d0);
		float select6 = H_htx2k91 ? C_0d0 : misc3a2;
		bool H_ukp7p71 = vDepthDelta1.w < C_0d0;
		float H_h8lica = g_flDepthDeltaScale * vDepthDelta1.w;
		float param3 = C_1d0 - H_h8lica;
		float misc3a3 = clamp(param3, C_0d0, C_1d0);
		float select7 = H_ukp7p71 ? C_0d0 : misc3a3;
		vec4 H_cdblv21 = vec4(select4, select5, select6, select7);
		float flTotalOcclusion1 = dot(H_cdblv21, C_727tkr1);
		float flTotalOcclusion2 = flTotalOcclusion + flTotalOcclusion1;
		flTotalOcclusion = flTotalOcclusion2;
	}
	float param4 = flLinearDepth.x / g_flFarPlane;
	float H_aiitwe = param4 * C_65535d0;
	float H_kcw20j = floor(H_aiitwe);
	float H_8rvk7g1 = H_kcw20j * C_0d00390625;
	float H_77qxyp = floor(H_8rvk7g1);
	float H_jjuzno = H_77qxyp * C_256d0;
	float H_jogz5c1 = H_kcw20j - H_jjuzno;
	float H_9lrqa41 = H_77qxyp / C_255d0;
	float H_a1uglc = H_jogz5c1 / C_255d0;
	vec2 H_icey84 = H_by3gme1.xy * C_vec2p7d0p;
	vec2 H_5phc5j1 = H_icey84 + C_vec2p8d0p;
	vec2 vNormalWs1 = floor(H_5phc5j1);
	float H_08f92k = vNormalWs1.x * C_0d0627451;
	float H_ra7spd1 = vNormalWs1.y * C_0d00392157;
	float flPackedNormal = H_08f92k + H_ra7spd1;
	vec4 H_3t0ejt1 = vec4(flTotalOcclusion, H_9lrqa41, H_a1uglc, flPackedNormal);
	PS_OUTPUT_gl_vColor = H_3t0ejt1;
}
