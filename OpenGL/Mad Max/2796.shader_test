[require]
GLSL >= 4.60
GL_ARB_separate_shader_objects
SSO ENABLED

[vertex shader]
#version 460 core
// vs_5_0
// Checksum: 7ca80c0b_d2cadaee_6aea0f3a_d9bb7419
// Name: aobox

layout(location = 0) in vec4 v0;
// gl_Position
layout(location = 1) out idx_Varying1 { vec4 v; } o1;
vec4 r0, r1;

// Uniform buffer declarations (dcl_constant_buffer)

layout (std140) uniform cb_vs0 { vec4 cb0[4]; } idx_uniforms0_vs;

layout (std140) uniform cb_vs1 { vec4 cb1[6]; } idx_uniforms1_vs;


out gl_PerVertex {
	vec4 gl_Position;
};
uniform vec4 idx_Viewport_vs;
vec4 D3DtoGL(in vec4 pos)
{
	pos.xy += idx_Viewport_vs.xy * vec2(pos.w, -pos.w);
	return pos;
}
vec4 GLtoD3D(in vec4 pos)
{
	pos.xy -= idx_Viewport_vs.xy * vec2(pos.w, -pos.w);
	return pos;
}


void Initialise()
{
}


void VertexEpilog()
{
	gl_Position = D3DtoGL(gl_Position);
}

void main()
{
	Initialise();
	r0.xyz = v0.xyz * idx_uniforms1_vs.cb1[4].xyz;
	r1.xyz = r0.yyy * idx_uniforms1_vs.cb1[1].xyz;
	r0.xyw = fma(r0.xxx, idx_uniforms1_vs.cb1[0].xyz, r1.xyz);
	r0.xyz = fma(r0.zzz, idx_uniforms1_vs.cb1[2].xyz, r0.xyw);
	r0.xyz = r0.xyz + idx_uniforms1_vs.cb1[3].xyz;
	r1 = r0.yyyy * idx_uniforms0_vs.cb0[1];
	r1 = fma(r0.xxxx, idx_uniforms0_vs.cb0[0], r1);
	r0 = fma(r0.zzzz, idx_uniforms0_vs.cb0[2], r1);
	r0 = r0 + idx_uniforms0_vs.cb0[3];
	gl_Position = r0;
	r0.xyz = r0.xyw * vec3(0.500000000f, -0.500000000f, 0.500000000f);
	o1.v.z = r0.w;
	r0.xy = r0.zz + r0.xy;
	o1.v.xy = r0.xy * idx_uniforms1_vs.cb1[5].xy;
	VertexEpilog();
	return;
}


