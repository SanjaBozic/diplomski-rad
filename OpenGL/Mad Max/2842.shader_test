[require]
GLSL >= 4.60
GL_ARB_separate_shader_objects
SSO ENABLED

[vertex shader]
#version 460 core
// vs_5_0
// Checksum: b60a3c1e_579a7420_a74c7d59_bd82838f
// Name: 3dtextsdf

layout(location = 0) in vec4 v0;
layout(location = 1) in vec4 v1;
// gl_Position
layout(location = 1) out idx_Varying1 { vec4 v; } o1;
vec4 r0;

// Uniform buffer declarations (dcl_constant_buffer)

layout (std140) uniform cb_vs1 { vec4 cb1[4]; } idx_uniforms1_vs;


out gl_PerVertex {
	vec4 gl_Position;
};
uniform vec4 idx_Viewport_vs;
vec4 D3DtoGL(in vec4 pos)
{
	pos.xy += idx_Viewport_vs.xy * vec2(pos.w, -pos.w);
	return pos;
}
vec4 GLtoD3D(in vec4 pos)
{
	pos.xy -= idx_Viewport_vs.xy * vec2(pos.w, -pos.w);
	return pos;
}


void Initialise()
{
}


uvec4 movc(in uvec4 src0, in uvec4 src1, in uvec4 src2)
{
	return mix(src2, src1, bvec4(src0));
}

uvec3 movc(in uvec3 src0, in uvec3 src1, in uvec3 src2)
{
	return mix(src2, src1, bvec3(src0));
}

uvec2 movc(in uvec2 src0, in uvec2 src1, in uvec2 src2)
{
	return mix(src2, src1, bvec2(src0));
}

uint movc(in uint src0, in uint src1, in uint src2)
{
	return mix(src2, src1, bool(src0));
}

void VertexEpilog()
{
	gl_Position = D3DtoGL(gl_Position);
}

void main()
{
	Initialise();
	r0 = v0.yyyy * idx_uniforms1_vs.cb1[1];
	r0 = fma(v0.xxxx, idx_uniforms1_vs.cb1[0], r0);
	gl_Position = r0 + idx_uniforms1_vs.cb1[3];
	r0.x = intBitsToFloat(v1.y < float(0.00000000f) ? int(0xffffffff) : int(0x00000000));
	r0.y = abs(v1.y) + float(-1.00000000f);
	o1.v.w = uintBitsToFloat(movc(floatBitsToUint(r0.x), floatBitsToUint(r0.y), floatBitsToUint(abs(v1.y))));
	o1.v.xy = v0.zw;
	o1.v.z = abs(v1.x);
	VertexEpilog();
	return;
}


