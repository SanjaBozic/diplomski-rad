#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _ShadowMapTexture;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
lowp vec4 u_xlat10_6;
vec3 u_xlat8;
mediump float u_xlat16_8;
bool u_xlatb8;
vec2 u_xlat14;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat21;
bool u_xlatb21;
float u_xlat22;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat21 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat21);
    u_xlat3.xyz = (-u_xlat0.xyz) * vec3(u_xlat15) + (-u_xlat2.xyz);
    u_xlat4.xyz = u_xlat0.xyz * vec3(u_xlat15);
    u_xlat10_5 = texture(_ShadowMapTexture, u_xlat0.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.00100000005);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat10_3 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_15 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_15 = inversesqrt(u_xlat16_15);
    u_xlat16_3.xyz = vec3(u_xlat16_15) * u_xlat16_3.xyz;
    u_xlat15 = dot(u_xlat16_3.xyz, u_xlat0.xyz);
    u_xlat0.x = dot((-u_xlat4.xyz), u_xlat0.xyz);
    u_xlat0.y = dot(u_xlat16_3.xyz, (-u_xlat4.xyz));
    u_xlat0.z = dot(u_xlat16_3.xyz, (-u_xlat2.xyz));
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat15 = max(u_xlat15, 0.0);
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat10_2 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_3 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat16_4 = (-u_xlat10_2.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_1 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_8 = u_xlat16_1 * u_xlat16_1 + -1.0;
    u_xlat8.x = u_xlat15 * u_xlat16_8 + 1.0;
    u_xlat15 = u_xlat8.x * 3.14159274;
    u_xlat8.x = u_xlat15 * u_xlat8.x + 1.00000001e-007;
    u_xlat16_15 = u_xlat16_1 * u_xlat16_1;
    u_xlat8.x = u_xlat16_15 / u_xlat8.x;
    u_xlat16_15 = (-u_xlat16_4.x) * u_xlat16_4.x + 1.0;
    u_xlat22 = u_xlat0.z * u_xlat16_15 + u_xlat16_1;
    u_xlat1.x = u_xlat0.y * u_xlat16_15 + u_xlat16_1;
    u_xlat1.x = u_xlat0.z * u_xlat1.x;
    u_xlat1.x = u_xlat0.y * u_xlat22 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x + 9.99999975e-006;
    u_xlat1.x = 2.0 / u_xlat1.x;
    u_xlat1.x = u_xlat8.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * 0.785398185;
    u_xlat8.x = max(u_xlat1.x, 9.99999975e-005);
    u_xlat8.x = sqrt(u_xlat8.x);
    u_xlatb15 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat1.x = (u_xlatb15) ? u_xlat8.x : u_xlat1.x;
    u_xlat1.x = u_xlat0.y * u_xlat1.x;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat8.x = dot(u_xlat10_2.xyz, u_xlat10_2.xyz);
    u_xlatb8 = u_xlat8.x!=0.0;
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlat1.x = u_xlat8.x * u_xlat1.x;
    u_xlat8.x = sqrt(u_xlat21);
    u_xlat21 = u_xlat21 * _LightPos.w;
    u_xlat10_6 = texture(_LightTextureB0, vec2(u_xlat21));
    u_xlat21 = u_xlat8.x * _LightPositionRange.w;
    u_xlat21 = u_xlat21 * 0.970000029;
    u_xlatb21 = u_xlat10_5.x<u_xlat21;
    u_xlat21 = (u_xlatb21) ? _LightShadowData.x : 1.0;
    u_xlat21 = u_xlat21 * u_xlat10_6.w;
    u_xlat8.xyz = vec3(u_xlat21) * _LightColor.xyz;
    u_xlat5.xyz = u_xlat8.xyz * u_xlat1.xxx;
    u_xlat14.xy = (-u_xlat0.zx) + vec2(1.0, 1.0);
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = dot(u_xlat0.xx, u_xlat16_4.xx);
    u_xlat0.x = u_xlat0.x + -0.5;
    u_xlat1.x = u_xlat14.y * u_xlat14.y;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21 = u_xlat14.y * u_xlat1.x;
    u_xlat2.xyz = u_xlat16_4.yzw * vec3(u_xlat21) + u_xlat10_2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat5.xyz;
    u_xlat21 = u_xlat14.x * u_xlat14.x;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat14.x = u_xlat14.x * u_xlat21;
    u_xlat14.x = u_xlat0.x * u_xlat14.x + 1.0;
    u_xlat21 = (-u_xlat0.y) + 1.0;
    u_xlat1.x = u_xlat21 * u_xlat21;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * u_xlat21 + 1.0;
    u_xlat0.x = u_xlat14.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;
    u_xlat0.xyz = u_xlat10_3.xyz * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}