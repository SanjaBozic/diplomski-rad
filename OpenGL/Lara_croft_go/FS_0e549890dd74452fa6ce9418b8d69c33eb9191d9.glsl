#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 unity_SHAr;
uniform 	vec4 unity_SHAg;
uniform 	vec4 unity_SHAb;
uniform 	vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_SpecCube1_HDR;
uniform 	vec4 unity_ProbeVolumeParams;
uniform 	vec4 hlslcc_mtx4unity_ProbeVolumeWorldToObject[4];
uniform 	vec3 unity_ProbeVolumeSizeInv;
uniform 	vec3 unity_ProbeVolumeMin;
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform 	float _OcclusionStrength;
uniform  sampler2D _MainTex;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _OcclusionMap;
uniform  samplerCube unity_SpecCube0;
uniform  samplerCube unity_SpecCube1;
uniform  sampler3D unity_ProbeVolumeSH;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  float vs_TEXCOORD7;
in  vec4 vs_TEXCOORD4;
in  vec4 vs_TEXCOORD5;
in  vec4 vs_TEXCOORD6;
in  vec3 vs_TEXCOORD8;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump float u_xlat16_4;
lowp vec4 u_xlat10_4;
bool u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
vec3 u_xlat6;
vec4 u_xlat7;
lowp vec4 u_xlat10_7;
vec3 u_xlat8;
lowp vec4 u_xlat10_8;
vec3 u_xlat9;
lowp vec4 u_xlat10_9;
vec3 u_xlat10;
vec3 u_xlat11;
bvec3 u_xlatb11;
vec3 u_xlat12;
bvec3 u_xlatb13;
vec3 u_xlat16;
float u_xlat17;
float u_xlat18;
float u_xlat30;
float u_xlat31;
float u_xlat32;
float u_xlat42;
float u_xlat43;
float u_xlat44;
bool u_xlatb44;
float u_xlat45;
float u_xlat46;
mediump float u_xlat16_46;
float u_xlat47;
bool u_xlatb47;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;
    u_xlat0.xyz = _Color.xyz * u_xlat10_0.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat0.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat0.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat42 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat1.xyz = vec3(u_xlat42) * u_xlat1.xyz;
    u_xlat43 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat43 = inversesqrt(u_xlat43);
    u_xlat2.xyz = vec3(u_xlat43) * vs_TEXCOORD4.xyz;
    u_xlat43 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat43 = inversesqrt(u_xlat43);
    u_xlat3.xyz = vec3(u_xlat43) * vs_TEXCOORD1.xyz;
    u_xlat45 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
    u_xlat45 = max(u_xlat45, 0.0);
    u_xlat4.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.ww;
    u_xlat10_4 = texture(_ShadowMapTexture, u_xlat4.xy);
    u_xlat10_5 = texture(_OcclusionMap, vs_TEXCOORD0.xy);
    u_xlat18 = (-_OcclusionStrength) + 1.0;
    u_xlat18 = u_xlat10_5.y * _OcclusionStrength + u_xlat18;
    u_xlat32 = (-_Glossiness) + 1.0;
    u_xlat46 = dot(u_xlat3.xyz, u_xlat2.xyz);
    u_xlat46 = u_xlat46 + u_xlat46;
    u_xlat5.xyz = u_xlat2.xyz * (-vec3(u_xlat46)) + u_xlat3.xyz;
    u_xlat6.xyz = u_xlat10_4.xxx * _LightColor0.xyz;
    u_xlatb4 = unity_ProbeVolumeParams.x==1.0;
    if(u_xlatb4){
        u_xlatb4 = unity_ProbeVolumeParams.y==1.0;
        u_xlat7.xyz = vs_TEXCOORD8.yyy * hlslcc_mtx4unity_ProbeVolumeWorldToObject[1].xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD8.xxx + u_xlat7.xyz;
        u_xlat7.xyz = hlslcc_mtx4unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD8.zzz + u_xlat7.xyz;
        u_xlat7.xyz = u_xlat7.xyz + hlslcc_mtx4unity_ProbeVolumeWorldToObject[3].xyz;
        u_xlat7.xyz = (bool(u_xlatb4)) ? u_xlat7.xyz : vs_TEXCOORD8.xyz;
        u_xlat7.xyz = u_xlat7.xyz + (-unity_ProbeVolumeMin.xyz);
        u_xlat7.yzw = u_xlat7.xyz * unity_ProbeVolumeSizeInv.xyz;
        u_xlat4.x = u_xlat7.y * 0.25;
        u_xlat46 = unity_ProbeVolumeParams.z * 0.5;
        u_xlat47 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
        u_xlat4.x = max(u_xlat46, u_xlat4.x);
        u_xlat7.x = min(u_xlat47, u_xlat4.x);
        u_xlat10_8 = texture(unity_ProbeVolumeSH, u_xlat7.xzw);
        u_xlat9.xyz = u_xlat7.xzw + vec3(0.25, 0.0, 0.0);
        u_xlat10_9 = texture(unity_ProbeVolumeSH, u_xlat9.xyz);
        u_xlat7.xyz = u_xlat7.xzw + vec3(0.5, 0.0, 0.0);
        u_xlat10_7 = texture(unity_ProbeVolumeSH, u_xlat7.xyz);
        u_xlat2.w = 1.0;
        u_xlat8.x = dot(u_xlat10_8, u_xlat2);
        u_xlat8.y = dot(u_xlat10_9, u_xlat2);
        u_xlat8.z = dot(u_xlat10_7, u_xlat2);
    } else {
        u_xlat2.w = 1.0;
        u_xlat8.x = dot(unity_SHAr, u_xlat2);
        u_xlat8.y = dot(unity_SHAg, u_xlat2);
        u_xlat8.z = dot(unity_SHAb, u_xlat2);
    //ENDIF
    }
    u_xlat7.xyz = u_xlat8.xyz + vs_TEXCOORD5.xyz;
    u_xlat7.xyz = max(u_xlat7.xyz, vec3(0.0, 0.0, 0.0));
    u_xlatb44 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat8.xyz = log2(u_xlat7.xyz);
    u_xlat8.xyz = u_xlat8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
    u_xlat8.xyz = exp2(u_xlat8.xyz);
    u_xlat8.xyz = u_xlat8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
    u_xlat8.xyz = max(u_xlat8.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat7.xyz = (bool(u_xlatb44)) ? u_xlat8.xyz : u_xlat7.xyz;
    u_xlatb4 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb4){
        u_xlat4.x = dot(u_xlat5.xyz, u_xlat5.xyz);
        u_xlat4.x = inversesqrt(u_xlat4.x);
        u_xlat8.xyz = u_xlat4.xxx * u_xlat5.xyz;
        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;
        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;
        u_xlat10.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;
        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;
        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;
        u_xlat9.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;
        u_xlat9.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;
        u_xlat9.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;
        u_xlat4.x = min(u_xlat9.y, u_xlat9.x);
        u_xlat4.x = min(u_xlat9.z, u_xlat4.x);
        u_xlat9.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat8.xyz = u_xlat8.xyz * u_xlat4.xxx + u_xlat9.xyz;
    } else {
        u_xlat8.xyz = u_xlat5.xyz;
    //ENDIF
    }
    u_xlat4.x = (-u_xlat32) * 0.699999988 + 1.70000005;
    u_xlat4.x = u_xlat4.x * u_xlat32;
    u_xlat4.x = u_xlat4.x * 6.0;
    u_xlat10_8 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat4.x);
    u_xlat16_46 = log2(u_xlat10_8.w);
    u_xlat46 = u_xlat16_46 * unity_SpecCube0_HDR.y;
    u_xlat46 = exp2(u_xlat46);
    u_xlat46 = u_xlat46 * unity_SpecCube0_HDR.x;
    u_xlat9.xyz = u_xlat10_8.xyz * vec3(u_xlat46);
    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;
    if(u_xlatb47){
        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;
        if(u_xlatb47){
            u_xlat47 = dot(u_xlat5.xyz, u_xlat5.xyz);
            u_xlat47 = inversesqrt(u_xlat47);
            u_xlat10.xyz = vec3(u_xlat47) * u_xlat5.xyz;
            u_xlat11.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;
            u_xlat11.xyz = u_xlat11.xyz / u_xlat10.xyz;
            u_xlat12.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;
            u_xlat12.xyz = u_xlat12.xyz / u_xlat10.xyz;
            u_xlatb13.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat10.xyzx).xyz;
            u_xlat11.x = (u_xlatb13.x) ? u_xlat11.x : u_xlat12.x;
            u_xlat11.y = (u_xlatb13.y) ? u_xlat11.y : u_xlat12.y;
            u_xlat11.z = (u_xlatb13.z) ? u_xlat11.z : u_xlat12.z;
            u_xlat47 = min(u_xlat11.y, u_xlat11.x);
            u_xlat47 = min(u_xlat11.z, u_xlat47);
            u_xlat11.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);
            u_xlat5.xyz = u_xlat10.xyz * vec3(u_xlat47) + u_xlat11.xyz;
        //ENDIF
        }
        u_xlat10_5 = textureLod(unity_SpecCube1, u_xlat5.xyz, u_xlat4.x);
        u_xlat16_4 = log2(u_xlat10_5.w);
        u_xlat4.x = u_xlat16_4 * unity_SpecCube1_HDR.y;
        u_xlat4.x = exp2(u_xlat4.x);
        u_xlat4.x = u_xlat4.x * unity_SpecCube1_HDR.x;
        u_xlat5.xyz = u_xlat10_5.xyz * u_xlat4.xxx;
        u_xlat8.xyz = vec3(u_xlat46) * u_xlat10_8.xyz + (-u_xlat5.xyz);
        u_xlat9.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat5.xyz;
    //ENDIF
    }
    u_xlat5.xyz = vec3(u_xlat18) * u_xlat9.xyz;
    u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat43) + _WorldSpaceLightPos0.xyz;
    u_xlat43 = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat43 = max(u_xlat43, 0.00100000005);
    u_xlat43 = inversesqrt(u_xlat43);
    u_xlat8.xyz = vec3(u_xlat43) * u_xlat8.xyz;
    u_xlat43 = dot(u_xlat2.xyz, u_xlat8.xyz);
    u_xlat43 = max(u_xlat43, 0.0);
    u_xlat2.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));
    u_xlat2.y = dot(_WorldSpaceLightPos0.xyz, u_xlat8.xyz);
    u_xlat2.xy = max(u_xlat2.xy, vec2(0.0, 0.0));
    u_xlat30 = u_xlat32 * u_xlat32;
    u_xlat3.x = (-u_xlat32) * u_xlat32 + 1.0;
    u_xlat17 = u_xlat2.x * u_xlat3.x + u_xlat30;
    u_xlat3.x = u_xlat45 * u_xlat3.x + u_xlat30;
    u_xlat3.x = u_xlat2.x * u_xlat3.x;
    u_xlat3.x = u_xlat45 * u_xlat17 + u_xlat3.x;
    u_xlat3.x = u_xlat3.x + 9.99999975e-006;
    u_xlat3.x = 2.0 / u_xlat3.x;
    u_xlat17 = u_xlat30 * u_xlat30;
    u_xlat43 = u_xlat43 * u_xlat43;
    u_xlat4.xw = vec2(u_xlat30) * vec2(u_xlat30) + vec2(-1.0, 1.0);
    u_xlat43 = u_xlat43 * u_xlat4.x + 1.0;
    u_xlat31 = u_xlat43 * 3.14159274;
    u_xlat43 = u_xlat31 * u_xlat43 + 1.00000001e-007;
    u_xlat43 = u_xlat17 / u_xlat43;
    u_xlat17 = (-u_xlat45) + 1.0;
    u_xlat31 = u_xlat17 * u_xlat17;
    u_xlat31 = u_xlat31 * u_xlat31;
    u_xlat17 = u_xlat17 * u_xlat31;
    u_xlat2.x = (-u_xlat2.x) + 1.0;
    u_xlat31 = u_xlat2.x * u_xlat2.x;
    u_xlat31 = u_xlat31 * u_xlat31;
    u_xlat2.x = u_xlat2.x * u_xlat31;
    u_xlat31 = u_xlat2.y * u_xlat2.y;
    u_xlat31 = dot(vec2(u_xlat31), vec2(u_xlat32));
    u_xlat31 = u_xlat31 + -0.5;
    u_xlat17 = u_xlat31 * u_xlat17 + 1.0;
    u_xlat31 = u_xlat31 * u_xlat2.x + 1.0;
    u_xlat17 = u_xlat31 * u_xlat17;
    u_xlat43 = u_xlat43 * u_xlat3.x;
    u_xlat43 = u_xlat43 * 0.785398185;
    u_xlat3.x = max(u_xlat43, 9.99999975e-005);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat43 = (u_xlatb44) ? u_xlat3.x : u_xlat43;
    u_xlat43 = u_xlat45 * u_xlat43;
    u_xlat43 = max(u_xlat43, 0.0);
    u_xlat3.x = u_xlat45 * u_xlat17;
    u_xlat30 = u_xlat30 * u_xlat32;
    u_xlat30 = (-u_xlat30) * 0.280000001 + 1.0;
    u_xlat17 = float(1.0) / u_xlat4.w;
    u_xlat30 = (u_xlatb44) ? u_xlat30 : u_xlat17;
    u_xlat44 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlatb44 = u_xlat44!=0.0;
    u_xlat44 = u_xlatb44 ? 1.0 : float(0.0);
    u_xlat43 = u_xlat43 * u_xlat44;
    u_xlat42 = (-u_xlat42) + _Glossiness;
    u_xlat42 = u_xlat42 + 1.0;
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
    u_xlat3.xyz = u_xlat3.xxx * u_xlat6.xyz;
    u_xlat3.xyz = u_xlat7.xyz * vec3(u_xlat18) + u_xlat3.xyz;
    u_xlat4.xyz = u_xlat6.xyz * vec3(u_xlat43);
    u_xlat43 = (-u_xlat2.y) + 1.0;
    u_xlat16.x = u_xlat43 * u_xlat43;
    u_xlat16.x = u_xlat16.x * u_xlat16.x;
    u_xlat43 = u_xlat43 * u_xlat16.x;
    u_xlat6.xyz = (-u_xlat0.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat43) + u_xlat0.xyz;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat16.xyz = u_xlat5.xyz * vec3(u_xlat30);
    u_xlat3.xyz = (-u_xlat0.xyz) + vec3(u_xlat42);
    u_xlat0.xyz = u_xlat2.xxx * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat16.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat42 = vs_TEXCOORD7 * unity_FogParams.z + unity_FogParams.w;
    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    SV_Target0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
    SV_Target0.w = 1.0;
    return;
}