[require]
GLSL >= 1.50

[vertex shader]
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4glstate_matrix_modelview0[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat0.zw;
    vs_TEXCOORD0.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4glstate_matrix_modelview0[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4glstate_matrix_modelview0[3].xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}
[fragment shader]
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4unity_CameraToWorld[4];
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
uniform  samplerCube unity_SpecCube0;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
bvec3 u_xlatb8;
vec3 u_xlat10;
mediump float u_xlat16_10;
bool u_xlatb19;
float u_xlat27;
mediump float u_xlat16_27;
float u_xlat28;
mediump float u_xlat16_28;
bool u_xlatb28;
float u_xlat31;
mediump float u_xlat16_31;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat27 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4unity_CameraToWorld[3].xyz;
    u_xlat10_2 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat10_3 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_1 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_1.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_27 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_27 = inversesqrt(u_xlat16_27);
    u_xlat16_1.xyz = vec3(u_xlat16_27) * u_xlat16_1.xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat16_27 = max(u_xlat10_3.y, u_xlat10_3.x);
    u_xlat16_27 = max(u_xlat10_3.z, u_xlat16_27);
    u_xlat16_27 = (-u_xlat16_27) + 1.0;
    u_xlat28 = dot(u_xlat2.xyz, u_xlat16_1.xyz);
    u_xlat28 = u_xlat28 + u_xlat28;
    u_xlat4.xyz = u_xlat16_1.xyz * (-vec3(u_xlat28)) + u_xlat2.xyz;
    u_xlatb28 = 0.0<unity_SpecCube0_ProbePosition.w;
    if(u_xlatb28){
        u_xlat5.xyz = unity_SpecCube0_BoxMin.xyz + (-unity_SpecCube1_ProbePosition.www);
        u_xlat6.xyz = unity_SpecCube0_BoxMax.xyz + unity_SpecCube1_ProbePosition.www;
        u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat28 = inversesqrt(u_xlat28);
        u_xlat7.xyz = vec3(u_xlat28) * u_xlat4.xyz;
        u_xlat6.xyz = (-u_xlat0.xyz) + u_xlat6.xyz;
        u_xlat6.xyz = u_xlat6.xyz / u_xlat7.xyz;
        u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat5.xyz;
        u_xlat5.xyz = u_xlat5.xyz / u_xlat7.xyz;
        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
        u_xlat5.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat5.x;
        u_xlat5.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat5.y;
        u_xlat5.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat5.z;
        u_xlat28 = min(u_xlat5.y, u_xlat5.x);
        u_xlat28 = min(u_xlat5.z, u_xlat28);
        u_xlat5.xyz = u_xlat0.xyz + (-unity_SpecCube0_ProbePosition.xyz);
        u_xlat4.xyz = u_xlat7.xyz * vec3(u_xlat28) + u_xlat5.xyz;
    //ENDIF
    }
    u_xlat16_28 = (-u_xlat10_3.w) + 1.0;
    u_xlat16_31 = (-u_xlat16_28) * 0.699999988 + 1.70000005;
    u_xlat16_31 = u_xlat16_28 * u_xlat16_31;
    u_xlat31 = u_xlat16_31 * 6.0;
    u_xlat10_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat31);
    u_xlat16_31 = log2(u_xlat10_4.w);
    u_xlat31 = u_xlat16_31 * unity_SpecCube0_HDR.y;
    u_xlat31 = exp2(u_xlat31);
    u_xlat31 = u_xlat31 * unity_SpecCube0_HDR.x;
    u_xlat4.xyz = u_xlat10_4.xyz * vec3(u_xlat31);
    u_xlat4.xyz = u_xlat10_2.www * u_xlat4.xyz;
    u_xlat1.x = dot(u_xlat16_1.xyz, (-u_xlat2.xyz));
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat16_10 = u_xlat16_28 * u_xlat16_28;
    u_xlatb19 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat16_28 = u_xlat16_10 * u_xlat16_28;
    u_xlat28 = (-u_xlat16_28) * 0.280000001 + 1.0;
    u_xlat16_10 = u_xlat16_10 * u_xlat16_10 + 1.0;
    u_xlat10.x = float(1.0) / u_xlat16_10;
    u_xlat10.x = (u_xlatb19) ? u_xlat28 : u_xlat10.x;
    u_xlat16_27 = (-u_xlat16_27) + u_xlat10_3.w;
    u_xlat16_27 = u_xlat16_27 + 1.0;
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
    u_xlat10.xyz = u_xlat4.xyz * u_xlat10.xxx;
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    u_xlat2.x = u_xlat1.x * u_xlat1.x;
    u_xlat2.x = u_xlat2.x * u_xlat2.x;
    u_xlat1.x = u_xlat1.x * u_xlat2.x;
    u_xlat16_2.xyz = (-u_xlat10_3.xyz) + vec3(u_xlat16_27);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat16_2.xyz + u_xlat10_3.xyz;
    SV_Target0.xyz = u_xlat10.xyz * u_xlat2.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-unity_SpecCube0_BoxMax.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) + unity_SpecCube0_BoxMin.xyz;
    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x / unity_SpecCube1_ProbePosition.w;
    SV_Target0.w = (-u_xlat0.x) + 1.0;
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
    return;
}
