#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4unity_CameraToWorld[4];
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
vec3 u_xlat8;
mediump float u_xlat16_8;
float u_xlat9;
float u_xlat15;
float u_xlat21;
mediump float u_xlat16_21;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat21 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat21 = float(1.0) / u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = (-u_xlat2.xyz) * vec3(u_xlat21) + (-_LightDir.xyz);
    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = max(u_xlat21, 0.00100000005);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat10_4 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_21 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_21 = inversesqrt(u_xlat16_21);
    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_4.xyz;
    u_xlat21 = dot(u_xlat16_4.xyz, u_xlat3.xyz);
    u_xlat8.y = dot((-_LightDir.xyz), u_xlat3.xyz);
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat10_3 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat16_6 = (-u_xlat10_3.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_1 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_8 = u_xlat16_1 * u_xlat16_1 + -1.0;
    u_xlat21 = u_xlat21 * u_xlat16_8 + 1.0;
    u_xlat8.x = u_xlat21 * 3.14159274;
    u_xlat21 = u_xlat8.x * u_xlat21 + 1.00000001e-007;
    u_xlat16_8 = u_xlat16_1 * u_xlat16_1;
    u_xlat21 = u_xlat16_8 / u_xlat21;
    u_xlat8.x = dot(u_xlat16_4.xyz, (-u_xlat2.xyz));
    u_xlat8.z = dot(u_xlat16_4.xyz, (-_LightDir.xyz));
    u_xlat8.xyz = max(u_xlat8.xyz, vec3(0.0, 0.0, 0.0));
    u_xlat16_2 = (-u_xlat16_6.x) * u_xlat16_6.x + 1.0;
    u_xlat9 = u_xlat8.x * u_xlat16_2 + u_xlat16_1;
    u_xlat1.x = u_xlat8.z * u_xlat16_2 + u_xlat16_1;
    u_xlat1.x = u_xlat1.x * u_xlat8.x;
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat1.x = u_xlat8.z * u_xlat9 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x + 9.99999975e-006;
    u_xlat1.x = 2.0 / u_xlat1.x;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat21 * 0.785398185;
    u_xlat1.x = max(u_xlat21, 9.99999975e-005);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlatb2 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat21 = (u_xlatb2) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat8.z * u_xlat21;
    u_xlat21 = max(u_xlat21, 0.0);
    u_xlat1.x = dot(u_xlat10_3.xyz, u_xlat10_3.xyz);
    u_xlatb1 = u_xlat1.x!=0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat2.xy = u_xlat0.yy * hlslcc_mtx4unity_WorldToLight[1].xy;
    u_xlat0.xy = hlslcc_mtx4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat2.xy;
    u_xlat0.xy = hlslcc_mtx4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4unity_WorldToLight[3].xy;
    u_xlat10_2 = texture(_LightTexture0, u_xlat0.xy, -8.0);
    u_xlat0.xyz = u_xlat10_2.www * _LightColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat21);
    u_xlat21 = (-u_xlat8.y) + 1.0;
    u_xlat1.x = u_xlat8.y * u_xlat8.y;
    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_6.xx);
    u_xlat1.x = u_xlat1.x + -0.5;
    u_xlat15 = u_xlat21 * u_xlat21;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat21 = u_xlat21 * u_xlat15;
    u_xlat3.xyz = u_xlat16_6.yzw * vec3(u_xlat21) + u_xlat10_3.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat21 = u_xlat8.x * u_xlat8.x;
    u_xlat21 = u_xlat21 * u_xlat21;
    u_xlat21 = u_xlat8.x * u_xlat21;
    u_xlat21 = u_xlat1.x * u_xlat21 + 1.0;
    u_xlat8.x = (-u_xlat8.z) + 1.0;
    u_xlat15 = u_xlat8.x * u_xlat8.x;
    u_xlat15 = u_xlat15 * u_xlat15;
    u_xlat8.x = u_xlat8.x * u_xlat15;
    u_xlat1.x = u_xlat1.x * u_xlat8.x + 1.0;
    u_xlat21 = u_xlat21 * u_xlat1.x;
    u_xlat21 = u_xlat8.z * u_xlat21;
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat10_5.xyz * u_xlat0.xyz + u_xlat2.xyz;
    SV_Target0.w = 1.0;
    return;
}