#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4unity_CameraToWorld[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
float u_xlat4;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
mediump float u_xlat16_13;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat12 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat12 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat4 = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
    u_xlat0.x = u_xlat0.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat1.xy);
    u_xlat8.xy = u_xlat1.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_1 = texture(_CameraNormalsTexture, u_xlat8.xy);
    u_xlat4 = u_xlat4 + u_xlat10_3.x;
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
    u_xlat8.xy = u_xlat2.yy * hlslcc_mtx4unity_WorldToLight[1].xy;
    u_xlat8.xy = hlslcc_mtx4unity_WorldToLight[0].xy * u_xlat2.xx + u_xlat8.xy;
    u_xlat8.xy = hlslcc_mtx4unity_WorldToLight[2].xy * u_xlat2.ww + u_xlat8.xy;
    u_xlat2.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat8.xy = u_xlat8.xy + hlslcc_mtx4unity_WorldToLight[3].xy;
    u_xlat10_3 = texture(_LightTexture0, u_xlat8.xy, -8.0);
    u_xlat4 = u_xlat4 * u_xlat10_3.w;
    u_xlat8.x = u_xlat4;
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat12) + (-_LightDir.xyz);
    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
    u_xlat16_1.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_12 = u_xlat10_1.w * 128.0;
    u_xlat16_13 = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
    u_xlat16_13 = inversesqrt(u_xlat16_13);
    u_xlat16_1.xyz = vec3(u_xlat16_13) * u_xlat16_1.xyz;
    u_xlat13 = dot(u_xlat2.xyz, u_xlat16_1.xyz);
    u_xlat1.x = dot((-_LightDir.xyz), u_xlat16_1.xyz);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat4 = u_xlat4 * u_xlat1.x;
    u_xlat2.yzw = vec3(u_xlat4) * _LightColor.xyz;
    u_xlat4 = max(u_xlat13, 0.0);
    u_xlat4 = log2(u_xlat4);
    u_xlat4 = u_xlat4 * u_xlat16_12;
    u_xlat4 = exp2(u_xlat4);
    u_xlat4 = u_xlat8.x * u_xlat4;
    u_xlat1.xyz = unity_ColorSpaceLuminance.xyz * _LightColor.xyz;
    u_xlat8.xy = u_xlat1.yz + u_xlat1.xx;
    u_xlat12 = u_xlat8.y * u_xlat1.y;
    u_xlat8.x = _LightColor.z * unity_ColorSpaceLuminance.z + u_xlat8.x;
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat12));
    u_xlat8.x = u_xlat12 + u_xlat8.x;
    u_xlat2.x = u_xlat8.x * u_xlat4;
    SV_Target0 = u_xlat0.xxxx * u_xlat2;
    return;
}