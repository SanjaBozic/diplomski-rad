[require]
GLSL >= 1.50

[vertex shader]
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4glstate_matrix_modelview0[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat0.zw;
    vs_TEXCOORD0.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4glstate_matrix_modelview0[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4glstate_matrix_modelview0[3].xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}
[fragment shader]
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _ShadowMapTexture;
uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
vec2 u_xlat6;
float u_xlat7;
vec3 u_xlat9;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_19;
void main()
{
    u_xlat0.xyz = unity_ColorSpaceLuminance.xyz * _LightColor.xyz;
    u_xlat0.xz = u_xlat0.yz + u_xlat0.xx;
    u_xlat6.x = u_xlat0.z * u_xlat0.y;
    u_xlat0.x = _LightColor.z * unity_ColorSpaceLuminance.z + u_xlat0.x;
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat6.x = dot(unity_ColorSpaceLuminance.ww, u_xlat6.xx);
    u_xlat0.x = u_xlat6.x + u_xlat0.x;
    u_xlat6.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_1 = texture(_CameraDepthTexture, u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_2 = texture(_CameraNormalsTexture, u_xlat6.xy);
    u_xlat6.x = _ZBufferParams.x * u_xlat10_1.x + _ZBufferParams.y;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat12 = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD1.xyz;
    u_xlat1.xyw = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.yyy * hlslcc_mtx4unity_CameraToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4unity_CameraToWorld[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4unity_CameraToWorld[2].xyz * u_xlat1.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4unity_CameraToWorld[3].xyz;
    u_xlat4.xyz = u_xlat3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat12 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat5.xyz = u_xlat3.xyz + (-_LightPos.xyz);
    u_xlat3.xyz = u_xlat3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat18 = sqrt(u_xlat18);
    u_xlat6.x = (-u_xlat1.z) * u_xlat6.x + u_xlat18;
    u_xlat6.x = unity_ShadowFadeCenterAndType.w * u_xlat6.x + u_xlat1.w;
    u_xlat6.x = u_xlat6.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat18 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat1.x = inversesqrt(u_xlat18);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat5.xyz);
    u_xlat9.xyz = (-u_xlat4.xyz) * vec3(u_xlat12) + (-u_xlat1.xyz);
    u_xlat12 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat12 = inversesqrt(u_xlat12);
    u_xlat9.xyz = vec3(u_xlat12) * u_xlat9.xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_12 = u_xlat10_2.w * 128.0;
    u_xlat16_19 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlat16_19 = inversesqrt(u_xlat16_19);
    u_xlat16_2.xyz = vec3(u_xlat16_19) * u_xlat16_2.xyz;
    u_xlat1.w = dot(u_xlat9.xyz, u_xlat16_2.xyz);
    u_xlat1.x = dot((-u_xlat1.xyz), u_xlat16_2.xyz);
    u_xlat1.xy = max(u_xlat1.xw, vec2(0.0, 0.0));
    u_xlat7 = log2(u_xlat1.y);
    u_xlat12 = u_xlat16_12 * u_xlat7;
    u_xlat12 = exp2(u_xlat12);
    u_xlat7 = sqrt(u_xlat18);
    u_xlat18 = u_xlat18 * _LightPos.w;
    u_xlat10_2 = texture(_LightTextureB0, vec2(u_xlat18));
    u_xlat18 = u_xlat7 * _LightPositionRange.w;
    u_xlat18 = u_xlat18 * 0.970000029;
    u_xlatb18 = u_xlat10_3.x<u_xlat18;
    u_xlat18 = (u_xlatb18) ? _LightShadowData.x : 1.0;
    u_xlat18 = u_xlat18 * u_xlat10_2.w;
    u_xlat7 = u_xlat18;
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat2.yzw = vec3(u_xlat18) * _LightColor.xyz;
    u_xlat12 = u_xlat12 * u_xlat7;
    u_xlat2.x = u_xlat0.x * u_xlat12;
    SV_Target0 = u_xlat6.xxxx * u_xlat2;
    return;
}
