#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _ShadowMapTexture;
uniform  samplerCube _LightTexture0;
uniform  sampler2D _CameraNormalsTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
bvec4 u_xlatb4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
vec3 u_xlat6;
vec3 u_xlat7;
float u_xlat12;
float u_xlat13;
mediump float u_xlat16_18;
float u_xlat19;
mediump float u_xlat16_19;
float u_xlat21;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_1 = texture(_CameraDepthTexture, u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_0 = texture(_CameraNormalsTexture, u_xlat0.xy);
    u_xlat1 = _ZBufferParams.x * u_xlat10_1.x + _ZBufferParams.y;
    u_xlat1 = float(1.0) / u_xlat1;
    u_xlat7.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat7.xyz = u_xlat7.xxx * vs_TEXCOORD1.xyz;
    u_xlat2.xyz = vec3(u_xlat1) * u_xlat7.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_LightPos.xyz);
    u_xlat4.xyz = u_xlat3.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    u_xlat4 = texture(_ShadowMapTexture, u_xlat4.xyz);
    u_xlat5.xyz = u_xlat3.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    u_xlat10_5 = texture(_ShadowMapTexture, u_xlat5.xyz);
    u_xlat4.y = u_xlat10_5.x;
    u_xlat5.xyz = u_xlat3.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    u_xlat10_5 = texture(_ShadowMapTexture, u_xlat5.xyz);
    u_xlat4.z = u_xlat10_5.x;
    u_xlat5.xyz = u_xlat3.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    u_xlat10_5 = texture(_ShadowMapTexture, u_xlat5.xyz);
    u_xlat4.w = u_xlat10_5.x;
    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat13 = sqrt(u_xlat7.x);
    u_xlat13 = u_xlat13 * _LightPositionRange.w;
    u_xlat13 = u_xlat13 * 0.970000029;
    u_xlatb4 = lessThan(u_xlat4, vec4(u_xlat13));
    u_xlat4.x = (u_xlatb4.x) ? _LightShadowData.x : float(1.0);
    u_xlat4.y = (u_xlatb4.y) ? _LightShadowData.x : float(1.0);
    u_xlat4.z = (u_xlatb4.z) ? _LightShadowData.x : float(1.0);
    u_xlat4.w = (u_xlatb4.w) ? _LightShadowData.x : float(1.0);
    u_xlat13 = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat21 = u_xlat7.x * _LightPos.w;
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat7.xxx * u_xlat3.xyz;
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat21));
    u_xlat7.x = u_xlat13 * u_xlat10_4.w;
    u_xlat4.xyz = u_xlat2.yyy * hlslcc_mtx4unity_WorldToLight[1].xyz;
    u_xlat4.xyz = hlslcc_mtx4unity_WorldToLight[0].xyz * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4unity_WorldToLight[2].xyz * u_xlat2.www + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4unity_WorldToLight[3].xyz;
    u_xlat10_4 = texture(_LightTexture0, u_xlat4.xyz, -8.0);
    u_xlat7.x = u_xlat7.x * u_xlat10_4.w;
    u_xlat13 = u_xlat7.x;
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
    u_xlat4.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat2.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat1 = (-u_xlat7.z) * u_xlat1 + u_xlat2.x;
    u_xlat1 = unity_ShadowFadeCenterAndType.w * u_xlat1 + u_xlat2.z;
    u_xlat1 = u_xlat1 * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat1 = (-u_xlat1) + 1.0;
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
    u_xlat19 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat2.xyz = (-u_xlat4.xyz) * vec3(u_xlat19) + (-u_xlat3.xyz);
    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat19 = inversesqrt(u_xlat19);
    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_18 = u_xlat10_0.w * 128.0;
    u_xlat16_19 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
    u_xlat16_19 = inversesqrt(u_xlat16_19);
    u_xlat16_0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_19);
    u_xlat19 = dot(u_xlat2.xyz, u_xlat16_0.xyz);
    u_xlat0.x = dot((-u_xlat3.xyz), u_xlat16_0.xyz);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = u_xlat7.x * u_xlat0.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = max(u_xlat19, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * u_xlat16_18;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat13 * u_xlat0.x;
    u_xlat6.xyz = unity_ColorSpaceLuminance.xyz * _LightColor.xyz;
    u_xlat6.xz = u_xlat6.yz + u_xlat6.xx;
    u_xlat12 = u_xlat6.z * u_xlat6.y;
    u_xlat6.x = _LightColor.z * unity_ColorSpaceLuminance.z + u_xlat6.x;
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat12));
    u_xlat6.x = u_xlat12 + u_xlat6.x;
    u_xlat2.w = u_xlat6.x * u_xlat0.x;
    u_xlat0 = vec4(u_xlat1) * u_xlat2;
    SV_Target0 = exp2((-u_xlat0));
    return;
}