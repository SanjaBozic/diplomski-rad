#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4unity_CameraToWorld[4];
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
lowp vec4 u_xlat10_4;
mediump vec4 u_xlat16_5;
float u_xlat7;
mediump float u_xlat16_7;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
float u_xlat19;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat18 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4unity_CameraToWorld[3].xyz;
    u_xlat0.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = (-u_xlat0.xyz) * vec3(u_xlat18) + (-_LightDir.xyz);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = max(u_xlat18, 0.00100000005);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
    u_xlat10_3 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_18 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_18 = inversesqrt(u_xlat16_18);
    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
    u_xlat18 = dot(u_xlat16_3.xyz, u_xlat2.xyz);
    u_xlat13 = dot((-_LightDir.xyz), u_xlat2.xyz);
    u_xlat13 = max(u_xlat13, 0.0);
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat10_2 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_4 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat16_5 = (-u_xlat10_2.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_1 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_7 = u_xlat16_1 * u_xlat16_1 + -1.0;
    u_xlat18 = u_xlat18 * u_xlat16_7 + 1.0;
    u_xlat7 = u_xlat18 * 3.14159274;
    u_xlat18 = u_xlat7 * u_xlat18 + 1.00000001e-007;
    u_xlat16_7 = u_xlat16_1 * u_xlat16_1;
    u_xlat18 = u_xlat16_7 / u_xlat18;
    u_xlat0.x = dot(u_xlat16_3.xyz, (-u_xlat0.xyz));
    u_xlat0.y = dot(u_xlat16_3.xyz, (-_LightDir.xyz));
    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat16_12 = (-u_xlat16_5.x) * u_xlat16_5.x + 1.0;
    u_xlat7 = u_xlat0.x * u_xlat16_12 + u_xlat16_1;
    u_xlat12 = u_xlat0.y * u_xlat16_12 + u_xlat16_1;
    u_xlat12 = u_xlat12 * u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat12 = u_xlat0.y * u_xlat7 + u_xlat12;
    u_xlat12 = u_xlat12 + 9.99999975e-006;
    u_xlat12 = 2.0 / u_xlat12;
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat12 = u_xlat12 * 0.785398185;
    u_xlat18 = max(u_xlat12, 9.99999975e-005);
    u_xlat18 = sqrt(u_xlat18);
    u_xlatb1 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat12 = (u_xlatb1) ? u_xlat18 : u_xlat12;
    u_xlat12 = u_xlat0.y * u_xlat12;
    u_xlat12 = max(u_xlat12, 0.0);
    u_xlat18 = dot(u_xlat10_2.xyz, u_xlat10_2.xyz);
    u_xlatb18 = u_xlat18!=0.0;
    u_xlat18 = u_xlatb18 ? 1.0 : float(0.0);
    u_xlat12 = u_xlat18 * u_xlat12;
    u_xlat1.xyw = vec3(u_xlat12) * _LightColor.xyz;
    u_xlat12 = (-u_xlat13) + 1.0;
    u_xlat18 = u_xlat13 * u_xlat13;
    u_xlat18 = dot(vec2(u_xlat18), u_xlat16_5.xx);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat13 = u_xlat12 * u_xlat12;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat12 = u_xlat12 * u_xlat13;
    u_xlat2.xyz = u_xlat16_5.yzw * vec3(u_xlat12) + u_xlat10_2.xyz;
    u_xlat1.xyz = u_xlat1.xyw * u_xlat2.xyz;
    u_xlat12 = u_xlat0.x * u_xlat0.x;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = u_xlat18 * u_xlat0.x + 1.0;
    u_xlat12 = (-u_xlat0.y) + 1.0;
    u_xlat19 = u_xlat12 * u_xlat12;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat12 = u_xlat12 * u_xlat19;
    u_xlat12 = u_xlat18 * u_xlat12 + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat12;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.xyz = u_xlat10_4.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}