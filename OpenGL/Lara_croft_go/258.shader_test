[require]
GLSL >= 1.50

[vertex shader]
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4glstate_matrix_modelview0[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat0.zw;
    vs_TEXCOORD0.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4glstate_matrix_modelview0[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4glstate_matrix_modelview0[3].xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}
[fragment shader]
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _ShadowMapTexture;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bvec4 u_xlatb0;
vec2 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
vec4 u_xlat6;
lowp vec4 u_xlat10_7;
float u_xlat8;
float u_xlat9;
mediump float u_xlat16_9;
bool u_xlatb9;
vec2 u_xlat17;
mediump float u_xlat16_17;
float u_xlat18;
float u_xlat24;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat24 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat24 = float(1.0) / u_xlat24;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat24 = inversesqrt(u_xlat24);
    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;
    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat17.x = inversesqrt(u_xlat24);
    u_xlat3.xyz = (-u_xlat0.xyz) * u_xlat17.xxx + (-u_xlat2.xyz);
    u_xlat4.xyz = u_xlat0.xyz * u_xlat17.xxx;
    u_xlat17.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat17.x = max(u_xlat17.x, 0.00100000005);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat3.xyz = u_xlat17.xxx * u_xlat3.xyz;
    u_xlat10_5 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_5.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_17 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_17 = inversesqrt(u_xlat16_17);
    u_xlat16_5.xyz = vec3(u_xlat16_17) * u_xlat16_5.xyz;
    u_xlat17.x = dot(u_xlat16_5.xyz, u_xlat3.xyz);
    u_xlat17.y = dot((-u_xlat4.xyz), u_xlat3.xyz);
    u_xlat2.w = dot(u_xlat16_5.xyz, (-u_xlat4.xyz));
    u_xlat2.x = dot(u_xlat16_5.xyz, (-u_xlat2.xyz));
    u_xlat2.xy = max(u_xlat2.xw, vec2(0.0, 0.0));
    u_xlat17.xy = max(u_xlat17.xy, vec2(0.0, 0.0));
    u_xlat17.x = u_xlat17.x * u_xlat17.x;
    u_xlat10_3 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_4 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat16_5 = (-u_xlat10_3.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_1 = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_9 = u_xlat16_1 * u_xlat16_1 + -1.0;
    u_xlat9 = u_xlat17.x * u_xlat16_9 + 1.0;
    u_xlat17.x = u_xlat9 * 3.14159274;
    u_xlat9 = u_xlat17.x * u_xlat9 + 1.00000001e-007;
    u_xlat16_17 = u_xlat16_1 * u_xlat16_1;
    u_xlat9 = u_xlat16_17 / u_xlat9;
    u_xlat16_17 = (-u_xlat16_5.x) * u_xlat16_5.x + 1.0;
    u_xlat18 = u_xlat2.x * u_xlat16_17 + u_xlat16_1;
    u_xlat1.x = u_xlat2.y * u_xlat16_17 + u_xlat16_1;
    u_xlat1.x = u_xlat1.x * u_xlat2.x;
    u_xlat17.x = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat2.y * u_xlat18 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x + 9.99999975e-006;
    u_xlat1.x = 2.0 / u_xlat1.x;
    u_xlat1.x = u_xlat9 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * 0.785398185;
    u_xlat9 = max(u_xlat1.x, 9.99999975e-005);
    u_xlat9 = sqrt(u_xlat9);
    u_xlatb2 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat1.x = (u_xlatb2) ? u_xlat9 : u_xlat1.x;
    u_xlat1.x = u_xlat2.y * u_xlat1.x;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat9 = dot(u_xlat10_3.xyz, u_xlat10_3.xyz);
    u_xlatb9 = u_xlat9!=0.0;
    u_xlat9 = u_xlatb9 ? 1.0 : float(0.0);
    u_xlat1.x = u_xlat9 * u_xlat1.x;
    u_xlat2.xzw = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
    u_xlat6 = texture(_ShadowMapTexture, u_xlat2.xzw);
    u_xlat2.xzw = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
    u_xlat10_7 = texture(_ShadowMapTexture, u_xlat2.xzw);
    u_xlat6.y = u_xlat10_7.x;
    u_xlat2.xzw = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
    u_xlat10_7 = texture(_ShadowMapTexture, u_xlat0.xyz);
    u_xlat6.w = u_xlat10_7.x;
    u_xlat10_7 = texture(_ShadowMapTexture, u_xlat2.xzw);
    u_xlat6.z = u_xlat10_7.x;
    u_xlat0.x = sqrt(u_xlat24);
    u_xlat8 = u_xlat24 * _LightPos.w;
    u_xlat10_7 = texture(_LightTextureB0, vec2(u_xlat8));
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * 0.970000029;
    u_xlatb0 = lessThan(u_xlat6, u_xlat0.xxxx);
    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat0.x = u_xlat0.x * u_xlat10_7.w;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xzw = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat24 = (-u_xlat17.y) + 1.0;
    u_xlat1.x = u_xlat17.y * u_xlat17.y;
    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_5.xx);
    u_xlat1.x = u_xlat1.x + -0.5;
    u_xlat9 = u_xlat24 * u_xlat24;
    u_xlat9 = u_xlat9 * u_xlat9;
    u_xlat24 = u_xlat24 * u_xlat9;
    u_xlat3.xyz = u_xlat16_5.yzw * vec3(u_xlat24) + u_xlat10_3.xyz;
    u_xlat2.xzw = u_xlat2.xzw * u_xlat3.xyz;
    u_xlat24 = u_xlat17.x * u_xlat17.x;
    u_xlat24 = u_xlat24 * u_xlat24;
    u_xlat24 = u_xlat17.x * u_xlat24;
    u_xlat24 = u_xlat1.x * u_xlat24 + 1.0;
    u_xlat9 = (-u_xlat2.y) + 1.0;
    u_xlat17.x = u_xlat9 * u_xlat9;
    u_xlat17.x = u_xlat17.x * u_xlat17.x;
    u_xlat9 = u_xlat9 * u_xlat17.x;
    u_xlat1.x = u_xlat1.x * u_xlat9 + 1.0;
    u_xlat24 = u_xlat24 * u_xlat1.x;
    u_xlat24 = u_xlat2.y * u_xlat24;
    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat10_4.xyz * u_xlat0.xyz + u_xlat2.xzw;
    SV_Target0.w = 1.0;
    return;
}
