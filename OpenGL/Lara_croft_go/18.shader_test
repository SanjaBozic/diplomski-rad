[require]
GLSL >= 1.50

[vertex shader]
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4unity_CameraInvProjection[4];
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
in  vec4 in_POSITION0;
in  vec2 in_TEXCOORD0;
in  vec3 in_NORMAL0;
out vec2 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_TEXCOORD1.xyz = in_NORMAL0.xyz;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xyz = u_xlat1.xxx * hlslcc_mtx4unity_CameraInvProjection[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_CameraInvProjection[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    gl_Position = u_xlat0;
    u_xlat0.xyz = u_xlat1.xyz + (-hlslcc_mtx4unity_CameraInvProjection[2].xyz);
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4unity_CameraInvProjection[2].xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4unity_CameraInvProjection[3].xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4unity_CameraInvProjection[3].xyz;
    u_xlat0.w = (-u_xlat0.z);
    vs_TEXCOORD2.xyz = u_xlat0.xyw;
    u_xlat1.w = (-u_xlat1.z);
    vs_TEXCOORD3.xyz = u_xlat1.xyw;
    return;
}
[fragment shader]
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4unity_CameraToWorld[4];
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	vec4 hlslcc_mtx4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec2 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD3;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec3 u_xlat3;
vec3 u_xlat4;
lowp float u_xlat10_4;
float u_xlat8;
void main()
{
    u_xlat10_0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
    u_xlat4.x = _ZBufferParams.x * u_xlat10_0.x + _ZBufferParams.y;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat8 = (-u_xlat4.x) + u_xlat10_0.x;
    u_xlat4.x = unity_OrthoParams.w * u_xlat8 + u_xlat4.x;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;
    u_xlat0.xzw = u_xlat10_0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;
    u_xlat0.xzw = (-vs_TEXCOORD1.xyz) * u_xlat4.xxx + u_xlat0.xzw;
    u_xlat1.xyz = u_xlat4.xxx * vs_TEXCOORD1.xyz;
    u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;
    u_xlatb1 = greaterThanEqual(u_xlat0.zzzz, _LightSplitsNear);
    u_xlat1 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb1));
    u_xlatb2 = lessThan(u_xlat0.zzzz, _LightSplitsFar);
    u_xlat2 = mix(vec4(0.0, 0.0, 0.0, 0.0), vec4(1.0, 1.0, 1.0, 1.0), vec4(u_xlatb2));
    u_xlat1 = u_xlat1 * u_xlat2;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4unity_CameraToWorld[1];
    u_xlat2 = hlslcc_mtx4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0.x = u_xlat0.z * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat2 = u_xlat2 + hlslcc_mtx4unity_CameraToWorld[3];
    u_xlat4.xyz = u_xlat2.yyy * hlslcc_mtx4unity_WorldToShadow[5].xyz;
    u_xlat4.xyz = hlslcc_mtx4unity_WorldToShadow[4].xyz * u_xlat2.xxx + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4unity_WorldToShadow[6].xyz * u_xlat2.zzz + u_xlat4.xyz;
    u_xlat4.xyz = hlslcc_mtx4unity_WorldToShadow[7].xyz * u_xlat2.www + u_xlat4.xyz;
    u_xlat4.xyz = u_xlat1.yyy * u_xlat4.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4unity_WorldToShadow[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4unity_WorldToShadow[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4unity_WorldToShadow[2].xyz * u_xlat2.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4unity_WorldToShadow[3].xyz * u_xlat2.www + u_xlat3.xyz;
    u_xlat4.xyz = u_xlat3.xyz * u_xlat1.xxx + u_xlat4.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4unity_WorldToShadow[9].xyz;
    u_xlat3.xyz = hlslcc_mtx4unity_WorldToShadow[8].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4unity_WorldToShadow[10].xyz * u_xlat2.zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4unity_WorldToShadow[11].xyz * u_xlat2.www + u_xlat3.xyz;
    u_xlat4.xyz = u_xlat3.xyz * u_xlat1.zzz + u_xlat4.xyz;
    u_xlat1.xyz = u_xlat2.yyy * hlslcc_mtx4unity_WorldToShadow[13].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_WorldToShadow[12].xyz * u_xlat2.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_WorldToShadow[14].xyz * u_xlat2.zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_WorldToShadow[15].xyz * u_xlat2.www + u_xlat1.xyz;
    u_xlat4.xyz = u_xlat1.xyz * u_xlat1.www + u_xlat4.xyz;
    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat10_4 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat8 = (-_LightShadowData.x) + 1.0;
    u_xlat4.x = u_xlat10_4 * u_xlat8 + _LightShadowData.x;
    SV_Target0 = u_xlat0.xxxx + u_xlat4.xxxx;
    return;
}
