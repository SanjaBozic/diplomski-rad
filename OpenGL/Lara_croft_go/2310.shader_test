[require]
GLSL >= 1.50

[vertex shader]
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 _ColorX;
uniform 	vec4 _ColorY;
uniform 	vec4 _ColorZ;
uniform 	vec4 hlslcc_mtx4_ShadowMapMat[4];
uniform 	vec4 hlslcc_mtx4_ShadowMapMV[4];
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD0;
out float vs_TEXCOORD5;
out vec4 vs_TEXCOORD1;
out vec3 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
vec4 u_xlat0;
vec3 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_TEXCOORD5 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4unity_WorldToObject[0].xyz);
    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4unity_WorldToObject[1].xyz);
    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    u_xlat6 = abs(u_xlat0.y) + abs(u_xlat0.x);
    u_xlat6 = abs(u_xlat0.z) + u_xlat6;
    u_xlat1.xyz = abs(u_xlat0.xyz) / vec3(u_xlat6);
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0.xyz = u_xlat1.yyy * _ColorY.xyz;
    u_xlat0.xyz = _ColorX.xyz * u_xlat1.xxx + u_xlat0.xyz;
    vs_COLOR0.xyz = _ColorZ.xyz * u_xlat1.zzz + u_xlat0.xyz;
    vs_COLOR0.w = 1.0;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD1 = u_xlat0;
    vs_TEXCOORD2.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD3.xyz = vec3(0.0, 0.0, 0.0);
    u_xlat1.x = u_xlat0.y * hlslcc_mtx4_ShadowMapMV[1].z;
    u_xlat1.x = hlslcc_mtx4_ShadowMapMV[0].z * u_xlat0.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4_ShadowMapMV[2].z * u_xlat0.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4_ShadowMapMV[3].z * u_xlat0.w + u_xlat1.x;
    vs_TEXCOORD4.z = (-u_xlat1.x);
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4_ShadowMapMat[1].xy;
    u_xlat0.xy = hlslcc_mtx4_ShadowMapMat[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat0.xy = hlslcc_mtx4_ShadowMapMat[2].xy * u_xlat0.zz + u_xlat0.xy;
    vs_TEXCOORD4.xy = hlslcc_mtx4_ShadowMapMat[3].xy * u_xlat0.ww + u_xlat0.xy;
    return;
}
[fragment shader]
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_FogColor;
uniform 	vec4 _AmbientLightColor;
uniform 	vec4 _DirectionalLightColor;
uniform 	vec3 _DirectionalLightForward;
uniform 	vec4 _ShadowColor;
uniform 	vec2 _ShadowCameraSettings;
uniform 	vec4 _DepthColor;
uniform 	vec2 _DepthBounds;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD0;
in  float vs_TEXCOORD5;
in  vec4 vs_TEXCOORD1;
in  vec3 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
float u_xlat2;
float u_xlat5;
float u_xlat9;
void main()
{
    u_xlat0.x = vs_TEXCOORD4.z + (-_ShadowCameraSettings.xxyx.z);
    u_xlat0.x = u_xlat0.x / _ShadowCameraSettings.xxyx.y;
    u_xlat10_1 = texture(_ShadowMapTexture, vs_TEXCOORD4.xy);
    u_xlatb0 = u_xlat0.x>=u_xlat10_1.x;
    u_xlat0.x = (u_xlatb0) ? 0.0 : 1.0;
    u_xlat0.xyz = max(u_xlat0.xxx, _ShadowColor.xyz);
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    u_xlat9 = dot(u_xlat1.xyz, _DirectionalLightForward.xyz);
    u_xlat1.xyz = vec3(u_xlat9) * _DirectionalLightColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
    u_xlat1.xyz = vs_COLOR0.xyz * _AmbientLightColor.xyz;
    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.w = vs_COLOR0.w;
    u_xlat1 = (-u_xlat0) + _DepthColor;
    u_xlat2 = (-_DepthBounds.y) + _DepthBounds.x;
    u_xlat5 = vs_TEXCOORD1.y + (-_DepthBounds.y);
    u_xlat2 = u_xlat5 / u_xlat2;
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
    u_xlat2 = (-u_xlat2) + 1.0;
    u_xlat1 = u_xlat1 * vec4(u_xlat2);
    u_xlat0 = _DepthColor.wwww * u_xlat1 + u_xlat0;
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat0.w;
    u_xlat9 = vs_TEXCOORD5;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz + unity_FogColor.xyz;
    return;
}
