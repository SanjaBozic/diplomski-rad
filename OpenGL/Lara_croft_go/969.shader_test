[require]
GLSL >= 1.50

[vertex shader]
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4glstate_matrix_modelview0[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat0.zw;
    vs_TEXCOORD0.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4glstate_matrix_modelview0[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4glstate_matrix_modelview0[3].xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}
[fragment shader]
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4unity_CameraToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToShadow[16];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 unity_LightmapFade;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
uniform 	vec4 _ShadowOffsets[4];
uniform 	vec4 _CameraNormalsTexture_ST;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTexture0;
uniform  sampler2D _LightTextureB0;
uniform  sampler2D _CameraNormalsTexture;
uniform  sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec4 u_xlat5;
vec3 u_xlat6;
vec2 u_xlat7;
vec2 u_xlat14;
float u_xlat21;
mediump float u_xlat16_21;
float u_xlat22;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.x = (-_LightShadowData.x) + 1.0;
    u_xlat7.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_1 = texture(_CameraDepthTexture, u_xlat7.xy);
    u_xlat7.xy = u_xlat7.xy * _CameraNormalsTexture_ST.xy + _CameraNormalsTexture_ST.zw;
    u_xlat10_2 = texture(_CameraNormalsTexture, u_xlat7.xy);
    u_xlat7.x = _ZBufferParams.x * u_xlat10_1.x + _ZBufferParams.y;
    u_xlat7.x = float(1.0) / u_xlat7.x;
    u_xlat14.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat1.xyz = u_xlat14.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xyw = u_xlat7.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.yyy * hlslcc_mtx4unity_CameraToWorld[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4unity_CameraToWorld[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4unity_CameraToWorld[2].xyz * u_xlat1.www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4unity_CameraToWorld[3].xyz;
    u_xlat4 = u_xlat3.yyyy * hlslcc_mtx4unity_WorldToShadow[1];
    u_xlat4 = hlslcc_mtx4unity_WorldToShadow[0] * u_xlat3.xxxx + u_xlat4;
    u_xlat4 = hlslcc_mtx4unity_WorldToShadow[2] * u_xlat3.zzzz + u_xlat4;
    u_xlat4 = u_xlat4 + hlslcc_mtx4unity_WorldToShadow[3];
    u_xlat4.xyz = u_xlat4.xyz / u_xlat4.www;
    u_xlat5.xyz = u_xlat4.xyz + _ShadowOffsets[0].xyz;
    vec3 txVec0 = vec3(u_xlat5.xy,u_xlat5.z);
    u_xlat5.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
    u_xlat6.xyz = u_xlat4.xyz + _ShadowOffsets[1].xyz;
    vec3 txVec1 = vec3(u_xlat6.xy,u_xlat6.z);
    u_xlat5.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
    u_xlat6.xyz = u_xlat4.xyz + _ShadowOffsets[2].xyz;
    u_xlat4.xyz = u_xlat4.xyz + _ShadowOffsets[3].xyz;
    vec3 txVec2 = vec3(u_xlat4.xy,u_xlat4.z);
    u_xlat5.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
    vec3 txVec3 = vec3(u_xlat6.xy,u_xlat6.z);
    u_xlat5.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
    u_xlat4 = u_xlat5 * u_xlat0.xxxx + _LightShadowData.xxxx;
    u_xlat0.x = dot(u_xlat4, vec4(0.25, 0.25, 0.25, 0.25));
    u_xlat4.xyz = u_xlat3.xyz + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat14.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat7.x = (-u_xlat1.z) * u_xlat7.x + u_xlat14.x;
    u_xlat7.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat1.w;
    u_xlat14.x = u_xlat7.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
    u_xlat7.x = u_xlat7.x * unity_LightmapFade.z + unity_LightmapFade.w;
    u_xlat7.x = (-u_xlat7.x) + 1.0;
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
    u_xlat0.x = u_xlat14.x + u_xlat0.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.xyz = u_xlat3.yyy * hlslcc_mtx4unity_WorldToLight[1].xyw;
    u_xlat1.xyz = hlslcc_mtx4unity_WorldToLight[0].xyw * u_xlat3.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_WorldToLight[2].xyw * u_xlat3.zzz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4unity_WorldToLight[3].xyw;
    u_xlat14.xy = u_xlat1.xy / u_xlat1.zz;
    u_xlatb1 = u_xlat1.z<0.0;
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat10_4 = texture(_LightTexture0, u_xlat14.xy, -8.0);
    u_xlat14.x = u_xlat1.x * u_xlat10_4.w;
    u_xlat1.xyz = (-u_xlat3.xyz) + _LightPos.xyz;
    u_xlat3.xyz = u_xlat3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat22 = u_xlat21 * _LightPos.w;
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
    u_xlat10_4 = texture(_LightTextureB0, vec2(u_xlat22));
    u_xlat14.x = u_xlat14.x * u_xlat10_4.w;
    u_xlat0.x = u_xlat0.x * u_xlat14.x;
    u_xlat14.x = u_xlat0.x;
    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = (-u_xlat3.xyz) * vec3(u_xlat21) + u_xlat1.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_21 = u_xlat10_2.w * 128.0;
    u_xlat16_22 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);
    u_xlat16_22 = inversesqrt(u_xlat16_22);
    u_xlat16_2.xyz = vec3(u_xlat16_22) * u_xlat16_2.xyz;
    u_xlat22 = dot(u_xlat3.xyz, u_xlat16_2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat2.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat0.x = max(u_xlat22, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * u_xlat16_21;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat14.x * u_xlat0.x;
    u_xlat1.xyz = unity_ColorSpaceLuminance.xyz * _LightColor.xyz;
    u_xlat14.xy = u_xlat1.yz + u_xlat1.xx;
    u_xlat21 = u_xlat14.y * u_xlat1.y;
    u_xlat14.x = _LightColor.z * unity_ColorSpaceLuminance.z + u_xlat14.x;
    u_xlat21 = sqrt(u_xlat21);
    u_xlat21 = dot(unity_ColorSpaceLuminance.ww, vec2(u_xlat21));
    u_xlat14.x = u_xlat21 + u_xlat14.x;
    u_xlat2.w = u_xlat14.x * u_xlat0.x;
    u_xlat0 = u_xlat7.xxxx * u_xlat2;
    SV_Target0 = exp2((-u_xlat0));
    return;
}
