[require]
GLSL >= 1.50

[vertex shader]
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _DetailAlbedoMap_ST;
uniform 	float _UVSec;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec2 in_TEXCOORD0;
in  vec2 in_TEXCOORD1;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
out vec4 vs_TEXCOORD2;
out vec4 vs_TEXCOORD3;
out vec4 vs_TEXCOORD4;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    u_xlatb0 = _UVSec==0.0;
    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;
    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4unity_ObjectToWorld[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat0.w = 0.0;
    vs_TEXCOORD2 = u_xlat0.wwwx;
    vs_TEXCOORD3 = u_xlat0.wwwy;
    vs_TEXCOORD4.w = u_xlat0.z;
    u_xlat0.x = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[0].x;
    u_xlat0.y = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[1].x;
    u_xlat0.z = in_NORMAL0.x * hlslcc_mtx4unity_WorldToObject[2].x;
    u_xlat1.x = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[0].y;
    u_xlat1.y = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[1].y;
    u_xlat1.z = in_NORMAL0.y * hlslcc_mtx4unity_WorldToObject[2].y;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.x = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[0].z;
    u_xlat1.y = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[1].z;
    u_xlat1.z = in_NORMAL0.z * hlslcc_mtx4unity_WorldToObject[2].z;
    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;
    return;
}
[fragment shader]
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_ColorSpaceDielectricSpec;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightColor0;
uniform 	vec4 _Color;
uniform 	float _Metallic;
uniform 	float _Glossiness;
uniform  sampler2D _MainTex;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
in  vec4 vs_TEXCOORD2;
in  vec4 vs_TEXCOORD3;
in  vec4 vs_TEXCOORD4;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec3 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
vec3 u_xlat4;
float u_xlat5;
vec3 u_xlat6;
vec2 u_xlat10;
float u_xlat11;
bool u_xlatb11;
float u_xlat15;
float u_xlat16;
float u_xlat17;
bool u_xlatb17;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;
    u_xlat15 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.x = vs_TEXCOORD2.w;
    u_xlat1.y = vs_TEXCOORD3.w;
    u_xlat1.z = vs_TEXCOORD4.w;
    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat15) + u_xlat1.xyz;
    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD1.xyz;
    u_xlat0.w = dot(u_xlat0.xyz, (-u_xlat3.xyz));
    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16 = max(u_xlat16, 0.00100000005);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
    u_xlat16 = dot(u_xlat0.xyz, u_xlat2.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));
    u_xlat10.x = max(u_xlat16, 0.0);
    u_xlat10.x = u_xlat10.x * u_xlat10.x;
    u_xlat1.x = (-_Glossiness) + 1.0;
    u_xlat6.x = u_xlat1.x * u_xlat1.x;
    u_xlat11 = u_xlat6.x * u_xlat6.x + -1.0;
    u_xlat10.x = u_xlat10.x * u_xlat11 + 1.0;
    u_xlat11 = u_xlat10.x * 3.14159274;
    u_xlat10.x = u_xlat11 * u_xlat10.x + 1.00000001e-007;
    u_xlat11 = u_xlat6.x * u_xlat6.x;
    u_xlat10.x = u_xlat11 / u_xlat10.x;
    u_xlat11 = (-u_xlat1.x) * u_xlat1.x + 1.0;
    u_xlat16 = u_xlat0.w * u_xlat11 + u_xlat6.x;
    u_xlat6.x = u_xlat0.x * u_xlat11 + u_xlat6.x;
    u_xlat6.x = u_xlat0.w * u_xlat6.x;
    u_xlat6.x = u_xlat0.x * u_xlat16 + u_xlat6.x;
    u_xlat6.x = u_xlat6.x + 9.99999975e-006;
    u_xlat6.x = 2.0 / u_xlat6.x;
    u_xlat10.x = u_xlat10.x * u_xlat6.x;
    u_xlat10.x = u_xlat10.x * 0.785398185;
    u_xlat6.x = max(u_xlat10.x, 9.99999975e-005);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlatb11 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat10.x = (u_xlatb11) ? u_xlat6.x : u_xlat10.x;
    u_xlat10.x = u_xlat0.x * u_xlat10.x;
    u_xlat10.x = max(u_xlat10.x, 0.0);
    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat6.xyz = _Color.xyz * u_xlat10_2.xyz + (-unity_ColorSpaceDielectricSpec.xyz);
    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;
    u_xlat6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat6.xyz + unity_ColorSpaceDielectricSpec.xyz;
    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlatb17 = u_xlat17!=0.0;
    u_xlat17 = u_xlatb17 ? 1.0 : float(0.0);
    u_xlat10.x = u_xlat10.x * u_xlat17;
    u_xlat3.xyz = u_xlat10.xxx * _LightColor0.xyz;
    u_xlat10.xy = (-u_xlat0.yw) + vec2(1.0, 1.0);
    u_xlat17 = u_xlat10.x * u_xlat10.x;
    u_xlat17 = u_xlat17 * u_xlat17;
    u_xlat10.x = u_xlat10.x * u_xlat17;
    u_xlat4.xyz = (-u_xlat6.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat6.xyz = u_xlat4.xyz * u_xlat10.xxx + u_xlat6.xyz;
    u_xlat6.xyz = u_xlat6.xyz * u_xlat3.xyz;
    u_xlat10.x = u_xlat10.y * u_xlat10.y;
    u_xlat10.x = u_xlat10.x * u_xlat10.x;
    u_xlat10.x = u_xlat10.y * u_xlat10.x;
    u_xlat15 = u_xlat0.y + u_xlat0.y;
    u_xlat5 = u_xlat0.y * u_xlat15;
    u_xlat5 = u_xlat5 * u_xlat1.x + -0.5;
    u_xlat10.x = u_xlat5 * u_xlat10.x + 1.0;
    u_xlat15 = (-u_xlat0.x) + 1.0;
    u_xlat1.x = u_xlat15 * u_xlat15;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat15 = u_xlat15 * u_xlat1.x;
    u_xlat5 = u_xlat5 * u_xlat15 + 1.0;
    u_xlat5 = u_xlat10.x * u_xlat5;
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
    u_xlat15 = (-_Metallic) * unity_ColorSpaceDielectricSpec.w + unity_ColorSpaceDielectricSpec.w;
    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat6.xyz;
    SV_Target0.w = 1.0;
    return;
}
