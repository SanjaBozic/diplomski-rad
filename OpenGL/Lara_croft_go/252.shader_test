[require]
GLSL >= 1.50

[vertex shader]
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4glstate_matrix_modelview0[4];
uniform 	float _LightAsQuad;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
out vec4 vs_TEXCOORD0;
out vec3 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4glstate_matrix_mvp[3];
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD0.zw = u_xlat0.zw;
    vs_TEXCOORD0.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4glstate_matrix_modelview0[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4glstate_matrix_modelview0[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4glstate_matrix_modelview0[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4glstate_matrix_modelview0[3].xyz;
    u_xlat1.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.xyz = (-u_xlat0.xyz) * vec3(-1.0, -1.0, 1.0) + in_NORMAL0.xyz;
    vs_TEXCOORD1.xyz = vec3(_LightAsQuad) * u_xlat0.xyz + u_xlat1.xyz;
    return;
}
[fragment shader]
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4unity_CameraToWorld[4];
uniform 	vec4 _LightPositionRange;
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightPos;
uniform 	vec4 _LightColor;
uniform 	vec4 hlslcc_mtx4unity_WorldToLight[4];
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _LightTextureB0;
uniform  samplerCube _ShadowMapTexture;
uniform  samplerCube _LightTexture0;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec2 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bool u_xlatb2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec4 u_xlat16_6;
lowp vec4 u_xlat10_7;
lowp vec4 u_xlat10_8;
float u_xlat9;
float u_xlat10;
mediump float u_xlat16_10;
bool u_xlatb10;
vec3 u_xlat12;
vec2 u_xlat19;
mediump float u_xlat16_19;
float u_xlat20;
float u_xlat27;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat27 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4unity_CameraToWorld[3].xyz;
    u_xlat2.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat3.xyz = u_xlat0.xyz + (-_LightPos.xyz);
    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat19.x = inversesqrt(u_xlat27);
    u_xlat4.xyz = (-u_xlat3.xyz) * u_xlat19.xxx + (-u_xlat2.xyz);
    u_xlat5.xyz = u_xlat19.xxx * u_xlat3.xyz;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat3.xyz);
    u_xlat19.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat19.x = max(u_xlat19.x, 0.00100000005);
    u_xlat19.x = inversesqrt(u_xlat19.x);
    u_xlat12.xyz = u_xlat19.xxx * u_xlat4.xyz;
    u_xlat10_4 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_4.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_19 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_19 = inversesqrt(u_xlat16_19);
    u_xlat16_4.xyz = vec3(u_xlat16_19) * u_xlat16_4.xyz;
    u_xlat19.x = dot(u_xlat16_4.xyz, u_xlat12.xyz);
    u_xlat19.y = dot((-u_xlat5.xyz), u_xlat12.xyz);
    u_xlat2.w = dot(u_xlat16_4.xyz, (-u_xlat5.xyz));
    u_xlat2.x = dot(u_xlat16_4.xyz, (-u_xlat2.xyz));
    u_xlat2.xy = max(u_xlat2.xw, vec2(0.0, 0.0));
    u_xlat19.xy = max(u_xlat19.xy, vec2(0.0, 0.0));
    u_xlat19.x = u_xlat19.x * u_xlat19.x;
    u_xlat10_4 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat10_5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat16_6 = (-u_xlat10_4.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_1 = u_xlat16_6.x * u_xlat16_6.x;
    u_xlat16_10 = u_xlat16_1 * u_xlat16_1 + -1.0;
    u_xlat10 = u_xlat19.x * u_xlat16_10 + 1.0;
    u_xlat19.x = u_xlat10 * 3.14159274;
    u_xlat10 = u_xlat19.x * u_xlat10 + 1.00000001e-007;
    u_xlat16_19 = u_xlat16_1 * u_xlat16_1;
    u_xlat10 = u_xlat16_19 / u_xlat10;
    u_xlat16_19 = (-u_xlat16_6.x) * u_xlat16_6.x + 1.0;
    u_xlat20 = u_xlat2.x * u_xlat16_19 + u_xlat16_1;
    u_xlat1.x = u_xlat2.y * u_xlat16_19 + u_xlat16_1;
    u_xlat1.x = u_xlat1.x * u_xlat2.x;
    u_xlat19.x = (-u_xlat2.x) + 1.0;
    u_xlat1.x = u_xlat2.y * u_xlat20 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x + 9.99999975e-006;
    u_xlat1.x = 2.0 / u_xlat1.x;
    u_xlat1.x = u_xlat10 * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * 0.785398185;
    u_xlat10 = max(u_xlat1.x, 9.99999975e-005);
    u_xlat10 = sqrt(u_xlat10);
    u_xlatb2 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat1.x = (u_xlatb2) ? u_xlat10 : u_xlat1.x;
    u_xlat1.x = u_xlat2.y * u_xlat1.x;
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat10 = dot(u_xlat10_4.xyz, u_xlat10_4.xyz);
    u_xlatb10 = u_xlat10!=0.0;
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat1.x = u_xlat10 * u_xlat1.x;
    u_xlat2.xzw = u_xlat0.yyy * hlslcc_mtx4unity_WorldToLight[1].xyz;
    u_xlat2.xzw = hlslcc_mtx4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat2.xzw;
    u_xlat0.xyz = hlslcc_mtx4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat2.xzw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4unity_WorldToLight[3].xyz;
    u_xlat10_7 = texture(_LightTexture0, u_xlat0.xyz, -8.0);
    u_xlat0.x = sqrt(u_xlat27);
    u_xlat9 = u_xlat27 * _LightPos.w;
    u_xlat10_8 = texture(_LightTextureB0, vec2(u_xlat9));
    u_xlat0.x = u_xlat0.x * _LightPositionRange.w;
    u_xlat0.x = u_xlat0.x * 0.970000029;
    u_xlatb0 = u_xlat10_3.x<u_xlat0.x;
    u_xlat0.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat10_8.w;
    u_xlat0.x = u_xlat10_7.w * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat2.xzw = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat27 = (-u_xlat19.y) + 1.0;
    u_xlat1.x = u_xlat19.y * u_xlat19.y;
    u_xlat1.x = dot(u_xlat1.xx, u_xlat16_6.xx);
    u_xlat1.x = u_xlat1.x + -0.5;
    u_xlat10 = u_xlat27 * u_xlat27;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat27 = u_xlat27 * u_xlat10;
    u_xlat3.xyz = u_xlat16_6.yzw * vec3(u_xlat27) + u_xlat10_4.xyz;
    u_xlat2.xzw = u_xlat2.xzw * u_xlat3.xyz;
    u_xlat27 = u_xlat19.x * u_xlat19.x;
    u_xlat27 = u_xlat27 * u_xlat27;
    u_xlat27 = u_xlat19.x * u_xlat27;
    u_xlat27 = u_xlat1.x * u_xlat27 + 1.0;
    u_xlat10 = (-u_xlat2.y) + 1.0;
    u_xlat19.x = u_xlat10 * u_xlat10;
    u_xlat19.x = u_xlat19.x * u_xlat19.x;
    u_xlat10 = u_xlat10 * u_xlat19.x;
    u_xlat1.x = u_xlat1.x * u_xlat10 + 1.0;
    u_xlat27 = u_xlat27 * u_xlat1.x;
    u_xlat27 = u_xlat2.y * u_xlat27;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    SV_Target0.xyz = u_xlat10_5.xyz * u_xlat0.xyz + u_xlat2.xzw;
    SV_Target0.w = 1.0;
    return;
}
