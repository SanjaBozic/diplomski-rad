[require]
GLSL >= 1.50

[vertex shader]
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4glstate_matrix_mvp[4];
uniform 	vec4 hlslcc_mtx4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4unity_WorldToObject[4];
uniform 	vec4 unity_FogParams;
uniform 	vec4 hlslcc_mtx4_ShadowMapMat[4];
uniform 	vec4 hlslcc_mtx4_ShadowMapMV[4];
uniform 	vec2 _WindDirection;
uniform 	float _WindWaveRepeat;
uniform 	float _BranchFrequency;
uniform 	float _WindFrequency;
uniform 	float _BranchAmplitude;
uniform 	float _WindAmplitude;
uniform 	vec4 _MinBounds;
uniform 	vec4 _MaxBounds;
uniform 	vec4 _ColorX;
uniform 	vec4 _ColorY;
uniform 	vec4 _ColorZ;
in  vec4 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec4 in_TEXCOORD1;
in  vec4 in_COLOR0;
out vec4 vs_COLOR0;
out vec3 vs_TEXCOORD0;
out float vs_TEXCOORD6;
out vec4 vs_TEXCOORD2;
out vec3 vs_TEXCOORD3;
out vec3 vs_TEXCOORD4;
out vec3 vs_TEXCOORD5;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
float u_xlat3;
vec2 u_xlat6;
vec2 u_xlat8;
float u_xlat9;
float u_xlat10;
void main()
{
    u_xlat0.xyz = (-_MinBounds.xyz) + _MaxBounds.xyz;
    u_xlat1.xz = u_xlat0.xz * in_TEXCOORD1.xy + _MinBounds.xz;
    u_xlat1.y = u_xlat0.y * in_COLOR0.x + _MinBounds.y;
    u_xlat0.x = u_xlat1.x * _WindWaveRepeat + in_COLOR0.z;
    u_xlat0.x = u_xlat0.x + _Time.y;
    u_xlat0.xy = u_xlat0.xx * vec2(0.375, 0.193000004);
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(vec2(_BranchFrequency, _BranchFrequency)) + vec2(0.5, 0.5);
    u_xlat0.xy = fract(u_xlat0.xy);
    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat6.xy = abs(u_xlat0.xy) * abs(u_xlat0.xy);
    u_xlat0.xy = -abs(u_xlat0.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat0.xy = u_xlat0.xy * u_xlat6.xy;
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * in_COLOR0.y;
    u_xlat2 = in_POSITION0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat2;
    u_xlat0.x = u_xlat0.x * _BranchAmplitude + u_xlat2.y;
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4unity_WorldToObject[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_WorldToObject[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_WorldToObject[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_WorldToObject[3].xyz * u_xlat2.www + u_xlat0.xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat2 = hlslcc_mtx4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
    u_xlat10 = u_xlat0.y + 1.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = u_xlat10 * u_xlat10 + (-u_xlat10);
    u_xlat2.xy = u_xlat1.xz * vec2(vec2(_WindWaveRepeat, _WindWaveRepeat));
    u_xlat2.xy = _Time.yy * vec2(1.125, 1.0) + u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(_WindFrequency);
    u_xlat2.xy = sin(u_xlat2.xy);
    u_xlat8.x = dot(_WindDirection.xy, _WindDirection.xy);
    u_xlat8.x = inversesqrt(u_xlat8.x);
    u_xlat8.xy = u_xlat8.xx * _WindDirection.xy;
    u_xlat2.xy = u_xlat8.xy * u_xlat2.xy;
    u_xlat2.xy = u_xlat2.xy * vec2(vec2(_WindAmplitude, _WindAmplitude)) + vec2(0.5, 0.5);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat8.xy = abs(u_xlat2.xy) * abs(u_xlat2.xy);
    u_xlat2.xy = -abs(u_xlat2.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat2.xy = u_xlat2.xy * u_xlat8.xy;
    u_xlat2.xy = vec2(u_xlat10) * u_xlat2.xy;
    u_xlat2.xz = u_xlat2.xy * in_COLOR0.ww + u_xlat0.xz;
    u_xlat2.y = u_xlat0.y;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat3 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat3 = inversesqrt(u_xlat3);
    u_xlat2.xyz = vec3(u_xlat3) * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4unity_WorldToObject[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4unity_WorldToObject[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_WorldToObject[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4unity_WorldToObject[3].xyz * u_xlat0.www + u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4glstate_matrix_mvp[1];
    u_xlat1 = hlslcc_mtx4glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4glstate_matrix_mvp[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD6 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat9 = dot(in_NORMAL0.xyz, in_NORMAL0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * in_NORMAL0.xyz;
    u_xlat9 = abs(u_xlat1.y) + abs(u_xlat1.x);
    u_xlat9 = abs(u_xlat1.z) + u_xlat9;
    u_xlat1.xyz = abs(u_xlat1.xyz) / vec3(u_xlat9);
    u_xlat2.xyz = u_xlat1.yyy * _ColorY.xyz;
    u_xlat1.xyw = _ColorX.xyz * u_xlat1.xxx + u_xlat2.xyz;
    vs_COLOR0.xyz = _ColorZ.xyz * u_xlat1.zzz + u_xlat1.xyw;
    vs_COLOR0.w = 1.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4unity_WorldToObject[2].xyz);
    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    vs_TEXCOORD0.xyz = vec3(u_xlat9) * u_xlat1.xyz;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2 = u_xlat0;
    vs_TEXCOORD3.xyz = vec3(0.0, 0.0, 0.0);
    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);
    u_xlat1.x = u_xlat0.y * hlslcc_mtx4_ShadowMapMV[1].z;
    u_xlat1.x = hlslcc_mtx4_ShadowMapMV[0].z * u_xlat0.x + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4_ShadowMapMV[2].z * u_xlat0.z + u_xlat1.x;
    u_xlat1.x = hlslcc_mtx4_ShadowMapMV[3].z * u_xlat0.w + u_xlat1.x;
    vs_TEXCOORD5.z = (-u_xlat1.x);
    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4_ShadowMapMat[1].xy;
    u_xlat0.xy = hlslcc_mtx4_ShadowMapMat[0].xy * u_xlat0.xx + u_xlat1.xy;
    u_xlat0.xy = hlslcc_mtx4_ShadowMapMat[2].xy * u_xlat0.zz + u_xlat0.xy;
    vs_TEXCOORD5.xy = hlslcc_mtx4_ShadowMapMat[3].xy * u_xlat0.ww + u_xlat0.xy;
    return;
}
[fragment shader]
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec4 unity_FogColor;
uniform 	vec4 _AmbientLightColor;
uniform 	vec4 _DirectionalLightColor;
uniform 	vec3 _DirectionalLightForward;
uniform 	vec4 _ShadowColor;
uniform 	vec2 _ShadowCameraSettings;
uniform 	vec4 _DepthColorUp;
uniform 	vec4 _DepthColorDown;
uniform 	vec2 _DepthBoundsUp;
uniform 	vec2 _DepthBoundsDown;
uniform  sampler2D _ShadowMapTexture;
in  vec4 vs_COLOR0;
in  vec3 vs_TEXCOORD0;
in  float vs_TEXCOORD6;
in  vec4 vs_TEXCOORD2;
in  vec3 vs_TEXCOORD5;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
vec2 u_xlat2;
vec2 u_xlat8;
float u_xlat9;
void main()
{
    u_xlat0.x = vs_TEXCOORD5.z + (-_ShadowCameraSettings.xxyx.z);
    u_xlat0.x = u_xlat0.x / _ShadowCameraSettings.xxyx.y;
    u_xlat10_1 = texture(_ShadowMapTexture, vs_TEXCOORD5.xy);
    u_xlatb0 = u_xlat0.x>=u_xlat10_1.x;
    u_xlat0.x = (u_xlatb0) ? 0.0 : 1.0;
    u_xlat0.xyz = max(u_xlat0.xxx, _ShadowColor.xyz);
    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
    u_xlat9 = dot(u_xlat1.xyz, _DirectionalLightForward.xyz);
    u_xlat1.xyz = vec3(u_xlat9) * _DirectionalLightColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
    u_xlat1.xyz = vs_COLOR0.xyz * _AmbientLightColor.xyz;
    u_xlat0.xyz = vs_COLOR0.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.w = vs_COLOR0.w;
    u_xlat1 = (-u_xlat0) + _DepthColorUp;
    u_xlat2.xy = (-vec2(_DepthBoundsUp.y, _DepthBoundsDown.y)) + vec2(_DepthBoundsUp.x, _DepthBoundsDown.x);
    u_xlat8.xy = vs_TEXCOORD2.yy + (-vec2(_DepthBoundsUp.y, _DepthBoundsDown.y));
    u_xlat2.xy = u_xlat8.xy / u_xlat2.xy;
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
    u_xlat2.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1 = u_xlat1 * u_xlat2.xxxx;
    u_xlat0 = _DepthColorUp.wwww * u_xlat1 + u_xlat0;
    u_xlat1 = (-u_xlat0) + _DepthColorDown;
    u_xlat1 = u_xlat1 * u_xlat2.yyyy;
    u_xlat0 = _DepthColorDown.wwww * u_xlat1 + u_xlat0;
    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat0.w;
    u_xlat9 = vs_TEXCOORD6;
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
    SV_Target0.xyz = vec3(u_xlat9) * u_xlat0.xyz + unity_FogColor.xyz;
    return;
}
