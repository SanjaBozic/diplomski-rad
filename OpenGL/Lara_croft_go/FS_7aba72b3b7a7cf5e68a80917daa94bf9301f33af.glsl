#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4unity_CameraToWorld[4];
uniform 	vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	vec4 unity_ColorSpaceLuminance;
uniform 	vec4 _LightDir;
uniform 	vec4 _LightColor;
uniform  sampler2D _CameraDepthTexture;
uniform  sampler2D _ShadowMapTexture;
uniform  sampler2D _CameraGBufferTexture0;
uniform  sampler2D _CameraGBufferTexture1;
uniform  sampler2D _CameraGBufferTexture2;
in  vec4 vs_TEXCOORD0;
in  vec3 vs_TEXCOORD1;
layout(location = 0) out vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_5;
vec3 u_xlat6;
vec2 u_xlat13;
mediump float u_xlat16_13;
bool u_xlatb13;
float u_xlat18;
mediump float u_xlat16_18;
float u_xlat19;
mediump float u_xlat16_20;
bool u_xlatb20;
float u_xlat21;
mediump float u_xlat16_21;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD1.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy / vs_TEXCOORD0.ww;
    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat1.xy);
    u_xlat18 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyw = hlslcc_mtx4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyw = u_xlat2.xyw + hlslcc_mtx4unity_CameraToWorld[3].xyz;
    u_xlat3.xyz = u_xlat2.xyw + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.xyw = u_xlat2.xyw + (-unity_ShadowFadeCenterAndType.xyz);
    u_xlat0.x = dot(u_xlat2.xyw, u_xlat2.xyw);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = (-u_xlat0.z) * u_xlat18 + u_xlat0.x;
    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.z;
    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + (-_LightDir.xyz);
    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat13.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat13.x = max(u_xlat13.x, 0.00100000005);
    u_xlat13.x = inversesqrt(u_xlat13.x);
    u_xlat2.xyz = u_xlat13.xxx * u_xlat2.xyz;
    u_xlat10_3 = texture(_CameraGBufferTexture2, u_xlat1.xy);
    u_xlat16_3.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_13 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_13 = inversesqrt(u_xlat16_13);
    u_xlat16_3.xyz = vec3(u_xlat16_13) * u_xlat16_3.xyz;
    u_xlat13.x = dot(u_xlat16_3.xyz, u_xlat2.xyz);
    u_xlat13.y = dot((-_LightDir.xyz), u_xlat2.xyz);
    u_xlat13.xy = max(u_xlat13.xy, vec2(0.0, 0.0));
    u_xlat13.x = u_xlat13.x * u_xlat13.x;
    u_xlat10_2 = texture(_CameraGBufferTexture1, u_xlat1.xy);
    u_xlat16_4 = (-u_xlat10_2.wxyz) + vec4(1.0, 1.0, 1.0, 1.0);
    u_xlat16_20 = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_21 = u_xlat16_20 * u_xlat16_20 + -1.0;
    u_xlat13.x = u_xlat13.x * u_xlat16_21 + 1.0;
    u_xlat21 = u_xlat13.x * 3.14159274;
    u_xlat13.x = u_xlat21 * u_xlat13.x + 1.00000001e-007;
    u_xlat16_21 = u_xlat16_20 * u_xlat16_20;
    u_xlat13.x = u_xlat16_21 / u_xlat13.x;
    u_xlat6.x = dot(u_xlat16_3.xyz, (-u_xlat6.xyz));
    u_xlat6.y = dot(u_xlat16_3.xyz, (-_LightDir.xyz));
    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
    u_xlat16_18 = (-u_xlat16_4.x) * u_xlat16_4.x + 1.0;
    u_xlat3.x = u_xlat6.x * u_xlat16_18 + u_xlat16_20;
    u_xlat18 = u_xlat6.y * u_xlat16_18 + u_xlat16_20;
    u_xlat18 = u_xlat18 * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat6.y * u_xlat3.x + u_xlat18;
    u_xlat18 = u_xlat18 + 9.99999975e-006;
    u_xlat18 = 2.0 / u_xlat18;
    u_xlat18 = u_xlat13.x * u_xlat18;
    u_xlat18 = u_xlat18 * 0.785398185;
    u_xlat13.x = max(u_xlat18, 9.99999975e-005);
    u_xlat13.x = sqrt(u_xlat13.x);
    u_xlatb20 = unity_ColorSpaceLuminance.w==0.0;
    u_xlat18 = (u_xlatb20) ? u_xlat13.x : u_xlat18;
    u_xlat18 = u_xlat6.y * u_xlat18;
    u_xlat18 = max(u_xlat18, 0.0);
    u_xlat13.x = dot(u_xlat10_2.xyz, u_xlat10_2.xyz);
    u_xlatb13 = u_xlat13.x!=0.0;
    u_xlat13.x = u_xlatb13 ? 1.0 : float(0.0);
    u_xlat18 = u_xlat18 * u_xlat13.x;
    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat1.xy);
    u_xlat10_5 = texture(_CameraGBufferTexture0, u_xlat1.xy);
    u_xlat0.x = u_xlat0.x + u_xlat10_3.x;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat1.xyz = u_xlat0.xxx * _LightColor.xyz;
    u_xlat3.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat0.x = (-u_xlat13.y) + 1.0;
    u_xlat18 = u_xlat13.y * u_xlat13.y;
    u_xlat18 = dot(vec2(u_xlat18), u_xlat16_4.xx);
    u_xlat18 = u_xlat18 + -0.5;
    u_xlat19 = u_xlat0.x * u_xlat0.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat0.x = u_xlat0.x * u_xlat19;
    u_xlat2.xyz = u_xlat16_4.yzw * u_xlat0.xxx + u_xlat10_2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat0.x = u_xlat6.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0.x = u_xlat18 * u_xlat0.x + 1.0;
    u_xlat6.x = (-u_xlat6.y) + 1.0;
    u_xlat19 = u_xlat6.x * u_xlat6.x;
    u_xlat19 = u_xlat19 * u_xlat19;
    u_xlat6.x = u_xlat6.x * u_xlat19;
    u_xlat6.x = u_xlat18 * u_xlat6.x + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat6.y * u_xlat0.x;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat10_5.xyz * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.w = 1.0;
    SV_Target0 = exp2((-u_xlat0));
    return;
}