[require]
GLSL >= 4.30

[vertex shader]
#version 430 core
#extension GL_ARB_shader_clock : enable
float saturate( float v ) { return clamp( v, 0.0, 1.0 ); }
vec2 saturate( vec2 v ) { return clamp( v, 0.0, 1.0 ); }
vec3 saturate( vec3 v ) { return clamp( v, 0.0, 1.0 ); }
vec4 saturate( vec4 v ) { return clamp( v, 0.0, 1.0 ); }
vec4 tex2Dlod( sampler2D image, vec4 texcoord ) { return textureLod( image, texcoord.xy, texcoord.w ); }
vec4 tex3Dlod( sampler3D image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBElod( samplerCube image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 tex2DARRAYlod( sampler2DArray image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBEARRAYlod( samplerCubeArray image, vec4 texcoord, float lod ) { return textureLod( image, texcoord.xyzw, lod ); }

uniform vec4 _va_freqHigh [8];
uniform vec4 _va_freqLow [4];

in vec4 in_Position;
in vec4 in_Normal;
in vec4 in_Tangent;
in vec2 in_TexCoord;

out vec4 vofi_TexCoord2;
out vec4 vofi_TexCoord1;
out vec4 vofi_TexCoord0;

float dot3 ( vec3 a, vec3 b ) { return dot( a, b ); }
float dot3 ( vec3 a, vec4 b ) { return dot( a, b.xyz ); }
float dot3 ( vec4 a, vec3 b ) { return dot( a.xyz, b ); }
float dot3 ( vec4 a, vec4 b ) { return dot( a.xyz, b.xyz ); }
float dot4 ( vec4 a, vec4 b ) { return dot( a, b ); }
float dot4 ( vec2 a, vec4 b ) { return dot( vec4( a, 0.0, 1.0 ), b ); }
void main() {
	{
		vec4 position = in_Position * _va_freqLow[0 ] + _va_freqLow[1 ];
		vec4 normal = in_Normal * 2.0 - 1.0;
		vec4 tangent = in_Tangent * 2.0 - 1.0;
		vec3 bitangent = cross( normal.xyz, tangent.xyz ) * tangent.w;
		position.x *= _va_freqHigh[0 ].w;
		vec3 tempPosition = position.xyz;
		vec3 tempNormal = normal.xyz;
		gl_Position.x = dot4( position, _va_freqHigh[1 ] );
		gl_Position.y = dot4( position, _va_freqHigh[2 ] );
		gl_Position.z = dot4( position, _va_freqHigh[3 ] );
		gl_Position.w = dot4( position, _va_freqHigh[4 ] );
		vofi_TexCoord0.xy = in_TexCoord.xy;
		vofi_TexCoord0.z = saturate( exp2( -( max( gl_Position.w - _va_freqLow[2 ].x, 0.0 ) * _va_freqLow[2 ].z ) ) );
		vofi_TexCoord0.w = exp2( -gl_Position.w * 0.001 );
		vec3 worldPos = vec3( 0.0 );
		worldPos.x = dot4( position, _va_freqHigh[5 ] );
		worldPos.y = dot4( position, _va_freqHigh[6 ] );
		worldPos.z = dot4( position, _va_freqHigh[7 ] );
		vec3 viewDir;
		viewDir = -normalize( worldPos - _va_freqLow[3 ].xyz );
		vec3 worldNormal = vec3( 0.0 );
		worldNormal.x = dot3( normal, _va_freqHigh[5 ] );
		worldNormal.y = dot3( normal, _va_freqHigh[6 ] );
		worldNormal.z = dot3( normal, _va_freqHigh[7 ] );
		worldNormal = normalize( worldNormal );
		vec3 screenNormal = vec3( 0.0 );
		screenNormal.x = dot3( normal, _va_freqHigh[1 ] );
		screenNormal.y = dot3( normal, _va_freqHigh[2 ] );
		screenNormal.z = dot3( normal, _va_freqHigh[3 ] );
		screenNormal = normalize( screenNormal );
		vofi_TexCoord1.xyz = 1.0 - ( cos( abs( worldNormal ) * 3.14 ) * 0.5 + 0.5 );
		vofi_TexCoord1.w = pow( saturate( dot( viewDir, worldNormal ) ), 5.0 );
		vofi_TexCoord2.xyz = saturate( in_Position.xyz * _va_freqLow[0 ].xyz + _va_freqLow[1 ].xyz );
		vofi_TexCoord2.w = 0.0;
	}
}
[fragment shader]
#version 430 core
#extension GL_ARB_shader_clock : enable
void clip( float v ) { if ( v < 0.0 ) { discard; } }
void clip( vec2 v ) { if ( any( lessThan( v, vec2( 0.0 ) ) ) ) { discard; } }
void clip( vec3 v ) { if ( any( lessThan( v, vec3( 0.0 ) ) ) ) { discard; } }
void clip( vec4 v ) { if ( any( lessThan( v, vec4( 0.0 ) ) ) ) { discard; } }

float saturate( float v ) { return clamp( v, 0.0, 1.0 ); }
vec2 saturate( vec2 v ) { return clamp( v, 0.0, 1.0 ); }
vec3 saturate( vec3 v ) { return clamp( v, 0.0, 1.0 ); }
vec4 saturate( vec4 v ) { return clamp( v, 0.0, 1.0 ); }

vec4 tex2D( sampler2D image, vec2 texcoord ) { return texture( image, texcoord.xy ); }
vec4 tex2D( sampler2DShadow image, vec3 texcoord ) { return vec4( texture( image, texcoord.xyz ) ); }
vec4 tex2DARRAY( sampler2DArray image, vec3 texcoord ) { return texture( image, texcoord.xyz ); }

vec4 tex2D( sampler2D image, vec2 texcoord, vec2 dx, vec2 dy ) { return textureGrad( image, texcoord.xy, dx, dy ); }
vec4 tex2D( sampler2DShadow image, vec3 texcoord, vec2 dx, vec2 dy ) { return vec4( textureGrad( image, texcoord.xyz, dx, dy ) ); }
vec4 tex2DARRAY( sampler2DArray image, vec3 texcoord, vec2 dx, vec2 dy ) { return textureGrad( image, texcoord.xyz, dx, dy ); }

vec4 texCUBE( samplerCube image, vec3 texcoord ) { return texture( image, texcoord.xyz ); }
vec4 texCUBE( samplerCubeShadow image, vec4 texcoord ) { return vec4( texture( image, texcoord.xyzw ) ); }
vec4 texCUBEARRAY( samplerCubeArray image, vec4 texcoord ) { return texture( image, texcoord.xyzw ); }

vec4 tex1Dproj( sampler1D image, vec2 texcoord ) { return textureProj( image, texcoord ); }
vec4 tex2Dproj( sampler2D image, vec3 texcoord ) { return textureProj( image, texcoord ); }
vec4 tex3Dproj( sampler3D image, vec4 texcoord ) { return textureProj( image, texcoord ); }

vec4 tex1Dbias( sampler1D image, vec4 texcoord ) { return texture( image, texcoord.x, texcoord.w ); }
vec4 tex2Dbias( sampler2D image, vec4 texcoord ) { return texture( image, texcoord.xy, texcoord.w ); }
vec4 tex2DARRAYbias( sampler2DArray image, vec4 texcoord ) { return texture( image, texcoord.xyz, texcoord.w ); }
vec4 tex3Dbias( sampler3D image, vec4 texcoord ) { return texture( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBEbias( samplerCube image, vec4 texcoord ) { return texture( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBEARRAYbias( samplerCubeArray image, vec4 texcoord, float bias ) { return texture( image, texcoord.xyzw, bias); }

vec4 tex1Dlod( sampler1D image, vec4 texcoord ) { return textureLod( image, texcoord.x, texcoord.w ); }
vec4 tex2Dlod( sampler2D image, vec4 texcoord ) { return textureLod( image, texcoord.xy, texcoord.w ); }
vec4 tex2DARRAYlod( sampler2DArray image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 tex3Dlod( sampler3D image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBElod( samplerCube image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBEARRAYlod( samplerCubeArray image, vec4 texcoord, float lod ) { return textureLod( image, texcoord.xyzw, lod ); }

vec4 tex2DGatherRed( sampler2D image, vec2 texcoord ) { return textureGather( image, texcoord, 0 ); }
vec4 tex2DGatherGreen( sampler2D image, vec2 texcoord ) { return textureGather( image, texcoord, 1 ); }
vec4 tex2DGatherBlue( sampler2D image, vec2 texcoord ) { return textureGather( image, texcoord, 2 ); }
vec4 tex2DGatherAlpha( sampler2D image, vec2 texcoord ) { return textureGather( image, texcoord, 3 ); }

vec4 tex2DGatherOffsetRed( sampler2D image, vec2 texcoord, const ivec2 v0 ) { return textureGatherOffset( image, texcoord, v0, 0 ); }
vec4 tex2DGatherOffsetGreen( sampler2D image, vec2 texcoord, const ivec2 v0 ) { return textureGatherOffset( image, texcoord, v0, 1 ); }
vec4 tex2DGatherOffsetBlue( sampler2D image, vec2 texcoord, const ivec2 v0 ) { return textureGatherOffset( image, texcoord, v0, 2 ); }
vec4 tex2DGatherOffsetAlpha( sampler2D image, vec2 texcoord, const ivec2 v0 ) { return textureGatherOffset( image, texcoord, v0, 3 ); }

#define tex2DGatherOffsetsRed( image, texcoord, v0, v1, v2, v3 ) textureGatherOffsets( image, texcoord, ivec2[]( v0, v1, v2, v3 ), 0 )
#define tex2DGatherOffsetsGreen( image, texcoord, v0, v1, v2, v3 ) textureGatherOffsets( image, texcoord, ivec2[]( v0, v1, v2, v3 ), 1 )
#define tex2DGatherOffsetsBlue( image, texcoord, v0, v1, v2, v3 ) textureGatherOffsets( image, texcoord, ivec2[]( v0, v1, v2, v3 ), 2 )
#define tex2DGatherOffsetsAlpha( image, texcoord, v0, v1, v2, v3 ) textureGatherOffsets( image, texcoord, ivec2[]( v0, v1, v2, v3 ), 3 )

uniform vec4 _fa_freqHigh [6];
uniform vec4 _fa_freqLow [1];
uniform sampler2D samp_viewdepthmap;
uniform sampler2D samp_transmap;

in vec4 vofi_TexCoord2;
in vec4 vofi_TexCoord1;
in vec4 gl_FragCoord;

out vec4 out_FragColor0;

vec2 screenPosToTexcoord ( vec2 pos, vec4 bias_scale ) { return ( pos * bias_scale.zw + bias_scale.xy ); }
vec2 screenPosToTexcoord ( vec2 pos, vec4 bias_scale, vec4 resolution_scale ) { return ( ( pos * bias_scale.zw + bias_scale.xy ) * resolution_scale.xy ); }
float tex2Ddepth ( sampler2D image, vec2 texcoord ) { return tex2Dlod( image, vec4( texcoord, 0.0, 0.0 ) ).x; }
float GetFragmentDepth ( vec4 fragmentPos ) { return fragmentPos.z; }
void main() {
	{
		float interpolatedDepth = GetFragmentDepth( gl_FragCoord );
		vec2 screenTC = screenPosToTexcoord( gl_FragCoord.xy, _fa_freqHigh[0 ] );
		float depth = tex2Ddepth( samp_viewdepthmap, screenTC );
		float dstDepth = 1.0 / ( 1.0 - depth );
		float srcDepth = 1.0 / ( 1.0 - interpolatedDepth );
		float intersect = saturate( ( dstDepth - srcDepth ) / 5.0 );
		intersect = cos( intersect * 6.28 ) * -0.5 + 0.6 ;
		vec2 diffuseTC1 = vec2( (vofi_TexCoord2.x + vofi_TexCoord2.y) * 0.5 * _fa_freqHigh[1 ].x + _fa_freqLow[0 ].x * _fa_freqHigh[1 ].z, vofi_TexCoord2.z * _fa_freqHigh[1 ].y + _fa_freqLow[0 ].x * (- _fa_freqHigh[1 ].w));
		vec2 diffuseTC2 = vec2( (vofi_TexCoord2.x + vofi_TexCoord2.y) * 0.5 * _fa_freqHigh[2 ].x + _fa_freqLow[0 ].x * _fa_freqHigh[2 ].z, vofi_TexCoord2.z * _fa_freqHigh[2 ].y + _fa_freqLow[0 ].x * (- _fa_freqHigh[2 ].w));
		vec3 diffuse1 = tex2D( samp_transmap, diffuseTC1 ).xyz * vec3( 0.35 );
		vec3 diffuse2 = tex2D( samp_transmap, diffuseTC2 ).xyz * vec3( 0.35 );
		vec2 pulseTC = vec2( (vofi_TexCoord2.x + vofi_TexCoord2.y) * 0.5 * _fa_freqHigh[3 ].x + _fa_freqLow[0 ].x * _fa_freqHigh[3 ].z, vofi_TexCoord2.z * _fa_freqHigh[3 ].y + _fa_freqLow[0 ].x * (- _fa_freqHigh[3 ].w));
		vec3 pulse = vec3( tex2D( samp_transmap, pulseTC ).w );
		pulse *= pulse;
		float pulseMask = pulse.x;
		vec4 colBlue = vec4(0.1, 0.2, 1.0, 0.5);
		vec4 colRed = vec4(1.0, 0.2, 0.1, 0.5);
		vec4 colGray = vec4( 0.5 );
		vec4 boundaryColor = mix(mix( colGray, colBlue, clamp( _fa_freqHigh[4 ].x, 0.0, 1.0) ) , colRed, clamp(( _fa_freqHigh[4 ].x - 1), 0.0, 1.0) );
		vec4 final = vec4( 0.0 );
		float fresnel = clamp( 1 - vofi_TexCoord1.w, 0.0, 0.2 );
		float objHeight = vofi_TexCoord2.z;
		final.w = boundaryColor.w + 2.0 * intersect + diffuse1.x + diffuse2.x + pow( objHeight, 8.0 ) + fresnel;
		final.w *= 0.4;
		final.xyz = vec3( final.w );
		final.xyz *= boundaryColor.xyz * (vec3( intersect * 2.0 + pow( objHeight, 8.0 ) ));
		final.w *= final.w * ( sin( _fa_freqLow[0 ].x * 4.0 ) * 0.1 + 0.9 ) * 0.6;
		out_FragColor0 = final * _fa_freqHigh[5 ];
	}
}
