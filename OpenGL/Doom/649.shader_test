[require]
GLSL >= 4.30

[compute shader]
#version 430 core
#extension GL_ARB_shader_clock : enable
//This is a compute Shader

float saturate( float v ) { return clamp( v, 0.0, 1.0 ); }
vec2 saturate( vec2 v ) { return clamp( v, 0.0, 1.0 ); }
vec3 saturate( vec3 v ) { return clamp( v, 0.0, 1.0 ); }
vec4 saturate( vec4 v ) { return clamp( v, 0.0, 1.0 ); }

vec4 tex2D( sampler2D image, vec2 texcoord ) { return texture( image, texcoord.xy ); }
vec4 tex2D( sampler2DShadow image, vec3 texcoord ) { return vec4( texture( image, texcoord.xyz ) ); }
vec4 tex2DARRAY( sampler2DArray image, vec3 texcoord ) { return texture( image, texcoord.xyz ); }

vec4 tex2D( sampler2D image, vec2 texcoord, vec2 dx, vec2 dy ) { return textureGrad( image, texcoord.xy, dx, dy ); }
vec4 tex2D( sampler2DShadow image, vec3 texcoord, vec2 dx, vec2 dy ) { return vec4( textureGrad( image, texcoord.xyz, dx, dy ) ); }
vec4 tex2DARRAY( sampler2DArray image, vec3 texcoord, vec2 dx, vec2 dy ) { return textureGrad( image, texcoord.xyz, dx, dy ); }

vec4 texCUBE( samplerCube image, vec3 texcoord ) { return texture( image, texcoord.xyz ); }
vec4 texCUBE( samplerCubeShadow image, vec4 texcoord ) { return vec4( texture( image, texcoord.xyzw ) ); }
vec4 texCUBEARRAY( samplerCubeArray image, vec4 texcoord ) { return texture( image, texcoord.xyzw ); }

vec4 tex1Dproj( sampler1D image, vec2 texcoord ) { return textureProj( image, texcoord ); }
vec4 tex2Dproj( sampler2D image, vec3 texcoord ) { return textureProj( image, texcoord ); }
vec4 tex3Dproj( sampler3D image, vec4 texcoord ) { return textureProj( image, texcoord ); }

vec4 tex1Dlod( sampler1D image, vec4 texcoord ) { return textureLod( image, texcoord.x, texcoord.w ); }
vec4 tex2Dlod( sampler2D image, vec4 texcoord ) { return textureLod( image, texcoord.xy, texcoord.w ); }
vec4 tex2DARRAYlod( sampler2DArray image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 tex3Dlod( sampler3D image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBElod( samplerCube image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBEARRAYlod( samplerCubeArray image, vec4 texcoord, float lod ) { return textureLod( image, texcoord.xyzw, lod ); }

vec4 tex2DGatherRed( sampler2D image, vec2 texcoord ) { return textureGather( image, texcoord, 0 ); }
vec4 tex2DGatherGreen( sampler2D image, vec2 texcoord ) { return textureGather( image, texcoord, 1 ); }
vec4 tex2DGatherBlue( sampler2D image, vec2 texcoord ) { return textureGather( image, texcoord, 2 ); }
vec4 tex2DGatherAlpha( sampler2D image, vec2 texcoord ) { return textureGather( image, texcoord, 3 ); }

vec4 tex2DGatherOffsetRed( sampler2D image, vec2 texcoord, const ivec2 v0 ) { return textureGatherOffset( image, texcoord, v0, 0 ); }
vec4 tex2DGatherOffsetGreen( sampler2D image, vec2 texcoord, const ivec2 v0 ) { return textureGatherOffset( image, texcoord, v0, 1 ); }
vec4 tex2DGatherOffsetBlue( sampler2D image, vec2 texcoord, const ivec2 v0 ) { return textureGatherOffset( image, texcoord, v0, 2 ); }
vec4 tex2DGatherOffsetAlpha( sampler2D image, vec2 texcoord, const ivec2 v0 ) { return textureGatherOffset( image, texcoord, v0, 3 ); }

#define tex2DGatherOffsetsRed( image, texcoord, v0, v1, v2, v3 ) textureGatherOffsets( image, texcoord, ivec2[]( v0, v1, v2, v3 ), 0 )
#define tex2DGatherOffsetsGreen( image, texcoord, v0, v1, v2, v3 ) textureGatherOffsets( image, texcoord, ivec2[]( v0, v1, v2, v3 ), 1 )
#define tex2DGatherOffsetsBlue( image, texcoord, v0, v1, v2, v3 ) textureGatherOffsets( image, texcoord, ivec2[]( v0, v1, v2, v3 ), 2 )
#define tex2DGatherOffsetsAlpha( image, texcoord, v0, v1, v2, v3 ) textureGatherOffsets( image, texcoord, ivec2[]( v0, v1, v2, v3 ), 3 )

uniform gputranscodeparms_ubo { vec4 gputranscodeparms[64]; };
layout( local_size_x = 8, local_size_y = 8, local_size_z = 1 ) in ;
struct dxt5block_t {
	uint alpha [ 2 ] ;
	uint rgb [ 2 ] ;
};
layout( std430 ) buffer gputranscodecoefficients_b {
	restrict readonly uint gputranscodecoefficients[ ];
};
layout( std430 ) buffer gputranscodecover_b {
	restrict readonly uint gputranscodecover[ ];
};
layout( std430 ) buffer gputranscodephysicalpages_b {
	restrict dxt5block_t gputranscodephysicalpages[ ];
};
float w2 (float a) { return (1.0/6.0)*(a*(a*(-3.0*a + 3.0) + 3.0) + 1.0); }
float w3 (float a) { return (1.0/6.0)*(a*a*a); }
float g1 (float a) { return w2(a) + w3(a); }
uint ComputeTiledOffset ( const uint linearX, const uint linearY, const uint tilesPerRow ) {
	const uint MICRO_TILE_WIDTH = 8;
	const uint MICRO_TILE_HEIGHT = 8;
	const uint MICRO_TILE_DXT_BLOCKS = 64;
	uint tileRowIndex = linearY / MICRO_TILE_WIDTH;
	uint tileColumnIndex = linearX / MICRO_TILE_HEIGHT;
	uint tileOffset = ( ( tileRowIndex * tilesPerRow ) + tileColumnIndex ) * MICRO_TILE_DXT_BLOCKS;
	uint elementOffset = 0;
	elementOffset |= ( ( linearX >> 0 ) & 0x1 ) << 0;
	elementOffset |= ( ( linearY >> 0 ) & 0x1 ) << 1;
	elementOffset |= ( ( linearX >> 1 ) & 0x1 ) << 2;
	elementOffset |= ( ( linearY >> 1 ) & 0x1 ) << 3;
	elementOffset |= ( ( linearX >> 2 ) & 0x1 ) << 4;
	elementOffset |= ( ( linearY >> 2 ) & 0x1 ) << 5;
	return tileOffset + elementOffset;
}
uint PackRGB ( const uint r, const uint g, const uint b ) {
	return ( r | ( g << 8 ) | ( b << 16 ) );
}
void UnpackRGB ( const uint rgb, out uint r, out uint g, out uint b ) {
	r = rgb & 0xFF;
	g = ( rgb >> 8 ) & 0xFF;
	b = ( rgb >> 16 );
}
vec3 UnpackRGBFloat ( const uint rgb ) {
	vec3 rgbF;
	rgbF.r = float( rgb & 0xFF );
	rgbF.g = float( ( rgb >> 8 ) & 0xFF );
	rgbF.b = float( ( rgb >> 16 ) );
	return rgbF;
}
void YUVtoRGB ( inout int r, inout int g, inout int b ) {
	g -= ( ( r + 0 ) >> 1 );
	r -= ( ( b + 1 ) >> 1 ) - g;
	b += r;
}
int SignExtend ( uint val ) {
	val |= uint( ( ( val & 0x8000 ) != 0 ) ? 0xFFFF0000 : 0 );
	return int( val );
}
void DecodeAlphaPair ( const uint coeffsOffset, out uint alpha1, out uint alpha2 ) {
	const uint COEFF_CHANNEL_STRIDE = 8192;
	const uint iShift = 3;
	const int iDiv = 1 << iShift;
	const int iBias = 1027;
	const uint a = gputranscodecoefficients[ coeffsOffset + COEFF_CHANNEL_STRIDE * 3 ];
	int a1 = SignExtend( a & 0xFFFF ) + iBias;
	a1 = clamp( a1, 0, 2040 );
	a1 /= iDiv;
	alpha1 = a1;
	int a2 = SignExtend( a >> 16 ) + iBias;
	a2 = clamp( a2, 0, 2040 );
	a2 /= iDiv;
	alpha2 = a2;
}
void DecodeRGBPair ( const uint coeffsOffset, out uint color1, out uint color2 ) {
	const uint COEFF_CHANNEL_STRIDE = 8192;
	const int iShift = 3;
	const int iDiv = 1 << iShift;
	const int iBias = 1027;
	const uint y = gputranscodecoefficients[ coeffsOffset + COEFF_CHANNEL_STRIDE * 0 ];
	const uint u = gputranscodecoefficients[ coeffsOffset + COEFF_CHANNEL_STRIDE * 1 ];
	const uint v = gputranscodecoefficients[ coeffsOffset + COEFF_CHANNEL_STRIDE * 2 ];
	int g1 = SignExtend( y & 0xFFFF ) + iBias;
	int r1 = -SignExtend( u & 0xFFFF );
	int b1 = SignExtend( v & 0xFFFF );
	YUVtoRGB( r1, g1, b1 );
	r1 = clamp( r1, 0, 2040 );
	g1 = clamp( g1, 0, 2040 );
	b1 = clamp( b1, 0, 2040 );
	g1 /= iDiv;
	b1 /= iDiv;
	r1 /= iDiv;
	color1 = PackRGB( r1, g1, b1 );
	int g2 = SignExtend( y >> 16 ) + iBias;
	int r2 = -SignExtend( u >> 16 );
	int b2 = SignExtend( v >> 16 );
	YUVtoRGB( r2, g2, b2 );
	r2 = clamp( r2, 0, 2040 );
	g2 = clamp( g2, 0, 2040 );
	b2 = clamp( b2, 0, 2040 );
	g2 /= iDiv;
	b2 /= iDiv;
	r2 /= iDiv;
	color2 = PackRGB( r2, g2, b2 );
}
void DecodeAlpha4x4 ( const uint coeffsOffset, out uint alphas[ 16 ] ) {
	DecodeAlphaPair( coeffsOffset + 0, alphas[ 0 ], alphas[ 1 ] );
	DecodeAlphaPair( coeffsOffset + 2, alphas[ 3 ], alphas[ 2 ] );
	DecodeAlphaPair( coeffsOffset + 1, alphas[ 4 ], alphas[ 5 ] );
	DecodeAlphaPair( coeffsOffset + 3, alphas[ 7 ], alphas[ 6 ] );
	DecodeAlphaPair( coeffsOffset + 5, alphas[ 8 ], alphas[ 9 ] );
	DecodeAlphaPair( coeffsOffset + 7, alphas[ 11 ], alphas[ 10 ] );
	DecodeAlphaPair( coeffsOffset + 4, alphas[ 12 ], alphas[ 13 ] );
	DecodeAlphaPair( coeffsOffset + 6, alphas[ 15 ], alphas[ 14 ] );
}
void DecodeRGB4x4 ( const uint coeffsOffset, out uint colors[ 16 ] ) {
	DecodeRGBPair( coeffsOffset + 0, colors[ 0 ], colors[ 1 ] );
	DecodeRGBPair( coeffsOffset + 2, colors[ 3 ], colors[ 2 ] );
	DecodeRGBPair( coeffsOffset + 1, colors[ 4 ], colors[ 5 ] );
	DecodeRGBPair( coeffsOffset + 3, colors[ 7 ], colors[ 6 ] );
	DecodeRGBPair( coeffsOffset + 5, colors[ 8 ], colors[ 9 ] );
	DecodeRGBPair( coeffsOffset + 7, colors[ 11 ], colors[ 10 ] );
	DecodeRGBPair( coeffsOffset + 4, colors[ 12 ], colors[ 13 ] );
	DecodeRGBPair( coeffsOffset + 6, colors[ 15 ], colors[ 14 ] );
}
void GetAlphaMinMax ( const uint alphas[ 16 ], out uint minAlpha, out uint maxAlpha ) {
	minAlpha = 255;
	maxAlpha = 0;
	for ( int i = 0; i < 16; ++i ) {
		minAlpha = min( alphas[ i ], minAlpha );
		maxAlpha = max( alphas[ i ], maxAlpha );
	}
}
void GetRGBMinMaxPCA ( const uint colors[ 16 ], out uint minColor[ 3 ], out uint maxColor[ 3 ] ) {
	vec3 averageColor = vec3( 0.0 ); for ( int i = 0; i < 16; ++i ) {
		averageColor += UnpackRGBFloat( colors[ i ] );
	}
	averageColor /= 16.0;
	float covariance[] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }; for ( int i = 0; i < 16; ++i ) {
		const vec3 rgb = UnpackRGBFloat( colors[ i ] ) - averageColor;
		covariance[ 0 ] += rgb[ 0 ] * rgb[ 0 ];
		covariance[ 1 ] += rgb[ 0 ] * rgb[ 1 ];
		covariance[ 2 ] += rgb[ 0 ] * rgb[ 2 ];
		covariance[ 3 ] += rgb[ 1 ] * rgb[ 1 ];
		covariance[ 4 ] += rgb[ 1 ] * rgb[ 2 ];
		covariance[ 5 ] += rgb[ 2 ] * rgb[ 2 ];
	}
	const float eps = 0.001;
	covariance[ 0 ] += eps;
	covariance[ 3 ] += eps;
	covariance[ 5 ] += eps;
	vec3 axis = vec3( 0.577, 0.577, 0.577 );
	const int numPowerIterations = 2; for ( int i = 0; i < numPowerIterations; ++i ) {
		const vec3 temp = vec3(
		axis.r * covariance[ 0 ] + axis.g * covariance[ 1 ] + axis.b * covariance[ 2 ],
		axis.r * covariance[ 1 ] + axis.g * covariance[ 3 ] + axis.b * covariance[ 4 ],
		axis.r * covariance[ 2 ] + axis.g * covariance[ 4 ] + axis.b * covariance[ 5 ]
		);
		axis = normalize( temp );
	}
	float minDot = 1e38;
	float maxDot = -1e38; for ( int i = 0; i < 16; ++i ) {
		const vec3 rgb = UnpackRGBFloat( colors[ i ] ) - averageColor;
		const float product = dot( rgb, axis );
		minDot = min( minDot, product );
		maxDot = max( maxDot, product );
	}
	const float rNormSq = 1.0 / dot( axis, axis );
	minColor[ 0 ] = uint( clamp( averageColor.x + minDot * rNormSq * axis.x, 0.0, 255.0 ) );
	maxColor[ 0 ] = uint( clamp( averageColor.x + maxDot * rNormSq * axis.x, 0.0, 255.0 ) );
	minColor[ 1 ] = uint( clamp( averageColor.y + minDot * rNormSq * axis.y, 0.0, 255.0 ) );
	maxColor[ 1 ] = uint( clamp( averageColor.y + maxDot * rNormSq * axis.y, 0.0, 255.0 ) );
	minColor[ 2 ] = uint( clamp( averageColor.z + minDot * rNormSq * axis.z, 0.0, 255.0 ) );
	maxColor[ 2 ] = uint( clamp( averageColor.z + maxDot * rNormSq * axis.z, 0.0, 255.0 ) );
}
void InsetAlphas ( inout uint minAlpha, inout uint maxAlpha ) {
	const uint INSET_ALPHA_SHIFT = 5;
	const uint inset = ( maxAlpha - minAlpha ) >> INSET_ALPHA_SHIFT;
	minAlpha = ( minAlpha + inset <= 255 ) ? minAlpha + inset : 255;
	maxAlpha = ( maxAlpha >= inset ) ? maxAlpha - inset : 0;
}
uint AlphaPairToShort ( const uint alpha1, const uint alpha2 ) {
	return ( alpha1 | ( alpha2 << 8 ) );
}
uint ColorPairTo565Swap ( inout uint color1[ 3 ], inout uint color2[ 3 ] ) {
	const uint packedColor1 = ( ( color1[ 0 ] >> 3 ) << 11 ) | ( ( color1[ 1 ] >> 2 ) << 5 ) | ( color1[ 2 ] >> 3 );
	const uint packedColor2 = ( ( color2[ 0 ] >> 3 ) << 11 ) | ( ( color2[ 1 ] >> 2 ) << 5 ) | ( color2[ 2 ] >> 3 ); if ( packedColor1 > packedColor2 ) {
		return ( packedColor1 | ( packedColor2 << 16 ) );
	} else { for ( int i = 0; i < 3; ++i ) {
			const uint temp = color1[ i ];
			color1[ i ] = color2[ i ];
			color2[ i ] = temp;
		}
		return ( packedColor2 | ( packedColor1 << 16 ) );
	}
}
void EmitAlphaIndices ( const uint blockAlphas[ 16 ], const uint minAlpha, const uint maxAlpha, out uint indices[ 2 ] ) {
	const int ALPHA_RANGE = 7;
	const uint ab1 = ( 13 * maxAlpha + 1 * minAlpha + ALPHA_RANGE ) / ( ALPHA_RANGE * 2 );
	const uint ab2 = ( 11 * maxAlpha + 3 * minAlpha + ALPHA_RANGE ) / ( ALPHA_RANGE * 2 );
	const uint ab3 = ( 9 * maxAlpha + 5 * minAlpha + ALPHA_RANGE ) / ( ALPHA_RANGE * 2 );
	const uint ab4 = ( 7 * maxAlpha + 7 * minAlpha + ALPHA_RANGE ) / ( ALPHA_RANGE * 2 );
	const uint ab5 = ( 5 * maxAlpha + 9 * minAlpha + ALPHA_RANGE ) / ( ALPHA_RANGE * 2 );
	const uint ab6 = ( 3 * maxAlpha + 11 * minAlpha + ALPHA_RANGE ) / ( ALPHA_RANGE * 2 );
	const uint ab7 = ( 1 * maxAlpha + 13 * minAlpha + ALPHA_RANGE ) / ( ALPHA_RANGE * 2 );
	indices[ 0 ] = 0;
	indices[ 1 ] = 0;
	for ( int i = 0; i < 5; ++i ) {
		const uint a = blockAlphas[ i ];
		const uint b1 = uint( a >= ab1 );
		const uint b2 = uint( a >= ab2 );
		const uint b3 = uint( a >= ab3 );
		const uint b4 = uint( a >= ab4 );
		const uint b5 = uint( a >= ab5 );
		const uint b6 = uint( a >= ab6 );
		const uint b7 = uint( a >= ab7 );
		uint index = ( 8 - b1 - b2 - b3 - b4 - b5 - b6 - b7 ) & 7;
		index = index ^ uint( 2 > index );
		indices[ 0 ] |= index << ( i * 3 );
	}
	{
		const uint a = blockAlphas[ 5 ];
		const uint b1 = uint( a >= ab1 );
		const uint b2 = uint( a >= ab2 );
		const uint b3 = uint( a >= ab3 );
		const uint b4 = uint( a >= ab4 );
		const uint b5 = uint( a >= ab5 );
		const uint b6 = uint( a >= ab6 );
		const uint b7 = uint( a >= ab7 );
		uint index = ( 8 - b1 - b2 - b3 - b4 - b5 - b6 - b7 ) & 7;
		index = index ^ uint( 2 > index );
		indices[ 0 ] |= index << 15;
		indices[ 1 ] |= index >> 1;
	}
	for ( int i = 0; i < 10; ++i ) {
		const uint a = blockAlphas[ i + 6 ];
		const uint b1 = uint( a >= ab1 );
		const uint b2 = uint( a >= ab2 );
		const uint b3 = uint( a >= ab3 );
		const uint b4 = uint( a >= ab4 );
		const uint b5 = uint( a >= ab5 );
		const uint b6 = uint( a >= ab6 );
		const uint b7 = uint( a >= ab7 );
		uint index = ( 8 - b1 - b2 - b3 - b4 - b5 - b6 - b7 ) & 7;
		index = index ^ uint( 2 > index );
		indices[ 1 ] |= index << ( i * 3 + 2 );
	}
}
uint EmitColorIndicesBloom ( const uint blockColors[ 16 ], const uint minColor[ 3 ], const uint maxColor[ 3 ] ) {
	ivec3 colors[ 4 ];
	colors[ 0 ].x = int( maxColor[ 0 ] );
	colors[ 0 ].y = int( maxColor[ 1 ] );
	colors[ 0 ].z = int( maxColor[ 2 ] );
	colors[ 1 ].x = int( minColor[ 0 ] );
	colors[ 1 ].y = int( minColor[ 1 ] );
	colors[ 1 ].z = int( minColor[ 2 ] );
	colors[ 2 ].x = int( ( 2 * colors[ 0 ][ 0 ] + 1 * colors[ 1 ][ 0 ] ) / 3 );
	colors[ 2 ].y = int( ( 2 * colors[ 0 ][ 1 ] + 1 * colors[ 1 ][ 1 ] ) / 3 );
	colors[ 2 ].z = int( ( 2 * colors[ 0 ][ 2 ] + 1 * colors[ 1 ][ 2 ] ) / 3 );
	colors[ 3 ].x = int( ( 1 * colors[ 0 ][ 0 ] + 2 * colors[ 1 ][ 0 ] ) / 3 );
	colors[ 3 ].y = int( ( 1 * colors[ 0 ][ 1 ] + 2 * colors[ 1 ][ 1 ] ) / 3 );
	colors[ 3 ].z = int( ( 1 * colors[ 0 ][ 2 ] + 2 * colors[ 1 ][ 2 ] ) / 3 );
	const ivec3 dir = colors[ 0 ] - colors[ 1 ];
	int stops[ 4 ]; for ( int i = 0; i < 4; ++i ) {
		stops[ i ] = colors[ i ].x * dir.x + colors[ i ].y * dir.y + colors[ i ].z * dir.z;
	}
	const int c0Point = ( stops[ 1 ] + stops[ 3 ] ) >> 1;
	const int halfPoint = ( stops[ 3 ] + stops[ 2 ] ) >> 1;
	const int c3Point = ( stops[ 2 ] + stops[ 0 ] ) >> 1;
	uint mask = 0; for ( int i = 15 ; i >= 0; --i ) {
		uint r, g, b;
		UnpackRGB( blockColors[ i ], r, g, b );
		const int product = int( r ) * dir.x + int( g ) * dir.y + int( b ) * dir.z;
		mask <<= 2; if ( product < halfPoint ) {
			mask |= uint( ( product < c0Point ) ? 1 : 3 );
		} else {
			mask |= uint( ( product < c3Point ) ? 2 : 0 );
		}
	}
	return mask;
}
void EmitDXTAlpha ( const uint tiledOffset, const uint alphas[ 16 ] ) {
	uint minAlpha;
	uint maxAlpha;
	GetAlphaMinMax( alphas, minAlpha, maxAlpha );
	InsetAlphas( minAlpha, maxAlpha );
	uint indices[ 2 ];
	EmitAlphaIndices( alphas, minAlpha, maxAlpha, indices ); gputranscodephysicalpages[ tiledOffset ].alpha[ 0 ] = AlphaPairToShort( maxAlpha, minAlpha ) | ( indices[ 0 ] << 16 ); gputranscodephysicalpages[ tiledOffset ].alpha[ 1 ] = indices[ 1 ];
}
void EmitDXTColor ( const uint tiledOffset, const uint colors[ 16 ] ) {
	uint minColor[ 3 ];
	uint maxColor[ 3 ];
	GetRGBMinMaxPCA( colors, minColor, maxColor ); gputranscodephysicalpages[ tiledOffset ].rgb[ 0 ] = ColorPairTo565Swap( maxColor, minColor ); gputranscodephysicalpages[ tiledOffset ].rgb[ 1 ] = EmitColorIndicesBloom( colors, minColor, maxColor );
}
void main() {
	{
		uint pageIndex =gl_WorkGroupID.z;
		uvec2 groupId =gl_WorkGroupID.xy;
		uvec2 localId =gl_LocalInvocationID.xy;
		vec4 transcodeParms = gputranscodeparms[ pageIndex ];
		uint tilesPerRow = uint( transcodeParms.z );
		uvec2 pageBCOffset = uvec2( transcodeParms.x, transcodeParms.y );
		uvec2 bcOffset = groupId * 8 + localId;
		uint pageOffset = uint( transcodeParms.w ) * 32768;
		uint COEFF_MB_STRIDE = 128;
		uvec2 mbIndex = localId / 4 + groupId * 2;
		uint mbOffset = ( ( mbIndex.y * 8 ) + mbIndex.x ) * COEFF_MB_STRIDE;
		uint coeffsOffset = pageOffset + mbOffset + ( ( localId.y % uint( 4 ) ) * 8 + ( localId.x % uint( 4 ) ) * 32 );
		uint tiledOffset = ComputeTiledOffset( pageBCOffset.x + bcOffset.x, pageBCOffset.y + bcOffset.y, tilesPerRow );
		uint values[ 16 ];
		DecodeAlpha4x4( coeffsOffset, values );
		EmitDXTAlpha( tiledOffset, values );
		DecodeRGB4x4( coeffsOffset, values );
		EmitDXTColor( tiledOffset, values );
	}
}
