[require]
GLSL >= 4.30

[vertex shader]
#version 430 core
#extension GL_ARB_shader_clock : enable
float saturate( float v ) { return clamp( v, 0.0, 1.0 ); }
vec2 saturate( vec2 v ) { return clamp( v, 0.0, 1.0 ); }
vec3 saturate( vec3 v ) { return clamp( v, 0.0, 1.0 ); }
vec4 saturate( vec4 v ) { return clamp( v, 0.0, 1.0 ); }
vec4 tex2Dlod( sampler2D image, vec4 texcoord ) { return textureLod( image, texcoord.xy, texcoord.w ); }
vec4 tex3Dlod( sampler3D image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBElod( samplerCube image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 tex2DARRAYlod( sampler2DArray image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBEARRAYlod( samplerCubeArray image, vec4 texcoord, float lod ) { return textureLod( image, texcoord.xyzw, lod ); }

uniform vec4 _va_freqHigh [11];
uniform vec4 _va_freqLow [8];

in vec4 in_Position;
in vec4 in_Normal;
in vec4 in_Tangent;
in vec2 in_TexCoord;
in vec4 in_Color;

out vec4 vofi_TexCoord0;
out vec4 vofi_TexCoord3;
out vec4 vofi_TexCoord1;
out vec4 vofi_Color;
out vec4 vofi_TexCoord2;

float dot3 ( vec3 a, vec3 b ) { return dot( a, b ); }
float dot3 ( vec3 a, vec4 b ) { return dot( a, b.xyz ); }
float dot3 ( vec4 a, vec3 b ) { return dot( a.xyz, b ); }
float dot3 ( vec4 a, vec4 b ) { return dot( a.xyz, b.xyz ); }
float dot4 ( vec4 a, vec4 b ) { return dot( a, b ); }
float dot4 ( vec2 a, vec4 b ) { return dot( vec4( a, 0.0, 1.0 ), b ); }
float SRGBlinearApprox ( float value ) {
	return value * ( value * ( value * 0.305306011 + 0.682171111 ) + 0.012522878 );
}
vec3 SRGBlinearApprox ( vec3 sRGB ) {
	vec3 outLinear;
	outLinear.r = SRGBlinearApprox( sRGB.r );
	outLinear.g = SRGBlinearApprox( sRGB.g );
	outLinear.b = SRGBlinearApprox( sRGB.b );
	return outLinear;
}
vec4 SRGBlinearApprox ( vec4 sRGBA ) {
	vec4 outLinear = vec4( SRGBlinearApprox( sRGBA.rgb ), 1 );
	outLinear.a = SRGBlinearApprox( sRGBA.a );
	return outLinear;
}
void main() {
	{
		vec4 position = in_Position * _va_freqLow[0 ] + _va_freqLow[1 ];
		vec4 normal = in_Normal * 2.0 - 1.0;
		vec4 tangent = in_Tangent * 2.0 - 1.0;
		vec3 bitangent = normalize( cross( normal.xyz, tangent.xyz ) * tangent.w );
		vec3 wobbleAmount;
		wobbleAmount.x = position.x * 0.023 + _va_freqLow[2 ].x * 5.91 * _va_freqHigh[0 ].y;
		wobbleAmount.y = position.y * 0.031 + _va_freqLow[2 ].x * 7.73 * _va_freqHigh[0 ].y;
		wobbleAmount.z = position.y * 0.043 + _va_freqLow[2 ].x * 9.57 * _va_freqHigh[0 ].y;
		wobbleAmount = sin( wobbleAmount ) * _va_freqHigh[0 ].x;
		position.xyz += normal.xyz * vec3( wobbleAmount.x + wobbleAmount.y + wobbleAmount.z ) * vec3( 4.0 ) + normal.xyz * vec3( _va_freqHigh[1 ].x );
		gl_Position.x = dot4( position, _va_freqHigh[2 ] );
		gl_Position.y = dot4( position, _va_freqHigh[3 ] );
		gl_Position.z = dot4( position, _va_freqHigh[4 ] );
		gl_Position.w = dot4( position, _va_freqHigh[5 ] );
		vofi_TexCoord0.xy = in_TexCoord.xy;
		vofi_TexCoord0.z = saturate( exp2( -( max( gl_Position.w - _va_freqLow[3 ].x, 0.0 ) * _va_freqLow[3 ].z ) ) );
		vofi_TexCoord0.w = exp2( -gl_Position.w * 0.001 );
		vec3 globalPos = vec3( 0.0 );
		globalPos.x = dot4( position, _va_freqHigh[6 ] );
		globalPos.y = dot4( position, _va_freqHigh[7 ] );
		globalPos.z = dot4( position, _va_freqHigh[8 ] );
		vec4 localCenter = vec4( 0.0, 0.0, 0.0, 1.0 );
		vec3 worldCenter = vec3( 0.0 );
		worldCenter.x = dot4( localCenter, _va_freqHigh[6 ] );
		worldCenter.y = dot4( localCenter, _va_freqHigh[7 ] );
		worldCenter.z = dot4( localCenter, _va_freqHigh[8 ] );
		vec3 globalNormal = vec3( 0.0 );
		globalNormal.x = dot3( normal, _va_freqHigh[6 ] );
		globalNormal.y = dot3( normal, _va_freqHigh[7 ] );
		globalNormal.z = dot3( normal, _va_freqHigh[8 ] );
		globalNormal = normalize( globalNormal );
		vec3 toViewerTS = normalize( _va_freqLow[4 ].xyz - globalPos.xyz );
		float falloff = saturate( abs( dot( globalNormal, toViewerTS ) ) );
		float falloff2 = 1.0 - saturate( abs( dot( normal.xyz, vec3( 0.0, 1.0, 0.0 ) ) ) );
		float diameter = length( globalPos - worldCenter ) * 2.0;
		float distance = length( _va_freqLow[4 ].xyz - globalPos.xyz );
		float scale = saturate( distance / diameter );
		vofi_TexCoord1.x = falloff;
		vofi_TexCoord1.y = falloff2;
		vec3 screenNormal = vec3( 0.0 );
		screenNormal.x = dot3( normal, _va_freqLow[5 ] );
		screenNormal.y = dot3( normal, _va_freqLow[6 ] );
		screenNormal.z = dot3( normal, _va_freqLow[7 ] );
		screenNormal = normalize( screenNormal );
		vofi_TexCoord2.xy = screenNormal.xy;
		vec3 screenWorldUp = vec3( 0.0 );
		screenWorldUp.x = dot3( vec3( 0.0, 0.0, 1.0 ), _va_freqLow[5 ] );
		screenWorldUp.y = dot3( vec3( 0.0, 0.0, 1.0 ), _va_freqLow[6 ] );
		screenWorldUp.z = dot3( vec3( 0.0, 0.0, 1.0 ), _va_freqLow[7 ] );
		screenWorldUp = normalize( screenWorldUp );
		vec3 screenSide = vec3( 0.0 );
		screenSide.x = dot3( vec3( 1.0, 0.0, 0.0 ), _va_freqLow[5 ] );
		screenSide.y = dot3( vec3( 1.0, 0.0, 0.0 ), _va_freqLow[6 ] );
		screenSide.z = dot3( vec3( 1.0, 0.0, 0.0 ), _va_freqLow[7 ] );
		screenSide = normalize( screenSide );
		vofi_TexCoord1.zw = screenWorldUp.xy;
		vofi_TexCoord2.zw = screenSide.xy;
		vec3 invTanMatX = tangent.xyz;
		vec3 invTanMatY = bitangent.xyz;
		vec3 invTanMatZ = normal.xyz;
		vec3 tangentDir = vec3( 0.0 );
		tangentDir.x = dot3( vec3( 1.0, 0.0, 0.0 ), invTanMatX );
		tangentDir.y = dot3( vec3( 1.0, 0.0, 0.0 ), invTanMatY );
		tangentDir.z = dot3( vec3( 1.0, 0.0, 0.0 ), invTanMatZ );
		tangentDir = normalize( tangentDir );
		vofi_TexCoord3.xy = tangentDir.xy;
		vofi_TexCoord3.zw = vec2( 0.0 );
		vofi_Color = _va_freqHigh[9 ] * SRGBlinearApprox( in_Color ) * _va_freqHigh[10 ];
	}
}
[fragment shader]
#version 430 core
#extension GL_ARB_shader_clock : enable
void clip( float v ) { if ( v < 0.0 ) { discard; } }
void clip( vec2 v ) { if ( any( lessThan( v, vec2( 0.0 ) ) ) ) { discard; } }
void clip( vec3 v ) { if ( any( lessThan( v, vec3( 0.0 ) ) ) ) { discard; } }
void clip( vec4 v ) { if ( any( lessThan( v, vec4( 0.0 ) ) ) ) { discard; } }

float saturate( float v ) { return clamp( v, 0.0, 1.0 ); }
vec2 saturate( vec2 v ) { return clamp( v, 0.0, 1.0 ); }
vec3 saturate( vec3 v ) { return clamp( v, 0.0, 1.0 ); }
vec4 saturate( vec4 v ) { return clamp( v, 0.0, 1.0 ); }

vec4 tex2D( sampler2D image, vec2 texcoord ) { return texture( image, texcoord.xy ); }
vec4 tex2D( sampler2DShadow image, vec3 texcoord ) { return vec4( texture( image, texcoord.xyz ) ); }
vec4 tex2DARRAY( sampler2DArray image, vec3 texcoord ) { return texture( image, texcoord.xyz ); }

vec4 tex2D( sampler2D image, vec2 texcoord, vec2 dx, vec2 dy ) { return textureGrad( image, texcoord.xy, dx, dy ); }
vec4 tex2D( sampler2DShadow image, vec3 texcoord, vec2 dx, vec2 dy ) { return vec4( textureGrad( image, texcoord.xyz, dx, dy ) ); }
vec4 tex2DARRAY( sampler2DArray image, vec3 texcoord, vec2 dx, vec2 dy ) { return textureGrad( image, texcoord.xyz, dx, dy ); }

vec4 texCUBE( samplerCube image, vec3 texcoord ) { return texture( image, texcoord.xyz ); }
vec4 texCUBE( samplerCubeShadow image, vec4 texcoord ) { return vec4( texture( image, texcoord.xyzw ) ); }
vec4 texCUBEARRAY( samplerCubeArray image, vec4 texcoord ) { return texture( image, texcoord.xyzw ); }

vec4 tex1Dproj( sampler1D image, vec2 texcoord ) { return textureProj( image, texcoord ); }
vec4 tex2Dproj( sampler2D image, vec3 texcoord ) { return textureProj( image, texcoord ); }
vec4 tex3Dproj( sampler3D image, vec4 texcoord ) { return textureProj( image, texcoord ); }

vec4 tex1Dbias( sampler1D image, vec4 texcoord ) { return texture( image, texcoord.x, texcoord.w ); }
vec4 tex2Dbias( sampler2D image, vec4 texcoord ) { return texture( image, texcoord.xy, texcoord.w ); }
vec4 tex2DARRAYbias( sampler2DArray image, vec4 texcoord ) { return texture( image, texcoord.xyz, texcoord.w ); }
vec4 tex3Dbias( sampler3D image, vec4 texcoord ) { return texture( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBEbias( samplerCube image, vec4 texcoord ) { return texture( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBEARRAYbias( samplerCubeArray image, vec4 texcoord, float bias ) { return texture( image, texcoord.xyzw, bias); }

vec4 tex1Dlod( sampler1D image, vec4 texcoord ) { return textureLod( image, texcoord.x, texcoord.w ); }
vec4 tex2Dlod( sampler2D image, vec4 texcoord ) { return textureLod( image, texcoord.xy, texcoord.w ); }
vec4 tex2DARRAYlod( sampler2DArray image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 tex3Dlod( sampler3D image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBElod( samplerCube image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBEARRAYlod( samplerCubeArray image, vec4 texcoord, float lod ) { return textureLod( image, texcoord.xyzw, lod ); }

vec4 tex2DGatherRed( sampler2D image, vec2 texcoord ) { return textureGather( image, texcoord, 0 ); }
vec4 tex2DGatherGreen( sampler2D image, vec2 texcoord ) { return textureGather( image, texcoord, 1 ); }
vec4 tex2DGatherBlue( sampler2D image, vec2 texcoord ) { return textureGather( image, texcoord, 2 ); }
vec4 tex2DGatherAlpha( sampler2D image, vec2 texcoord ) { return textureGather( image, texcoord, 3 ); }

vec4 tex2DGatherOffsetRed( sampler2D image, vec2 texcoord, const ivec2 v0 ) { return textureGatherOffset( image, texcoord, v0, 0 ); }
vec4 tex2DGatherOffsetGreen( sampler2D image, vec2 texcoord, const ivec2 v0 ) { return textureGatherOffset( image, texcoord, v0, 1 ); }
vec4 tex2DGatherOffsetBlue( sampler2D image, vec2 texcoord, const ivec2 v0 ) { return textureGatherOffset( image, texcoord, v0, 2 ); }
vec4 tex2DGatherOffsetAlpha( sampler2D image, vec2 texcoord, const ivec2 v0 ) { return textureGatherOffset( image, texcoord, v0, 3 ); }

#define tex2DGatherOffsetsRed( image, texcoord, v0, v1, v2, v3 ) textureGatherOffsets( image, texcoord, ivec2[]( v0, v1, v2, v3 ), 0 )
#define tex2DGatherOffsetsGreen( image, texcoord, v0, v1, v2, v3 ) textureGatherOffsets( image, texcoord, ivec2[]( v0, v1, v2, v3 ), 1 )
#define tex2DGatherOffsetsBlue( image, texcoord, v0, v1, v2, v3 ) textureGatherOffsets( image, texcoord, ivec2[]( v0, v1, v2, v3 ), 2 )
#define tex2DGatherOffsetsAlpha( image, texcoord, v0, v1, v2, v3 ) textureGatherOffsets( image, texcoord, ivec2[]( v0, v1, v2, v3 ), 3 )

uniform vec4 _fa_freqHigh [2];
uniform vec4 _fa_freqLow [1];
uniform sampler2D samp_transmap;
uniform sampler2D samp_viewdepthmap;

in vec4 vofi_TexCoord0;
in vec4 vofi_TexCoord3;
in vec4 vofi_TexCoord1;
in vec4 vofi_Color;
in vec4 gl_FragCoord;

out vec4 out_FragColor0;

vec2 screenPosToTexcoord ( vec2 pos, vec4 bias_scale ) { return ( pos * bias_scale.zw + bias_scale.xy ); }
vec2 screenPosToTexcoord ( vec2 pos, vec4 bias_scale, vec4 resolution_scale ) { return ( ( pos * bias_scale.zw + bias_scale.xy ) * resolution_scale.xy ); }
float tex2Ddepth ( sampler2D image, vec2 texcoord ) { return tex2Dlod( image, vec4( texcoord, 0.0, 0.0 ) ).x; }
float GetFragmentDepth ( vec4 fragmentPos ) { return fragmentPos.z; }
void main() {
	{
		float localTime = _fa_freqLow[0 ].x * 2.0;
		vec2 waveTC1 = vofi_TexCoord0.xy + vofi_TexCoord3.xy * ( 1.0 - fract( localTime ) );
		vec2 waveTC2 = vofi_TexCoord0.xy + vofi_TexCoord3.xy * ( 1.0 - fract( localTime + 0.5 ) );
		vec4 waves1 = tex2D( samp_transmap, waveTC1 );
		vec4 waves2 = tex2D( samp_transmap, waveTC2 );
		float lerpVal = abs( fract( localTime ) * 2.0 - 1.0 );
		vec4 waves = mix( waves1, waves2, lerpVal );
		float interpolatedDepth = GetFragmentDepth( gl_FragCoord );
		vec2 tc = screenPosToTexcoord( gl_FragCoord.xy, _fa_freqHigh[0 ] );
		float depth = tex2Ddepth( samp_viewdepthmap, tc );
		float dstDepth = 1.0 / ( 1.0 - depth );
		float srcDepth = 1.0 / ( 1.0 - interpolatedDepth );
		float viewScale = saturate( ( dstDepth - srcDepth ) / 16.0 );
		float viewFalloff = saturate( srcDepth * 0.05 );
		vec4 final = _fa_freqHigh[1 ];
		final.w *= waves.w * 5.0 + 1.0;
		final *= vofi_TexCoord1.x * ( 1.0 - pow( vofi_TexCoord1.x, 3.0 ) ) * vofi_TexCoord1.y * 2.0;
		final *= viewScale * viewFalloff;
		final.w *= vofi_Color.w;
		float fog = vofi_TexCoord0.z;
		final.xyz *= fog;
		out_FragColor0 = final;
	}
}
