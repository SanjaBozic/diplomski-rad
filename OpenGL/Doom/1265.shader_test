[require]
GLSL >= 4.30

[vertex shader]
#version 430 core
#extension GL_ARB_shader_clock : enable
float saturate( float v ) { return clamp( v, 0.0, 1.0 ); }
vec2 saturate( vec2 v ) { return clamp( v, 0.0, 1.0 ); }
vec3 saturate( vec3 v ) { return clamp( v, 0.0, 1.0 ); }
vec4 saturate( vec4 v ) { return clamp( v, 0.0, 1.0 ); }
vec4 tex2Dlod( sampler2D image, vec4 texcoord ) { return textureLod( image, texcoord.xy, texcoord.w ); }
vec4 tex3Dlod( sampler3D image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBElod( samplerCube image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 tex2DARRAYlod( sampler2DArray image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBEARRAYlod( samplerCubeArray image, vec4 texcoord, float lod ) { return textureLod( image, texcoord.xyzw, lod ); }

uniform vec4 _va_freqHigh [8];
uniform vec4 _va_freqLow [4];

in vec4 in_Position;
in vec4 in_Normal;
in vec4 in_Tangent;

out vec4 vofi_TexCoord0;

float dot3 ( vec3 a, vec3 b ) { return dot( a, b ); }
float dot3 ( vec3 a, vec4 b ) { return dot( a, b.xyz ); }
float dot3 ( vec4 a, vec3 b ) { return dot( a.xyz, b ); }
float dot3 ( vec4 a, vec4 b ) { return dot( a.xyz, b.xyz ); }
float dot4 ( vec4 a, vec4 b ) { return dot( a, b ); }
float dot4 ( vec2 a, vec4 b ) { return dot( vec4( a, 0.0, 1.0 ), b ); }
void main() {
	{
		vec4 localToGlobalX;
		vec4 localToGlobalY;
		vec4 localToGlobalZ;
		vec4 viewOriginToVertex;
		{
			vec4 localPosition;
			vec4 localNormal;
			vec4 localTangent;
			vec4 localBitangent;
			vec4 globalPosition;
			{
				localPosition = in_Position * _va_freqLow[0 ] + _va_freqLow[1 ];
				localNormal = in_Normal * 2.0 - 1.0;
				localTangent = in_Tangent * 2.0 - 1.0;
				localTangent.w = floor( in_Tangent.w * 255.1 / 128.0 ) * 2.0 - 1.0;
			};
			{
				localBitangent.xyz = cross( localNormal.xyz, localTangent.xyz ) * localTangent.w;
				localBitangent.w = 0.0;
			};
			{
				gl_Position.x = dot4( localPosition, _va_freqHigh[0 ] );
				gl_Position.y = dot4( localPosition, _va_freqHigh[1 ] );
				gl_Position.z = dot4( localPosition, _va_freqHigh[2 ] );
				gl_Position.w = dot4( localPosition, _va_freqHigh[3 ] );
				localToGlobalX.x = dot3( localTangent, _va_freqHigh[4 ] );
				localToGlobalX.y = dot3( localBitangent, _va_freqHigh[4 ] );
				localToGlobalX.z = dot3( localNormal, _va_freqHigh[4 ] );
				localToGlobalX.w = 0.0;
				localToGlobalY.x = dot3( localTangent, _va_freqHigh[5 ] );
				localToGlobalY.y = dot3( localBitangent, _va_freqHigh[5 ] );
				localToGlobalY.z = dot3( localNormal, _va_freqHigh[5 ] );
				localToGlobalY.w = 0.0;
				localToGlobalZ.x = dot3( localTangent, _va_freqHigh[6 ] );
				localToGlobalZ.y = dot3( localBitangent, _va_freqHigh[6 ] );
				localToGlobalZ.z = dot3( localNormal, _va_freqHigh[6 ] );
				localToGlobalZ.w = 0.0;
			};
			{
				globalPosition.x = dot4( localPosition, _va_freqHigh[4 ] );
				globalPosition.y = dot4( localPosition, _va_freqHigh[5 ] );
				globalPosition.z = dot4( localPosition, _va_freqHigh[6 ] );
				globalPosition.w = 1.0;
			};
			viewOriginToVertex = globalPosition - _va_freqLow[2 ];
		};
		vec4 localPosition;
		vec4 localNormal;
		vec4 localTangent;
		{
			localPosition = in_Position * _va_freqLow[0 ] + _va_freqLow[1 ];
			localNormal = in_Normal * 2.0 - 1.0;
			localTangent = in_Tangent * 2.0 - 1.0;
			localTangent.w = floor( in_Tangent.w * 255.1 / 128.0 ) * 2.0 - 1.0;
		};
		vec4 globalPosition;
		{
			globalPosition.x = dot4( localPosition, _va_freqHigh[4 ] );
			globalPosition.y = dot4( localPosition, _va_freqHigh[5 ] );
			globalPosition.z = dot4( localPosition, _va_freqHigh[6 ] );
			globalPosition.w = 1.0;
		};
		vofi_TexCoord0.x = globalPosition.x * (1.0/ _va_freqHigh[7 ].x);
		vofi_TexCoord0.y = globalPosition.y * (1.0/ _va_freqHigh[7 ].x);
		vofi_TexCoord0.z = globalPosition.z * (1.0/ _va_freqHigh[7 ].x);
		vofi_TexCoord0.w = - dot4( globalPosition, _va_freqLow[3 ] );
	}
}
[fragment shader]
#version 430 core
#extension GL_ARB_shader_clock : enable
void clip( float v ) { if ( v < 0.0 ) { discard; } }
void clip( vec2 v ) { if ( any( lessThan( v, vec2( 0.0 ) ) ) ) { discard; } }
void clip( vec3 v ) { if ( any( lessThan( v, vec3( 0.0 ) ) ) ) { discard; } }
void clip( vec4 v ) { if ( any( lessThan( v, vec4( 0.0 ) ) ) ) { discard; } }

float saturate( float v ) { return clamp( v, 0.0, 1.0 ); }
vec2 saturate( vec2 v ) { return clamp( v, 0.0, 1.0 ); }
vec3 saturate( vec3 v ) { return clamp( v, 0.0, 1.0 ); }
vec4 saturate( vec4 v ) { return clamp( v, 0.0, 1.0 ); }

vec4 tex2D( sampler2D image, vec2 texcoord ) { return texture( image, texcoord.xy ); }
vec4 tex2D( sampler2DShadow image, vec3 texcoord ) { return vec4( texture( image, texcoord.xyz ) ); }
vec4 tex2DARRAY( sampler2DArray image, vec3 texcoord ) { return texture( image, texcoord.xyz ); }

vec4 tex2D( sampler2D image, vec2 texcoord, vec2 dx, vec2 dy ) { return textureGrad( image, texcoord.xy, dx, dy ); }
vec4 tex2D( sampler2DShadow image, vec3 texcoord, vec2 dx, vec2 dy ) { return vec4( textureGrad( image, texcoord.xyz, dx, dy ) ); }
vec4 tex2DARRAY( sampler2DArray image, vec3 texcoord, vec2 dx, vec2 dy ) { return textureGrad( image, texcoord.xyz, dx, dy ); }

vec4 texCUBE( samplerCube image, vec3 texcoord ) { return texture( image, texcoord.xyz ); }
vec4 texCUBE( samplerCubeShadow image, vec4 texcoord ) { return vec4( texture( image, texcoord.xyzw ) ); }
vec4 texCUBEARRAY( samplerCubeArray image, vec4 texcoord ) { return texture( image, texcoord.xyzw ); }

vec4 tex1Dproj( sampler1D image, vec2 texcoord ) { return textureProj( image, texcoord ); }
vec4 tex2Dproj( sampler2D image, vec3 texcoord ) { return textureProj( image, texcoord ); }
vec4 tex3Dproj( sampler3D image, vec4 texcoord ) { return textureProj( image, texcoord ); }

vec4 tex1Dbias( sampler1D image, vec4 texcoord ) { return texture( image, texcoord.x, texcoord.w ); }
vec4 tex2Dbias( sampler2D image, vec4 texcoord ) { return texture( image, texcoord.xy, texcoord.w ); }
vec4 tex2DARRAYbias( sampler2DArray image, vec4 texcoord ) { return texture( image, texcoord.xyz, texcoord.w ); }
vec4 tex3Dbias( sampler3D image, vec4 texcoord ) { return texture( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBEbias( samplerCube image, vec4 texcoord ) { return texture( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBEARRAYbias( samplerCubeArray image, vec4 texcoord, float bias ) { return texture( image, texcoord.xyzw, bias); }

vec4 tex1Dlod( sampler1D image, vec4 texcoord ) { return textureLod( image, texcoord.x, texcoord.w ); }
vec4 tex2Dlod( sampler2D image, vec4 texcoord ) { return textureLod( image, texcoord.xy, texcoord.w ); }
vec4 tex2DARRAYlod( sampler2DArray image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 tex3Dlod( sampler3D image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBElod( samplerCube image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBEARRAYlod( samplerCubeArray image, vec4 texcoord, float lod ) { return textureLod( image, texcoord.xyzw, lod ); }

vec4 tex2DGatherRed( sampler2D image, vec2 texcoord ) { return textureGather( image, texcoord, 0 ); }
vec4 tex2DGatherGreen( sampler2D image, vec2 texcoord ) { return textureGather( image, texcoord, 1 ); }
vec4 tex2DGatherBlue( sampler2D image, vec2 texcoord ) { return textureGather( image, texcoord, 2 ); }
vec4 tex2DGatherAlpha( sampler2D image, vec2 texcoord ) { return textureGather( image, texcoord, 3 ); }

vec4 tex2DGatherOffsetRed( sampler2D image, vec2 texcoord, const ivec2 v0 ) { return textureGatherOffset( image, texcoord, v0, 0 ); }
vec4 tex2DGatherOffsetGreen( sampler2D image, vec2 texcoord, const ivec2 v0 ) { return textureGatherOffset( image, texcoord, v0, 1 ); }
vec4 tex2DGatherOffsetBlue( sampler2D image, vec2 texcoord, const ivec2 v0 ) { return textureGatherOffset( image, texcoord, v0, 2 ); }
vec4 tex2DGatherOffsetAlpha( sampler2D image, vec2 texcoord, const ivec2 v0 ) { return textureGatherOffset( image, texcoord, v0, 3 ); }

#define tex2DGatherOffsetsRed( image, texcoord, v0, v1, v2, v3 ) textureGatherOffsets( image, texcoord, ivec2[]( v0, v1, v2, v3 ), 0 )
#define tex2DGatherOffsetsGreen( image, texcoord, v0, v1, v2, v3 ) textureGatherOffsets( image, texcoord, ivec2[]( v0, v1, v2, v3 ), 1 )
#define tex2DGatherOffsetsBlue( image, texcoord, v0, v1, v2, v3 ) textureGatherOffsets( image, texcoord, ivec2[]( v0, v1, v2, v3 ), 2 )
#define tex2DGatherOffsetsAlpha( image, texcoord, v0, v1, v2, v3 ) textureGatherOffsets( image, texcoord, ivec2[]( v0, v1, v2, v3 ), 3 )

uniform vec4 _fa_freqHigh [5];
uniform vec4 _fa_freqLow [1];
uniform sampler2D samp_transmap;
uniform sampler2D samp_transmap2;

in vec4 vofi_TexCoord0;

out vec4 out_FragColor0;

void main() {
	{
		vec2 tcWorld = vofi_TexCoord0.xy;
		vec2 diffuseTC1 = tcWorld;
		vec2 diffuseTC2 = (tcWorld * _fa_freqHigh[0 ].y) * _fa_freqHigh[1 ].xy + vec2( _fa_freqLow[0 ].x * _fa_freqHigh[0 ].z );
		float modulusX = mod( tcWorld.x, 1.0 );
		float modulusY = mod( tcWorld.y, 1.0 );
		float lineGlowX = 0.5 - min( modulusX, 1.0 - modulusX );
		float lineGlowY = 0.5 - min( modulusY, 1.0 - modulusY );
		vec3 diffuse1 = tex2D( samp_transmap, diffuseTC1 ).xyz;
		vec3 diffuse2 = tex2D( samp_transmap2, diffuseTC2 ).xyz;
		vec4 final = vec4( 0.0 );
		float sinePulse = sin( _fa_freqLow[0 ].x * 3 ) * 0.1;
		float sinePulse2 = (sin( _fa_freqLow[0 ].x * 2 ) + 1.0) * 0.5;
		final.w = _fa_freqHigh[2 ].x + pow( (diffuse2.x + diffuse1.x), _fa_freqHigh[2 ].y) + ((diffuse2.x * diffuse1.x) * _fa_freqHigh[2 ].z);
		final.w += sinePulse;
		final.w += (sinePulse2 * (lineGlowX * lineGlowY)) * _fa_freqHigh[2 ].w;
		final.xyz = mix( _fa_freqHigh[3 ].xyz, _fa_freqHigh[4 ].xyz, diffuse1.xyz );
		out_FragColor0 = final;
	}
}
