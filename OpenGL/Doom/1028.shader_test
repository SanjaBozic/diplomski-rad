[require]
GLSL >= 4.30

[vertex shader]
#version 430 core
#extension GL_ARB_shader_clock : enable
float saturate( float v ) { return clamp( v, 0.0, 1.0 ); }
vec2 saturate( vec2 v ) { return clamp( v, 0.0, 1.0 ); }
vec3 saturate( vec3 v ) { return clamp( v, 0.0, 1.0 ); }
vec4 saturate( vec4 v ) { return clamp( v, 0.0, 1.0 ); }
vec4 tex2Dlod( sampler2D image, vec4 texcoord ) { return textureLod( image, texcoord.xy, texcoord.w ); }
vec4 tex3Dlod( sampler3D image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBElod( samplerCube image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 tex2DARRAYlod( sampler2DArray image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBEARRAYlod( samplerCubeArray image, vec4 texcoord, float lod ) { return textureLod( image, texcoord.xyzw, lod ); }

uniform vec4 _va_freqHigh [5];
uniform vec4 _va_freqLow [3];
uniform matrices_ubo { vec4 matrices[768]; };

in vec2 in_TexCoord;
in vec4 in_Position;
in vec4 in_Tangent;
in vec4 in_Normal;
in vec4 in_Color;

out vec4 vofi_TexCoord0;

float dot4 ( vec4 a, vec4 b ) { return dot( a, b ); }
float dot4 ( vec2 a, vec4 b ) { return dot( vec4( a, 0.0, 1.0 ), b ); }
void main() {
	{
		{
			vofi_TexCoord0 = ( in_TexCoord.xy * _va_freqLow[0 ].xy + _va_freqLow[0 ].zw ).xyxy;
		};
		{
			{
				vec4 localPosition;
				{
					localPosition = in_Position * _va_freqLow[1 ] + _va_freqLow[2 ];
				};
				{ if ( _va_freqHigh[0 ].x != 0.0 ) {
						vec4 tempPosition = localPosition;
						vec4 matX = vec4( 0 ), matY = vec4( 0 ), matZ = vec4( 0 );
						{
							vec4 weights;
							{
								float hiweight = in_Tangent.w * 255.1;
								weights[ 1 ] = hiweight - floor( hiweight / 128.0 ) * 128.0;
								float packedWeights = in_Normal.w * 255.1;
								weights[ 2 ] = floor( packedWeights / 16.0 );
								weights[ 3 ] = packedWeights - ( weights[ 2 ] * 16.0 );
								weights[ 1 ] *= 1.0 / 254.0;
								weights[ 2 ] *= 1.0 / 45.0;
								weights[ 3 ] *= 1.0 / 60.0;
								weights[ 0 ] = 1 - ( weights[ 1 ] + weights[ 2 ] + weights[ 3 ] );
							};
							uvec4 indices = uvec4( in_Color * 255.0 ); for( uint i = 0; i < 4; i++ ) {
								matX += matrices[ indices[ i ] * 3 + 0 ] * weights[ i ];
							} for( uint i = 0; i < 4; i++ ) {
								matY += matrices[ indices[ i ] * 3 + 1 ] * weights[ i ];
							} for( uint i = 0; i < 4; i++ ) {
								matZ += matrices[ indices[ i ] * 3 + 2 ] * weights[ i ];
							}
						};
						localPosition.x = dot4( tempPosition, matX );
						localPosition.y = dot4( tempPosition, matY );
						localPosition.z = dot4( tempPosition, matZ );
						localPosition.w = 1.0;
					}
				};
				{
					gl_Position.x = dot4( localPosition, _va_freqHigh[1 ] );
					gl_Position.y = dot4( localPosition, _va_freqHigh[2 ] );
					gl_Position.z = dot4( localPosition, _va_freqHigh[3 ] );
					gl_Position.w = dot4( localPosition, _va_freqHigh[4 ] );
				};
			};
		};
	}
}
[fragment shader]
#version 430 core
#extension GL_ARB_shader_clock : enable
void clip( float v ) { if ( v < 0.0 ) { discard; } }
void clip( vec2 v ) { if ( any( lessThan( v, vec2( 0.0 ) ) ) ) { discard; } }
void clip( vec3 v ) { if ( any( lessThan( v, vec3( 0.0 ) ) ) ) { discard; } }
void clip( vec4 v ) { if ( any( lessThan( v, vec4( 0.0 ) ) ) ) { discard; } }

float saturate( float v ) { return clamp( v, 0.0, 1.0 ); }
vec2 saturate( vec2 v ) { return clamp( v, 0.0, 1.0 ); }
vec3 saturate( vec3 v ) { return clamp( v, 0.0, 1.0 ); }
vec4 saturate( vec4 v ) { return clamp( v, 0.0, 1.0 ); }

vec4 tex2D( sampler2D image, vec2 texcoord ) { return texture( image, texcoord.xy ); }
vec4 tex2D( sampler2DShadow image, vec3 texcoord ) { return vec4( texture( image, texcoord.xyz ) ); }
vec4 tex2DARRAY( sampler2DArray image, vec3 texcoord ) { return texture( image, texcoord.xyz ); }

vec4 tex2D( sampler2D image, vec2 texcoord, vec2 dx, vec2 dy ) { return textureGrad( image, texcoord.xy, dx, dy ); }
vec4 tex2D( sampler2DShadow image, vec3 texcoord, vec2 dx, vec2 dy ) { return vec4( textureGrad( image, texcoord.xyz, dx, dy ) ); }
vec4 tex2DARRAY( sampler2DArray image, vec3 texcoord, vec2 dx, vec2 dy ) { return textureGrad( image, texcoord.xyz, dx, dy ); }

vec4 texCUBE( samplerCube image, vec3 texcoord ) { return texture( image, texcoord.xyz ); }
vec4 texCUBE( samplerCubeShadow image, vec4 texcoord ) { return vec4( texture( image, texcoord.xyzw ) ); }
vec4 texCUBEARRAY( samplerCubeArray image, vec4 texcoord ) { return texture( image, texcoord.xyzw ); }

vec4 tex1Dproj( sampler1D image, vec2 texcoord ) { return textureProj( image, texcoord ); }
vec4 tex2Dproj( sampler2D image, vec3 texcoord ) { return textureProj( image, texcoord ); }
vec4 tex3Dproj( sampler3D image, vec4 texcoord ) { return textureProj( image, texcoord ); }

vec4 tex1Dbias( sampler1D image, vec4 texcoord ) { return texture( image, texcoord.x, texcoord.w ); }
vec4 tex2Dbias( sampler2D image, vec4 texcoord ) { return texture( image, texcoord.xy, texcoord.w ); }
vec4 tex2DARRAYbias( sampler2DArray image, vec4 texcoord ) { return texture( image, texcoord.xyz, texcoord.w ); }
vec4 tex3Dbias( sampler3D image, vec4 texcoord ) { return texture( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBEbias( samplerCube image, vec4 texcoord ) { return texture( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBEARRAYbias( samplerCubeArray image, vec4 texcoord, float bias ) { return texture( image, texcoord.xyzw, bias); }

vec4 tex1Dlod( sampler1D image, vec4 texcoord ) { return textureLod( image, texcoord.x, texcoord.w ); }
vec4 tex2Dlod( sampler2D image, vec4 texcoord ) { return textureLod( image, texcoord.xy, texcoord.w ); }
vec4 tex2DARRAYlod( sampler2DArray image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 tex3Dlod( sampler3D image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBElod( samplerCube image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBEARRAYlod( samplerCubeArray image, vec4 texcoord, float lod ) { return textureLod( image, texcoord.xyzw, lod ); }

vec4 tex2DGatherRed( sampler2D image, vec2 texcoord ) { return textureGather( image, texcoord, 0 ); }
vec4 tex2DGatherGreen( sampler2D image, vec2 texcoord ) { return textureGather( image, texcoord, 1 ); }
vec4 tex2DGatherBlue( sampler2D image, vec2 texcoord ) { return textureGather( image, texcoord, 2 ); }
vec4 tex2DGatherAlpha( sampler2D image, vec2 texcoord ) { return textureGather( image, texcoord, 3 ); }

vec4 tex2DGatherOffsetRed( sampler2D image, vec2 texcoord, const ivec2 v0 ) { return textureGatherOffset( image, texcoord, v0, 0 ); }
vec4 tex2DGatherOffsetGreen( sampler2D image, vec2 texcoord, const ivec2 v0 ) { return textureGatherOffset( image, texcoord, v0, 1 ); }
vec4 tex2DGatherOffsetBlue( sampler2D image, vec2 texcoord, const ivec2 v0 ) { return textureGatherOffset( image, texcoord, v0, 2 ); }
vec4 tex2DGatherOffsetAlpha( sampler2D image, vec2 texcoord, const ivec2 v0 ) { return textureGatherOffset( image, texcoord, v0, 3 ); }

#define tex2DGatherOffsetsRed( image, texcoord, v0, v1, v2, v3 ) textureGatherOffsets( image, texcoord, ivec2[]( v0, v1, v2, v3 ), 0 )
#define tex2DGatherOffsetsGreen( image, texcoord, v0, v1, v2, v3 ) textureGatherOffsets( image, texcoord, ivec2[]( v0, v1, v2, v3 ), 1 )
#define tex2DGatherOffsetsBlue( image, texcoord, v0, v1, v2, v3 ) textureGatherOffsets( image, texcoord, ivec2[]( v0, v1, v2, v3 ), 2 )
#define tex2DGatherOffsetsAlpha( image, texcoord, v0, v1, v2, v3 ) textureGatherOffsets( image, texcoord, ivec2[]( v0, v1, v2, v3 ), 3 )

uniform vec4 _fa_freqHigh [3];
uniform vec4 _fa_freqLow [3];
uniform sampler2D samp_vmtrpagetablemap;
uniform sampler2D samp_vmtrphysicalmappingsmap;
uniform sampler2DArray samp_vmtrphysicalpagesmaparray0;

in vec4 vofi_TexCoord0;

out vec4 out_FragColor0;

float dot2 ( vec2 a, vec2 b ) { return dot( a, b ); }
vec4 tex2DArray ( sampler2DArray image, float slice, vec2 texcoord ) { return tex2DARRAY( image, vec3( texcoord, slice ) ); }
vec4 tex2DArrayGrad ( sampler2DArray image, float slice, vec2 texcoord, vec2 dx, vec2 dy ) { return tex2DARRAY( image, vec3( texcoord, slice ), dx, dy ); }
vec4 texPhysArray ( sampler2DArray image, float slice, vec2 texcoord ) { return tex2DArray( image, slice, texcoord ); }
vec4 texPhysArray ( sampler2DArray image, float slice, vec2 texcoord, vec2 dx, vec2 dy ) { return tex2DArrayGrad( image, slice, texcoord, dx, dy ); }
void main() {
	{
		float sampleCover;
		uint feedback;
		{
			vec2 texCoords = vofi_TexCoord0.xy;
			vec2 texCoordsLOD = vofi_TexCoord0.xy; if ( _fa_freqHigh[0 ].x > 0 ) {
				texCoords = fract( vofi_TexCoord0.xy ) * _fa_freqHigh[1 ].xy + _fa_freqHigh[1 ].zw;
				texCoordsLOD = vofi_TexCoord0.xy * _fa_freqHigh[1 ].xy;
			}
			float anisoLOD;
			float sampleLOD;
			{
				float widthInTexels = _fa_freqLow[0 ].z;
				float maxAnisoLog2 = _fa_freqHigh[2 ].z;
				vec2 texelCoords = texCoordsLOD.xy * widthInTexels;
				vec2 dx = dFdx( texelCoords );
				vec2 dy = dFdy( texelCoords );
				float px = dot2( dx, dx );
				float py = dot2( dy, dy );
				float maxLod = 0.5 * log2( max( px, py ) );
				float minLod = 0.5 * log2( min( px, py ) );
				anisoLOD = maxLod - min( maxAnisoLog2, maxLod - minLod );
			};
			{
				sampleLOD = anisoLOD;
			};
			{
				float widthInPages = _fa_freqLow[0 ].y;
				float feedbackBias = _fa_freqHigh[2 ].y;
				uvec2 feedbackPageUV = uvec2( texCoords.xy * widthInPages );
				uint feedbackLOD = uint( min( _fa_freqHigh[2 ].w, max( 0.0, anisoLOD ) + feedbackBias ) );
				uint feedbackPageSource = uint( _fa_freqLow[0 ].x );
				feedback = feedbackPageUV.x & 0xff;
				feedback |= ( feedbackPageUV.y & 0xff ) << 8;
				feedback |= feedbackPageUV.x >> 8 << 16;
				feedback |= feedbackPageUV.y >> 8 << 24;
				feedback |= feedbackLOD << 19;
				feedback |= feedbackPageSource << 27;
			};
			{
				vec3 physCoords;
				if ( _fa_freqLow[1 ].y != 0.0 ) {
					float trilinearFraction = fract( sampleLOD );
					bool twoSamples;
					float sampleLOD1, sampleLOD2;
					{
						float triStart = 0.5 - 0.25 / 2.0;
						float triEnd = 0.5 + 0.25 / 2.0;
						if ( trilinearFraction <= triStart ) {
							twoSamples = false;
							sampleLOD1 = sampleLOD - 0.5;
							sampleLOD2 = 0.0;
						} else if ( trilinearFraction >= triEnd ) {
							twoSamples = false;
							sampleLOD1 = sampleLOD + 0.5;
							sampleLOD2 = 0.0;
						} else {
							twoSamples = true;
							sampleLOD1 = sampleLOD - 0.5;
							sampleLOD2 = sampleLOD + 0.5;
						}
					};
					{
						vec4 virtCoordsLod = vec4( texCoords.xy.x, texCoords.xy.y, 0, sampleLOD1 );
						vec2 physPage = tex2Dlod( samp_vmtrpagetablemap, virtCoordsLod ).xy;
						vec4 xform = tex2D( samp_vmtrphysicalmappingsmap, physPage );
						physCoords.x = texCoords.xy.x * xform.x + xform.z;
						physCoords.y = texCoords.xy.y * ( xform.x * _fa_freqLow[2 ].x ) + xform.w;
						physCoords.z = xform.y;
					};
					{
						vec2 dx = dFdx( texCoords.xy.xy ) * physCoords.z;
						vec2 dy = dFdy( texCoords.xy.xy ) * physCoords.z;
						sampleCover = texPhysArray( samp_vmtrphysicalpagesmaparray0, 2.0, physCoords.xy, dx, dy ).z;
					};
					if ( twoSamples ) {
						float sampleCover2 = 1.0;
						{
							vec4 virtCoordsLod = vec4( texCoords.xy.x, texCoords.xy.y, 0, sampleLOD2 );
							vec2 physPage = tex2Dlod( samp_vmtrpagetablemap, virtCoordsLod ).xy;
							vec4 xform = tex2D( samp_vmtrphysicalmappingsmap, physPage );
							physCoords.x = texCoords.xy.x * xform.x + xform.z;
							physCoords.y = texCoords.xy.y * ( xform.x * _fa_freqLow[2 ].x ) + xform.w;
							physCoords.z = xform.y;
						};
						{
							vec2 dx = dFdx( texCoords.xy.xy ) * physCoords.z;
							vec2 dy = dFdy( texCoords.xy.xy ) * physCoords.z;
							sampleCover2 = texPhysArray( samp_vmtrphysicalpagesmaparray0, 2.0, physCoords.xy, dx, dy ).z;
						};
						float lerpFactor = 0.0;
						{
							float triStart = 0.5 - 0.25 / 2.0;
							lerpFactor = saturate( ( trilinearFraction - triStart ) * ( 1.0 / 0.25 ) );
						};
						sampleCover = mix( sampleCover, sampleCover2, lerpFactor );
					}
				} else
				{
					{
						vec4 virtCoordsLod = vec4( texCoords.xy.x, texCoords.xy.y, 0, sampleLOD - 0.5 );
						vec2 physPage = tex2Dlod( samp_vmtrpagetablemap, virtCoordsLod ).xy;
						vec4 xform = tex2D( samp_vmtrphysicalmappingsmap, physPage );
						physCoords.x = texCoords.xy.x * xform.x + xform.z;
						physCoords.y = texCoords.xy.y * ( xform.x * _fa_freqLow[2 ].x ) + xform.w;
						physCoords.z = xform.y;
					};
					{
						vec2 dx = dFdx( texCoords.xy.xy ) * physCoords.z;
						vec2 dy = dFdy( texCoords.xy.xy ) * physCoords.z;
						sampleCover = texPhysArray( samp_vmtrphysicalpagesmaparray0, 2.0, physCoords.xy, dx, dy ).z;
					};
				}
			};
		};
		clip( sampleCover - 0.5 );
		out_FragColor0 = vec4( 0.0 );
	}
}
