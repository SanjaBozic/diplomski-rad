[require]
GLSL >= 4.30

[vertex shader]
#version 430 core
#extension GL_ARB_shader_clock : enable
float saturate( float v ) { return clamp( v, 0.0, 1.0 ); }
vec2 saturate( vec2 v ) { return clamp( v, 0.0, 1.0 ); }
vec3 saturate( vec3 v ) { return clamp( v, 0.0, 1.0 ); }
vec4 saturate( vec4 v ) { return clamp( v, 0.0, 1.0 ); }
vec4 tex2Dlod( sampler2D image, vec4 texcoord ) { return textureLod( image, texcoord.xy, texcoord.w ); }
vec4 tex3Dlod( sampler3D image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBElod( samplerCube image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 tex2DARRAYlod( sampler2DArray image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBEARRAYlod( samplerCubeArray image, vec4 texcoord, float lod ) { return textureLod( image, texcoord.xyzw, lod ); }

uniform vec4 _va_freqHigh [17];
uniform vec4 _va_freqLow [6];
layout( std430 ) buffer fogofwar_b {
	restrict readonly uint fogofwar[ ];
};

in vec4 in_Position;
in vec2 in_TexCoord;

out vec4 vofi_Color;
out vec4 vofi_TexCoord1;
out vec4 vofi_TexCoord0;
out vec4 vofi_TexCoord2;
out vec4 vofi_TexCoord3;
out vec4 vofi_TexCoord5;

float dot4 ( vec4 a, vec4 b ) { return dot( a, b ); }
float dot4 ( vec2 a, vec4 b ) { return dot( vec4( a, 0.0, 1.0 ), b ); }
void main() {
	{
		vec4 position = in_Position * _va_freqLow[0 ] + _va_freqLow[1 ];
		vec4 tempPosition0, tempPosition1;
		tempPosition0.x = dot4( position, _va_freqHigh[0 ] );
		tempPosition0.y = dot4( position, _va_freqHigh[1 ] );
		tempPosition0.z = dot4( position, _va_freqHigh[2 ] );
		tempPosition0.w = dot4( position, _va_freqHigh[3 ] );
		tempPosition1.x = dot4( tempPosition0, _va_freqHigh[4 ] );
		tempPosition1.y = dot4( tempPosition0, _va_freqHigh[5 ] );
		tempPosition1.z = dot4( tempPosition0, _va_freqHigh[6 ] );
		tempPosition1.w = dot4( tempPosition0, _va_freqHigh[7 ] );
		vofi_TexCoord1 = tempPosition0;
		gl_Position.x = dot4( position, _va_freqHigh[8 ] );
		gl_Position.y = dot4( position, _va_freqHigh[9 ] );
		gl_Position.z = dot4( position, _va_freqHigh[10 ] );
		gl_Position.w = dot4( position, _va_freqHigh[11 ] );
		vofi_TexCoord0.xy = in_TexCoord.xy;
		vofi_TexCoord0.zw = vec2( 0.0 );
		vofi_TexCoord2.xyz = tempPosition0.xyz;
		vofi_TexCoord2.w = 0.0;
		vofi_TexCoord3.xy = in_TexCoord.xy;
		vofi_TexCoord5.x = dot4( tempPosition1, _va_freqLow[2 ] );
		vofi_TexCoord5.y = dot4( tempPosition1, _va_freqLow[3 ] );
		vofi_TexCoord5.z = dot4( tempPosition1, _va_freqLow[4 ] );
		vofi_TexCoord5.w = dot4( tempPosition1, _va_freqLow[5 ] );
		vec4 vertColor = _va_freqHigh[12 ];
		int shift_divisor = 4;
		int and_modulus = 15;
		int bits_per_tile = 2;
		int min_val_to_clip = 1; if ( _va_freqHigh[13 ].x > 0.0 ) {
			int tile_row = int( ( tempPosition0.y - _va_freqHigh[14 ].y ) / _va_freqHigh[15 ].y );
			int tile_column = int( ( tempPosition0.x - _va_freqHigh[14 ].x ) / _va_freqHigh[15 ].x );
			int tile_layer = int( ( tempPosition0.z - _va_freqHigh[14 ].z ) / _va_freqHigh[15 ].w );
			int tile_Index = int( _va_freqHigh[14 ].w * tile_layer ) + tile_column + int( tile_row * _va_freqHigh[15 ].z );
			uint fogTile = fogofwar[ ( tile_Index >> shift_divisor ) ];
			uint shiftVal = ( tile_Index & and_modulus ) * bits_per_tile;
			uint bit_mask = 3 << shiftVal;
			uint val = fogTile & bit_mask; if ( ( val & bit_mask ) == 0 ) {
				vertColor = vec4( 0.0 );
			} if ( ( val & bit_mask ) == ( 1 << shiftVal ) ) {
				vertColor = _va_freqHigh[16 ];
			}
		}
		vofi_Color = vertColor;
	}
}
[fragment shader]
#version 430 core
#extension GL_ARB_shader_clock : enable
void clip( float v ) { if ( v < 0.0 ) { discard; } }
void clip( vec2 v ) { if ( any( lessThan( v, vec2( 0.0 ) ) ) ) { discard; } }
void clip( vec3 v ) { if ( any( lessThan( v, vec3( 0.0 ) ) ) ) { discard; } }
void clip( vec4 v ) { if ( any( lessThan( v, vec4( 0.0 ) ) ) ) { discard; } }

float saturate( float v ) { return clamp( v, 0.0, 1.0 ); }
vec2 saturate( vec2 v ) { return clamp( v, 0.0, 1.0 ); }
vec3 saturate( vec3 v ) { return clamp( v, 0.0, 1.0 ); }
vec4 saturate( vec4 v ) { return clamp( v, 0.0, 1.0 ); }

vec4 tex2D( sampler2D image, vec2 texcoord ) { return texture( image, texcoord.xy ); }
vec4 tex2D( sampler2DShadow image, vec3 texcoord ) { return vec4( texture( image, texcoord.xyz ) ); }
vec4 tex2DARRAY( sampler2DArray image, vec3 texcoord ) { return texture( image, texcoord.xyz ); }

vec4 tex2D( sampler2D image, vec2 texcoord, vec2 dx, vec2 dy ) { return textureGrad( image, texcoord.xy, dx, dy ); }
vec4 tex2D( sampler2DShadow image, vec3 texcoord, vec2 dx, vec2 dy ) { return vec4( textureGrad( image, texcoord.xyz, dx, dy ) ); }
vec4 tex2DARRAY( sampler2DArray image, vec3 texcoord, vec2 dx, vec2 dy ) { return textureGrad( image, texcoord.xyz, dx, dy ); }

vec4 texCUBE( samplerCube image, vec3 texcoord ) { return texture( image, texcoord.xyz ); }
vec4 texCUBE( samplerCubeShadow image, vec4 texcoord ) { return vec4( texture( image, texcoord.xyzw ) ); }
vec4 texCUBEARRAY( samplerCubeArray image, vec4 texcoord ) { return texture( image, texcoord.xyzw ); }

vec4 tex1Dproj( sampler1D image, vec2 texcoord ) { return textureProj( image, texcoord ); }
vec4 tex2Dproj( sampler2D image, vec3 texcoord ) { return textureProj( image, texcoord ); }
vec4 tex3Dproj( sampler3D image, vec4 texcoord ) { return textureProj( image, texcoord ); }

vec4 tex1Dbias( sampler1D image, vec4 texcoord ) { return texture( image, texcoord.x, texcoord.w ); }
vec4 tex2Dbias( sampler2D image, vec4 texcoord ) { return texture( image, texcoord.xy, texcoord.w ); }
vec4 tex2DARRAYbias( sampler2DArray image, vec4 texcoord ) { return texture( image, texcoord.xyz, texcoord.w ); }
vec4 tex3Dbias( sampler3D image, vec4 texcoord ) { return texture( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBEbias( samplerCube image, vec4 texcoord ) { return texture( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBEARRAYbias( samplerCubeArray image, vec4 texcoord, float bias ) { return texture( image, texcoord.xyzw, bias); }

vec4 tex1Dlod( sampler1D image, vec4 texcoord ) { return textureLod( image, texcoord.x, texcoord.w ); }
vec4 tex2Dlod( sampler2D image, vec4 texcoord ) { return textureLod( image, texcoord.xy, texcoord.w ); }
vec4 tex2DARRAYlod( sampler2DArray image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 tex3Dlod( sampler3D image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBElod( samplerCube image, vec4 texcoord ) { return textureLod( image, texcoord.xyz, texcoord.w ); }
vec4 texCUBEARRAYlod( samplerCubeArray image, vec4 texcoord, float lod ) { return textureLod( image, texcoord.xyzw, lod ); }

vec4 tex2DGatherRed( sampler2D image, vec2 texcoord ) { return textureGather( image, texcoord, 0 ); }
vec4 tex2DGatherGreen( sampler2D image, vec2 texcoord ) { return textureGather( image, texcoord, 1 ); }
vec4 tex2DGatherBlue( sampler2D image, vec2 texcoord ) { return textureGather( image, texcoord, 2 ); }
vec4 tex2DGatherAlpha( sampler2D image, vec2 texcoord ) { return textureGather( image, texcoord, 3 ); }

vec4 tex2DGatherOffsetRed( sampler2D image, vec2 texcoord, const ivec2 v0 ) { return textureGatherOffset( image, texcoord, v0, 0 ); }
vec4 tex2DGatherOffsetGreen( sampler2D image, vec2 texcoord, const ivec2 v0 ) { return textureGatherOffset( image, texcoord, v0, 1 ); }
vec4 tex2DGatherOffsetBlue( sampler2D image, vec2 texcoord, const ivec2 v0 ) { return textureGatherOffset( image, texcoord, v0, 2 ); }
vec4 tex2DGatherOffsetAlpha( sampler2D image, vec2 texcoord, const ivec2 v0 ) { return textureGatherOffset( image, texcoord, v0, 3 ); }

#define tex2DGatherOffsetsRed( image, texcoord, v0, v1, v2, v3 ) textureGatherOffsets( image, texcoord, ivec2[]( v0, v1, v2, v3 ), 0 )
#define tex2DGatherOffsetsGreen( image, texcoord, v0, v1, v2, v3 ) textureGatherOffsets( image, texcoord, ivec2[]( v0, v1, v2, v3 ), 1 )
#define tex2DGatherOffsetsBlue( image, texcoord, v0, v1, v2, v3 ) textureGatherOffsets( image, texcoord, ivec2[]( v0, v1, v2, v3 ), 2 )
#define tex2DGatherOffsetsAlpha( image, texcoord, v0, v1, v2, v3 ) textureGatherOffsets( image, texcoord, ivec2[]( v0, v1, v2, v3 ), 3 )

uniform vec4 _fa_freqHigh [3];
uniform vec4 _fa_freqLow [1];
uniform sampler2D samp_transmap2;
uniform sampler2D samp_echodithermap;
uniform sampler2D samp_transmap1;

in vec4 vofi_Color;
in vec4 vofi_TexCoord1;
in vec4 gl_FragCoord;

out vec4 out_FragColor0;

vec2 screenPosToTexcoord ( vec2 pos, vec4 bias_scale ) { return ( pos * bias_scale.zw + bias_scale.xy ); }
vec2 screenPosToTexcoord ( vec2 pos, vec4 bias_scale, vec4 resolution_scale ) { return ( ( pos * bias_scale.zw + bias_scale.xy ) * resolution_scale.xy ); }
void main() {
	{
		vec4 texColor = vofi_Color;
		texColor.w *= _fa_freqHigh[0 ].x;
		texColor.w = max( 0.25, texColor.w );
		out_FragColor0 = texColor;
		float pingLength = length( vofi_TexCoord1.xyz - _fa_freqLow[0 ].xyz );
		float pingFalloff = 1.0 - saturate( pingLength * 0.00008 );
		vec2 pingTC = vec2( pingFalloff * 10.0 + _fa_freqHigh[1 ].x * 0.4, 0.5 );
		vec4 ping = tex2Dlod( samp_transmap2, vec4( pingTC, 0.0, 0.0 ) );
		ping *= pingFalloff;
		out_FragColor0 *= ping;
		vec2 screenTC = screenPosToTexcoord( gl_FragCoord.xy, _fa_freqHigh[2 ] );
		out_FragColor0 += 0.05 * tex2Dlod( samp_echodithermap, vec4( screenTC * 50.0, 0.0, 0.0 ) ).x;
		out_FragColor0 *= vec4( 1.0 - tex2Dlod( samp_transmap1, vec4( screenTC * 10.0, 0.0, 0.0 ) ).z );
		{
			out_FragColor0.a = saturate( out_FragColor0.a );
			out_FragColor0.rgb *= out_FragColor0.a;
		};
		{
			out_FragColor0.a = 0.0001;
		};
	}
}
